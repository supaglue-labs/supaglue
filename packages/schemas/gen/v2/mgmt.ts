/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/customers": {
    /**
     * List customers 
     * @description Get a list of customers
     */
    get: operations["getCustomers"];
    /** Upsert customer */
    put: operations["upsertCustomer"];
  };
  "/customers/{customer_id}": {
    /** Get customer */
    get: operations["getCustomer"];
    /** Delete customer */
    delete: operations["deleteCustomer"];
    parameters: {
      path: {
        customer_id: string;
      };
    };
  };
  "/destinations": {
    /**
     * List destinations 
     * @description Get a list of destinations
     */
    get: operations["getDestinations"];
    /** Create destination */
    post: operations["createDestination"];
  };
  "/destinations/{destination_id}": {
    /** Get destination */
    get: operations["getDestination"];
    /** Update destination */
    put: operations["updateDestination"];
    parameters: {
      path: {
        destination_id: string;
      };
    };
  };
  "/field_mappings": {
    /** List schema mappings */
    get: operations["listFieldMappings"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/magic_links": {
    /**
     * List magic links 
     * @description Get a list of magic links
     */
    get: operations["getMagicLinks"];
    /** Create magic link */
    post: operations["createMagicLink"];
  };
  "/magic_links/{magic_link_id}": {
    /** Delete magic link */
    delete: operations["deleteMagicLink"];
    parameters: {
      path: {
        magic_link_id: string;
      };
    };
  };
  "/field_mappings/_update_object": {
    /** Update schema mappings */
    put: operations["updateObjectFieldMappings"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/entity_mappings": {
    /** List entity mappings. */
    get: operations["listEntityMappings"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/entity_mappings/{entity_id}": {
    /** Upsert entity mapping */
    put: operations["upsertEntityMapping"];
    /** Delete entity mapping */
    delete: operations["deleteEntityMapping"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        entity_id: string;
      };
    };
  };
  "/schemas": {
    /**
     * List schemas 
     * @description Get a list of schemas
     */
    get: operations["getSchemas"];
    /** Create schema */
    post: operations["createSchema"];
  };
  "/schemas/{schema_id}": {
    /** Get schema */
    get: operations["getSchema"];
    /** Update schema */
    put: operations["updateSchema"];
    /** Delete schema */
    delete: operations["deleteSchema"];
    parameters: {
      path: {
        schema_id: string;
      };
    };
  };
  "/entities": {
    /**
     * List entities 
     * @description Get a list of entities
     */
    get: operations["getEntities"];
    /** Create entity */
    post: operations["createEntity"];
  };
  "/entities/{entity_id}": {
    /** Get entity */
    get: operations["getEntity"];
    /** Update entity */
    put: operations["updateEntity"];
    /** Delete entity */
    delete: operations["deleteEntity"];
    parameters: {
      path: {
        entity_id: string;
      };
    };
  };
  "/providers": {
    /**
     * List providers 
     * @description Get a list of providers
     */
    get: operations["getProviders"];
    /** Create provider */
    post: operations["createProvider"];
  };
  "/providers/{provider_id}": {
    /** Get provider */
    get: operations["getProvider"];
    /** Update provider */
    put: operations["updateProvider"];
    /** Delete provider */
    delete: operations["deleteProvider"];
    parameters: {
      path: {
        provider_id: string;
      };
    };
  };
  "/sync_configs": {
    /**
     * List Sync Configs 
     * @description Get a list of Sync Configs
     */
    get: operations["getSyncConfigs"];
    /** Create Sync Config */
    post: operations["createSyncConfig"];
  };
  "/sync_configs/{sync_config_id}": {
    /** Get Sync Config */
    get: operations["getSyncConfig"];
    /** Update Sync Config */
    put: operations["updateSyncConfig"];
    /** Delete Sync Config */
    delete: operations["deleteSyncConfig"];
    parameters: {
      path: {
        sync_config_id: string;
      };
    };
  };
  "/customers/{customer_id}/connections": {
    /**
     * List connections 
     * @description Get a list of connections
     */
    get: operations["getConnections"];
    /**
     * Create a connection 
     * @description This endpoint is for providers that use API key or access key for authentication. Please use [Embedded Links](https://docs.supaglue.com/platform/managed-auth#oauth-20) for providers that support Oauth2 for authentication.
     */
    post: operations["createConnection"];
    parameters: {
      path: {
        customer_id: string;
      };
    };
  };
  "/customers/{customer_id}/connections/_provider_user_id": {
    /**
     * Get logged in user ID 
     * @description This endpoint returns the ID of the logged in user. This is sometimes known as the owner ID.
     */
    get: operations["getProviderUserId"];
    parameters: {
      path: {
        customer_id: string;
      };
    };
  };
  "/customers/{customer_id}/connections/{connection_id}": {
    /** Get connection */
    get: operations["getConnection"];
    /** Delete connection */
    delete: operations["deleteConnection"];
    parameters: {
      path: {
        customer_id: string;
        connection_id: string;
      };
    };
  };
  "/syncs": {
    /**
     * Get Syncs 
     * @description Get a list of Syncs.
     */
    get: operations["getSyncs"];
  };
  "/syncs/_pause": {
    /** Pause sync */
    post: operations["pauseSync"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/syncs/_resume": {
    /** Resume sync */
    post: operations["resumeSync"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/syncs/_trigger": {
    /** Trigger sync */
    post: operations["triggerSync"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/sync-runs": {
    /**
     * Get SyncRuns 
     * @description Get a list of SyncRuns.
     */
    get: operations["getSyncRuns"];
  };
}

export interface webhooks {
  "salesforce_cdc.create": {
    /**
     * Salesforce record created (beta) 
     * @description When a record is created in a customer's Salesforce (beta)
     * 
     * This feature is in private beta in Supaglue Cloud. Please [register](https://m8ndtm64l4g.typeform.com/to/ovOUDxGj) if you'd like early access.
     */
    post: operations["salesforceCdcCreate"];
  };
  "salesforce_cdc.update": {
    /**
     * Salesforce record updated (beta) 
     * @description When a record is updated in a customer's Salesforce (beta)
     * 
     * This feature is in private beta in Supaglue Cloud. Please [register](https://m8ndtm64l4g.typeform.com/to/ovOUDxGj) if you'd like early access.
     */
    post: operations["salesforceCdcUpdate"];
  };
  "salesforce_cdc.delete": {
    /**
     * Salesforce record deleted (beta) 
     * @description When a record is deleted from a customer's Salesforce (beta)
     * 
     * This feature is in private beta in Supaglue Cloud. Please [register](https://m8ndtm64l4g.typeform.com/to/ovOUDxGj) if you'd like early access.
     */
    post: operations["salesforceCdcDelete"];
  };
  "salesforce_cdc.undelete": {
    /**
     * Salesforce record undeleted (beta) 
     * @description When a record is undeleted in a customer's Salesforce (beta)
     * 
     * This feature is in private beta in Supaglue Cloud. Please [register](https://m8ndtm64l4g.typeform.com/to/ovOUDxGj) if you'd like early access.
     */
    post: operations["salesforceCdcUndelete"];
  };
  "sync.complete": {
    /**
     * Sync completed 
     * @description Notification of the completion of a sync
     */
    post: operations["syncComplete"];
  };
  "connection.create": {
    /**
     * Customer connection created 
     * @description Notification of the creation of a connection for a customer
     */
    post: operations["connectionCreate"];
  };
}

export interface components {
  schemas: {
    pagination: {
      /** @example eyJpZCI6IjQyNTc5ZjczLTg1MjQtNDU3MC05YjY3LWVjYmQ3MDJjNmIxNCIsInJldmVyc2UiOmZhbHNlfQ== */
      next: string | null;
      /** @example eyJpZCI6IjBjZDhmYmZkLWU5NmQtNDEwZC05ZjQxLWIwMjU1YjdmNGI4NyIsInJldmVyc2UiOnRydWV9 */
      previous: string | null;
      /** @example 100 */
      total_count: number;
    };
    customer: {
      /** @example d8ceb3ff-8b7f-4fa7-b8de-849292f6ca69 */
      application_id: string;
      /** @example your-customers-unique-application-id */
      customer_id: string;
      /** @example MyCompany Inc */
      name: string;
      /** @example contact@mycompany.com */
      email: string;
      connections?: (components["schemas"]["connection"])[];
    };
    provider: {
      /** @example 0c4cb91f-e392-46f5-8934-17496371f932 */
      id: string;
      /** @example 273e1c75-3b6d-439a-9b8e-c6ac407df92a */
      application_id: string;
      category: components["schemas"]["category"];
      /**
       * @example oauth2 
       * @enum {string}
       */
      auth_type: "oauth2" | "api_key";
      name: components["schemas"]["provider_name"];
      config?: components["schemas"]["create_provider_config"];
      objects?: components["schemas"]["objects"];
      /** @description This is for object/field mappings when you data model using [Entities](https://docs.supaglue.com/platform/entities/overview). The object/field mappings (aka [Entity Mappings](https://docs.supaglue.com/platform/entities/overview#entity-mapping)) here are set by you, the developer, and the mappings apply for all your customers. */
      entity_mappings?: (components["schemas"]["provider_entity_mapping"])[];
    };
    /**
     * @example {
     *   "id": "2cce5aed-e8fc-41b2-bff6-6ddbc1f99285",
     *   "application_id": "e52286c9-3038-4fa2-a2b8-3ec9759d20cb",
     *   "name": "My Postgres Destination",
     *   "type": "postgres",
     *   "config": {
     *     "host": "production-db-new.cluster-cdhnnutnlctj.us-west-2.rds.amazonaws.com",
     *     "port": 5432,
     *     "database": "postgres_prod_db",
     *     "schema": "public",
     *     "user": "myuser"
     *   }
     * }
     */
    destination: OneOf<[{
      /** @example d455d20b-f6dc-4bc3-ab14-b4f21c4b4835 */
      id: string;
      /** @example 726fb798-d854-4c59-9a23-57e3e2f73eae */
      application_id: string;
      /** @example My Postgres Destination */
      name: string;
      /**
       * @example postgres 
       * @enum {string}
       */
      type: "postgres";
      config: components["schemas"]["postgres_config_safe"];
    }, {
      /** @example e888cedf-e9d0-42c5-9485-2d72984faef2 */
      id: string;
      /** @example 9572d08b-f19f-48cc-a992-1eb7031d3f6a */
      application_id: string;
      /** @example My S3 Destination */
      name: string;
      /**
       * @example s3 
       * @enum {string}
       */
      type: "s3";
      config: components["schemas"]["s3_config_safe"];
    }, {
      /** @example e888cedf-e9d0-42c5-9485-2d72984faef2 */
      id: string;
      /** @example 9572d08b-f19f-48cc-a992-1eb7031d3f6a */
      application_id: string;
      /** @example My BigQuery Destination */
      name: string;
      /**
       * @example bigquery 
       * @enum {string}
       */
      type: "bigquery";
      config: components["schemas"]["bigquery_config_safe"];
    }, {
      /** @example e888cedf-e9d0-42c5-9485-2d72984faef2 */
      id: string;
      /** @example 9572d08b-f19f-48cc-a992-1eb7031d3f6a */
      application_id: string;
      /** @example My Mongo Destination */
      name: string;
      /**
       * @example mongodb 
       * @enum {string}
       */
      type: "mongodb";
      config: components["schemas"]["mongodb_config_safe"];
    }]>;
    s3_config_safe: {
      /** @example us-west-2 */
      region: string;
      /** @example my-test-bucket */
      bucket: string;
      /** @example AKIAIOSFODNN7EXAMPLE */
      access_key_id: string;
    };
    postgres_config_safe: {
      /** @example production-db-new.cluster-cdhnnutnlctj.us-west-2.rds.amazonaws.com */
      host: string;
      /** @example 5432 */
      port: number;
      /** @example postgres_prod_db */
      database: string;
      /** @example public */
      schema: string;
      /** @example myuser */
      user: string;
    };
    bigquery_config_safe: {
      /** @example my-gcp-project-id */
      project_id: string;
      /** @example my_bigquery_dataset */
      dataset: string;
      credentials: {
        /** @example my_bigquery_service_account@my_project.iam.gserviceaccount.com */
        client_email: string;
      };
    };
    mongodb_config_safe: {
      /** @example my-cluster.z31wcmj.mongodb.net */
      host: string;
      /** @example my-cluster */
      database: string;
      /** @example myuser */
      user: string;
    };
    s3_config_at_least_safe: {
      /** @example us-west-2 */
      region: string;
      /** @example my-test-bucket */
      bucket: string;
      /** @example AKIAIOSFODNN7EXAMPLE */
      access_key_id: string;
      /** @example A1lciPB09K2iqNHTLAftxTHy0SKGxNcO4QecAsZS */
      secret_access_key?: string;
    };
    postgres_config_at_least_safe: {
      /** @example production-db-new.cluster-cdhnnutnlctj.us-west-2.rds.amazonaws.com */
      host: string;
      /** @example 5432 */
      port: number;
      /** @example postgres_prod_db */
      database: string;
      /** @example public */
      schema: string;
      /** @example myuser */
      user: string;
      /** @example mysensitivepassword */
      password?: string;
    };
    bigquery_config_at_least_safe: {
      /** @example my-gcp-project-id */
      project_id: string;
      /** @example my_bigquery_dataset */
      dataset: string;
      credentials: {
        /** @example my_bigquery_service_account@my_project.iam.gserviceaccount.com */
        client_email: string;
        /** @example -----BEGIN PRIVATE KEY-----\nMII... */
        private_key: string;
      };
    };
    mongodb_config_at_least_safe: {
      /** @example my-cluster.z31wcmj.mongodb.net */
      host: string;
      /** @example my-cluster */
      database: string;
      /** @example myuser */
      user: string;
      /** @example mysensitivepassword */
      password?: string;
    };
    s3_config_unsafe: {
      /** @example us-west-2 */
      region: string;
      /** @example my-test-bucket */
      bucket: string;
      /** @example AKIAIOSFODNN7EXAMPLE */
      access_key_id: string;
      /** @example A1lciPB09K2iqNHTLAftxTHy0SKGxNcO4QecAsZS */
      secret_access_key: string;
    };
    postgres_config_unsafe: {
      /** @example production-db-new.cluster-cdhnnutnlctj.us-west-2.rds.amazonaws.com */
      host: string;
      /** @example 5432 */
      port: number;
      /** @example postgres_prod_db */
      database: string;
      /** @example public */
      schema: string;
      /** @example myuser */
      user: string;
      /** @example mysensitivepassword */
      password: string;
    };
    bigquery_config_unsafe: {
      /** @example my-gcp-project-id */
      project_id: string;
      /** @example my_bigquery_dataset */
      dataset: string;
      credentials: {
        /** @example my_bigquery_service_account@my_project.iam.gserviceaccount.com */
        client_email: string;
        /** @example -----BEGIN PRIVATE KEY-----\nMII... */
        private_key: string;
      };
    };
    mongodb_config_unsafe: {
      /** @example my-cluster.z31wcmj.mongodb.net */
      host: string;
      /** @example my-cluster */
      database: string;
      /** @example myuser */
      user: string;
      /** @example mysensitivepassword */
      password: string;
    };
    schema: {
      /** @example 649b1e49-2722-46a3-a7e7-10caae78a43f */
      id: string;
      /** @example d8ceb3ff-8b7f-4fa7-b8de-849292f6ca69 */
      application_id: string;
      /** @example my-schema */
      name: string;
      config: components["schemas"]["schema_config"];
    };
    schema_config: {
      fields: ({
          /**
           * @description Your application field name. 
           * @example apolla_first_name
           */
          name: string;
          /**
           * @description The field your customer maps. This is a Provider-specified field name. E.g. FirstName for Salesforce. 
           * @example FirstName
           */
          mapped_name?: string;
        })[];
      /**
       * @description Specifies whether your customer can add new application field names. 
       * @example false
       */
      allow_additional_field_mappings: boolean;
    };
    magic_link: {
      /** @example ec208408-db29-4705-b39e-4d33070b4ef6 */
      id: string;
      /** @example created */
      status: string;
      /** @enum {string} */
      auth_type: "oauth2" | "api_key" | "access_key_secret";
      /** @example d8ceb3ff-8b7f-4fa7-b8de-849292f6ca69 */
      application_id: string;
      /** @example my-customer-1 */
      customer_id: string;
      /** @example 677fcfca-cf89-4387-a189-71c885be67bc */
      provider_id: string;
      provider_name: components["schemas"]["provider_name"];
      /**
       * @description The magic link URL. 
       * @example https://app.hubspot.com/contacts/123456
       */
      url: string;
      /**
       * @description URL to redirect to after the connection is authorized. 
       * @example https://app.myapp.com/connections/123456
       */
      return_url: string;
      /**
       * Format: date-time 
       * @example 2023-02-23T00:00:00Z
       */
      expires_at: Date;
    };
    create_magic_link: {
      /** @example my-customer-1 */
      customer_id: string;
      provider_name: components["schemas"]["provider_name"];
      /** @enum {string} */
      auth_type: "oauth2" | "api_key" | "access_key_secret";
      /**
       * @description URL to redirect to after the connection is authorized. 
       * @example https://app.myapp.com/connections/123456
       */
      return_url: string;
      /** @example 18000 */
      expiration_secs: number;
    };
    entity: {
      /** @example 649b1e49-2722-46a3-a7e7-10caae78a43f */
      id: string;
      /** @example d8ceb3ff-8b7f-4fa7-b8de-849292f6ca69 */
      application_id: string;
      /** @example my-entity */
      name: string;
      config: components["schemas"]["entity_config"];
    };
    entity_config: {
      fields: ({
          /** @example apolla_first_name */
          name: string;
        })[];
      allow_additional_field_mappings: boolean;
    };
    /** @description This is for field mappings when you data model using [Objects](https://docs.supaglue.com/platform/objects/overview). The field mappings (aka [Schemas](https://docs.supaglue.com/platform/objects/overview#schemas)) here are set by you, the developer, and the mappings apply for all your customers. */
    objects: {
      common?: ({
          /** @example account */
          name: string;
          /**
           * @description If set, will sync these mapped fields into the raw_data column in addition to the common object. If not set, will fetch all fields as is. 
           * @example 328a8cb3-8345-4b02-b661-ee13b4f76806
           */
          schema_id?: string;
        })[];
      standard?: ({
          /** @example Account */
          name: string;
          /** @example 777ea826-5776-4347-9ece-47bbb17ccdd4 */
          schema_id?: string;
        })[];
    };
    object_field_mappings: {
      /** @example contact */
      object_name: string;
      /** @enum {string} */
      object_type: "common" | "standard";
      /** @example true */
      allow_additional_field_mappings: boolean;
      /** @example 51797e8d-f081-496d-99ec-5e41b467df4b */
      schema_id: string;
      fields: (components["schemas"]["merged_field_map"])[];
    };
    merged_field_map: {
      /**
       * @description The name of the field as set in the schema 
       * @example email
       */
      name: string;
      /** @description Whether the field was added by the customer (only applicable if the schema has allow_additional_field_mappings set to true) */
      is_added_by_customer: boolean;
      /** @description The mapped named of the field as set in the schema by the developer. If set, the customer cannot override. Only one of `schema_mapped_name` or `customer_mapped_name` should be set. */
      schema_mapped_name?: string;
      /** @description The mapped name of the field as set by the customer. Only one of `schema_mapped_name` or `customer_mapped_name` should be set. */
      customer_mapped_name?: string;
    };
    update_object_field_mapping: {
      /** @example contact */
      name: string;
      /** @enum {string} */
      type: "common" | "standard";
      field_mappings: (components["schemas"]["object_field_mapping"])[];
    };
    object_field_mapping: {
      /** @example apolla_first_name */
      schema_field: string;
      /** @example FirstName */
      mapped_field?: string;
    };
    connection: {
      /** @example e888cedf-e9d0-42c5-9485-2d72984faef2 */
      id: string;
      /**
       * @example available 
       * @enum {string}
       */
      status: "available" | "added" | "authorized" | "callable";
      /** @example d8ceb3ff-8b7f-4fa7-b8de-849292f6ca69 */
      application_id: string;
      /** @example my-customer-1 */
      customer_id: string;
      /** @example 677fcfca-cf89-4387-a189-71c885be67bc */
      provider_id: string;
      provider_name: components["schemas"]["provider_name"];
      category: components["schemas"]["category"];
      /**
       * @description Instance URL for the connected customer. 
       * @example https://app.hubspot.com/contacts/123456
       */
      instance_url: string;
      /** @description This is for field mappings when you data model using [Objects](https://docs.supaglue.com/platform/objects/overview#schemas). The field mappings here are set by your customers using the [Field Mappings API](https://docs.supaglue.com/api/v2/mgmt/update-object-field-mappings). */
      schema_mappings_config?: {
        common_objects?: ({
            /** @example Contact__c */
            object: string;
            field_mappings: (components["schemas"]["object_field_mapping"])[];
          })[];
        standard_objects?: ({
            /** @example Contact */
            object: string;
            field_mappings: (components["schemas"]["object_field_mapping"])[];
          })[];
      };
      /**
       * @description This is for object/field mappings when you data model using [Entities](https://docs.supaglue.com/platform/entities/overview#entity-mapping). The object/field mappings here are set by your customers using the [Entity Mappings API](https://docs.supaglue.com/api/v2/mgmt/upsert-entity-mapping). 
       * @example []
       */
      entity_mappings?: (components["schemas"]["connection_entity_mapping"])[];
    };
    /**
     * @example crm 
     * @enum {string}
     */
    category: "crm" | "engagement" | "no_category";
    sync_config: {
      /** @example 465fdcb7-26b4-4090-894c-67cab41022bb */
      id: string;
      /** @example 9572d08b-f19f-48cc-a992-1eb7031d3f6a */
      application_id: string;
      /** @example 6e7baa88-84dd-4dbc-902a-14522c2984eb */
      destination_id: string;
      /** @example 7f72ec07-e5c1-47fd-8cf5-e71dd13873af */
      provider_id: string;
      config: components["schemas"]["sync_config_data"];
    };
    sync_config_data: {
      /** @description Configuration options for "how" to sync. */
      default_config: {
        /**
         * @description The period (in milliseconds) to run the sync. 
         * @example 60000
         */
        period_ms: number;
        /**
         * @description \"full then incremental\" will run a full sync on the first run, then incremental syncs. \"full only\" will run a full sync on every run. 
         * @enum {string}
         */
        strategy: "full then incremental" | "full only";
        /**
         * @description If true, the sync will start automatically when the connection is created.
         * Default: true
         */
        auto_start_on_connection?: boolean;
      };
      /** @description A list of Supaglue objects to be synced. */
      common_objects?: ({
          /**
           * @description The Supaglue object name 
           * @example contact
           */
          object: string;
        })[];
      /** @description A list of case-sensitive Provider objects to be synced. */
      standard_objects?: ({
          /**
           * @description The Provider object name (case sensitive) 
           * @example Contact
           */
          object: string;
        })[];
      /** @description A list of case-sensitive Provider objects to be synced. */
      custom_objects?: ({
          /**
           * @description The Supaglue object name (case sensitive) 
           * @example Contact__c
           */
          object: string;
        })[];
      entities?: ({
          /** @example 3a82409f-c98f-4d25-bbd8-3335de3f12cc */
          entity_id: string;
        })[];
    };
    /** @description An object that stores Oauth2/API key/access key related credentials. */
    create_provider_config: {
      /** @example my_app_id */
      provider_app_id: string;
      /**
       * @description True: use Supaglue's OAuth application credentials. False: Use the provided OAuth application credentials. 
       * @example true
       */
      use_managed_oauth?: boolean;
      oauth: {
        /**
         * @example [
         *   "crm.objects.contacts.read",
         *   "crm.objects.companies.read",
         *   "crm.objects.deals.read",
         *   "crm.objects.owners.read",
         *   "crm.objects.contacts.write",
         *   "crm.objects.companies.write",
         *   "crm.objects.deals.write"
         * ]
         */
        oauth_scopes: (string)[];
        credentials: {
          /** @example 7393b5a4-5e20-4648-87af-b7b297793fd1 */
          oauth_client_id: string;
          /** @example 941b846a-5a8c-48b8-b0e1-41b6d4bc4f1a */
          oauth_client_secret: string;
        };
      };
    };
    /**
     * @description An object that stores Oauth2/API key/access key related credentials. 
     * @example {
     *   "provider_app_id": "my_app_id",
     *   "oauth": {
     *     "oauth_scopes": [
     *       "crm.objects.contacts.read",
     *       "crm.objects.companies.read",
     *       "crm.objects.deals.read",
     *       "crm.objects.owners.read",
     *       "crm.objects.contacts.write",
     *       "crm.objects.companies.write",
     *       "crm.objects.deals.write"
     *     ],
     *     "credentials": {
     *       "oauth_client_id": "7393b5a4-5e20-4648-87af-b7b297793fd1",
     *       "oauth_client_secret": "941b846a-5a8c-48b8-b0e1-41b6d4bc4f1a"
     *     }
     *   }
     * }
     */
    update_provider_config: {
      provider_app_id: string;
      oauth: {
        oauth_scopes: (string)[];
        credentials: {
          oauth_client_id: string;
          oauth_client_secret: string;
        };
      };
    };
    /**
     * @example hubspot 
     * @enum {string}
     */
    provider_name: "hubspot" | "salesforce" | "pipedrive" | "zendesk_sell" | "ms_dynamics_365_sales" | "zoho_crm" | "capsule" | "outreach" | "gong" | "apollo" | "salesloft" | "intercom" | "linear";
    /** @enum {string} */
    provider_name_crm: "hubspot" | "salesforce" | "pipedrive" | "zendesk_sell" | "ms_dynamics_365_sales" | "zoho_crm" | "capsule";
    /** @enum {string} */
    provider_name_engagement: "outreach" | "apollo" | "salesloft";
    /** @enum {string} */
    provider_name_no_category: "intercom" | "gong" | "linear";
    sync: OneOf<[{
      /** @example 7026e4e8-15d7-48d8-b997-f2592b654619 */
      id: string;
      /**
       * @example entity 
       * @enum {string}
       */
      type: "entity";
      /** @example 94e6cb6c-0ec8-423f-8873-21054979a6b1 */
      entity_id: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e4 */
      connection_id: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e5 */
      sync_config_id: string;
      /** @example false */
      paused: boolean;
    }, {
      /** @example 7026e4e8-15d7-48d8-b997-f2592b654619 */
      id: string;
      /**
       * @example object 
       * @enum {string}
       */
      type: "object";
      /**
       * @example standard 
       * @enum {string}
       */
      object_type: "common" | "standard";
      /**
       * @description The Provider's object name (case sensitive) 
       * @example contact
       */
      object: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e4 */
      connection_id: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e5 */
      sync_config_id: string;
      /** @example false */
      paused: boolean;
    }, {
      /** @example 7026e4e8-15d7-48d8-b997-f2592b654619 */
      id: string;
      /**
       * @example object 
       * @enum {string}
       */
      type: "object";
      /**
       * @example standard 
       * @enum {string}
       */
      object_type: "common";
      /**
       * @description Supaglue's object name 
       * @example contact
       */
      object: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e4 */
      connection_id: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e5 */
      sync_config_id: string;
      /** @example false */
      paused: boolean;
    }]>;
    sync_with_provider_and_customer: OneOf<[{
      /** @example 971cb76d-9558-42fe-8f3b-8a531c32bd5f */
      id: string;
      /**
       * @example entity 
       * @enum {string}
       */
      type: "entity";
      /** @example 70da3830-b717-49cb-91f0-22fb3f09a97a */
      entity_id: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e4 */
      connection_id: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e5 */
      sync_config_id: string;
      /** @example false */
      paused: boolean;
      /** @example hubspot */
      provider_name: string;
      /** @example my-customer-1 */
      customer_id: string;
    }, {
      /** @example 971cb76d-9558-42fe-8f3b-8a531c32bd5f */
      id: string;
      /**
       * @example object 
       * @enum {string}
       */
      type: "object";
      /**
       * @example standard 
       * @enum {string}
       */
      object_type: "common" | "standard";
      /** @example contact */
      object: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e4 */
      connection_id: string;
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e5 */
      sync_config_id: string;
      /** @example false */
      paused: boolean;
      /** @example hubspot */
      provider_name: string;
      /** @example my-customer-1 */
      customer_id: string;
    }]>;
    sync_run: OneOf<[{
      /** @enum {string} */
      object_type: "common" | "standard";
      object: string;
      error_message: string | null;
      /** @example 2023-02-22T19:55:17.559Z */
      start_timestamp: string;
      /** @example 2023-02-22T20:55:17.559Z */
      end_timestamp: string | null;
      /** @example 974125fa-ffb6-47fc-b12f-44c566fc5da1 */
      application_id: string;
      /** @example my-customer-1 */
      customer_id: string;
      /** @example hubspot */
      provider_name: string;
      /** @enum {string} */
      category: "crm";
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e4 */
      connection_id: string;
      /** @enum {string} */
      status: "SUCCESS" | "IN_PROGRESS" | "FAILURE";
      /** @example 100 */
      num_records_synced: number | null;
    }, {
      entity_id: string;
      error_message: string | null;
      /** @example 2023-02-22T19:55:17.559Z */
      start_timestamp: string;
      /** @example 2023-02-22T20:55:17.559Z */
      end_timestamp: string | null;
      /** @example 974125fa-ffb6-47fc-b12f-44c566fc5da1 */
      application_id: string;
      /** @example my-customer-1 */
      customer_id: string;
      /** @example hubspot */
      provider_name: string;
      /** @enum {string} */
      category: "crm";
      /** @example 3217ea51-11c8-43c9-9547-6f197e02e5e4 */
      connection_id: string;
      /** @enum {string} */
      status: "SUCCESS" | "IN_PROGRESS" | "FAILURE";
      /** @example 100 */
      num_records_synced: number | null;
    }]>;
    create_update_customer: {
      /** @example your-customers-unique-application-id */
      customer_id: string;
      /** @example MyCompany Inc */
      name: string;
      /** @example contact@mycompany.com */
      email: string;
    };
    create_provider: OneOf<[{
      /** @enum {string} */
      auth_type: "oauth2";
      config: components["schemas"]["create_provider_config"];
      objects?: components["schemas"]["objects"];
      /** @enum {string} */
      category: "crm";
      name: components["schemas"]["provider_name_crm"];
    }, {
      /** @enum {string} */
      auth_type: "oauth2";
      config: components["schemas"]["create_provider_config"];
      objects?: components["schemas"]["objects"];
      /** @enum {string} */
      category: "engagement";
      name: components["schemas"]["provider_name_engagement"];
    }, {
      /** @enum {string} */
      auth_type: "api_key";
      /** @enum {string} */
      category?: "no_category";
      name?: components["schemas"]["provider_name_no_category"];
    }]>;
    update_provider: OneOf<[{
      /** @enum {string} */
      auth_type: "oauth2";
      config: components["schemas"]["update_provider_config"];
      objects?: components["schemas"]["objects"];
      entity_mappings?: (components["schemas"]["provider_entity_mapping"])[];
      /** @enum {string} */
      category: "crm";
      name: components["schemas"]["provider_name_crm"];
    }, {
      /** @enum {string} */
      auth_type: "oauth2";
      config: components["schemas"]["update_provider_config"];
      objects?: components["schemas"]["objects"];
      entity_mappings?: (components["schemas"]["provider_entity_mapping"])[];
      /** @enum {string} */
      category: "engagement";
      name: components["schemas"]["provider_name_engagement"];
    }, {
      /** @enum {string} */
      auth_type: "oauth2";
      config: components["schemas"]["update_provider_config"];
      objects?: components["schemas"]["objects"];
      entity_mappings?: (components["schemas"]["provider_entity_mapping"])[];
      /** @enum {string} */
      category: "no_category";
      name: components["schemas"]["provider_name_no_category"];
    }]>;
    create_update_schema: {
      /** @example my-schema */
      name: string;
      config: components["schemas"]["schema_config"];
    };
    create_update_entity: {
      /** @example my-entity */
      name: string;
      config: components["schemas"]["entity_config"];
    };
    create_destination: OneOf<[{
      /** @example My Postgres Destination */
      name: string;
      /**
       * @example postgres 
       * @enum {string}
       */
      type: "postgres";
      config: components["schemas"]["postgres_config_unsafe"];
    }, {
      /** @example My S3 Destination */
      name: string;
      /**
       * @example s3 
       * @enum {string}
       */
      type: "s3";
      config: components["schemas"]["s3_config_unsafe"];
    }, {
      /** @example My BigQuery Destination */
      name: string;
      /**
       * @example bigquery 
       * @enum {string}
       */
      type: "bigquery";
      config: components["schemas"]["bigquery_config_unsafe"];
    }, {
      /** @example My MongoDB Destination */
      name: string;
      /**
       * @example mongodb 
       * @enum {string}
       */
      type: "mongodb";
      config: components["schemas"]["mongodb_config_unsafe"];
    }]>;
    /**
     * @example {
     *   "name": "My Postgres Destination",
     *   "type": "postgres",
     *   "config": {
     *     "host": "production-db-new.cluster-cdhnnutnlctj.us-west-2.rds.amazonaws.com",
     *     "port": 5432,
     *     "database": "postgres_prod_db",
     *     "schema": "public",
     *     "user": "myuser",
     *     "password": "mysensitivepassword"
     *   }
     * }
     */
    update_destination: OneOf<[{
      /** @example My Postgres Destination */
      name: string;
      /**
       * @example postgres 
       * @enum {string}
       */
      type: "postgres";
      config: components["schemas"]["postgres_config_at_least_safe"];
    }, {
      /** @example My S3 Destination */
      name: string;
      /**
       * @example s3 
       * @enum {string}
       */
      type: "s3";
      config: components["schemas"]["s3_config_at_least_safe"];
    }, {
      /** @example My BigQuery Destination */
      name: string;
      /**
       * @example bigquery 
       * @enum {string}
       */
      type: "bigquery";
      config: components["schemas"]["bigquery_config_at_least_safe"];
    }, {
      /** @example My MongoDB Destination */
      name: string;
      /**
       * @example mongodb 
       * @enum {string}
       */
      type: "mongodb";
      config: components["schemas"]["mongodb_config_at_least_safe"];
    }]>;
    create_update_sync_config: {
      /** @example 6e7baa88-84dd-4dbc-902a-14522c2984eb */
      destination_id: string;
      /** @example 7f72ec07-e5c1-47fd-8cf5-e71dd13873af */
      provider_id: string;
      config: components["schemas"]["sync_config_data"];
    };
    "webhook-payload": OneOf<[{
      /** @enum {unknown} */
      type: "SYNC_SUCCESS" | "SYNC_ERROR";
      payload: {
        /** @example e30cbb93-5b05-4186-b6de-1acc10013795 */
        connection_id: string;
        /** @example 7bfcc74d-c98b-49de-8e8f-3dc7a17273f6 */
        customer_id: string;
        /**
         * @example hubspot 
         * @enum {string}
         */
        provider_name?: "hubspot" | "salesforce";
        /** @example 2fdbd03d-11f2-4e66-a5e6-2b731c71a12d */
        history_id: string;
        /** @example 100 */
        num_records_synced: number;
        /** @enum {string} */
        object_type: "common" | "standard";
        /** @example contact */
        object: string;
        error_message?: string;
      };
    }, {
      /** @enum {unknown} */
      type: "CONNECTION_SUCCESS" | "CONNECTION_ERROR";
      payload: {
        /** @example e30cbb93-5b05-4186-b6de-1acc10013795 */
        customer_id: string;
        /** @example 5a4dbac6-3a56-4ad9-8aa3-e7b7f00be024 */
        provider_id: string;
        /** @enum {string} */
        category: "crm";
        /**
         * @example hubspot 
         * @enum {string}
         */
        provider_name: "hubspot" | "salesforce";
      };
    }]>;
    standard_object: {
      /**
       * @example standard 
       * @enum {string}
       */
      type: "standard";
      /** @example Contact */
      name: string;
    };
    standard_or_custom_object: {
      /** @enum {string} */
      type: "standard" | "custom";
      name: string;
    };
    provider_entity_mapping: {
      /** @example apolla_contact */
      entity_id: string;
      object?: components["schemas"]["standard_object"];
      field_mappings?: (components["schemas"]["entity_field_mapping"])[];
    };
    connection_entity_mapping: {
      entity_id: string;
      object?: components["schemas"]["standard_or_custom_object"];
      field_mappings?: (components["schemas"]["entity_field_mapping"])[];
    };
    merged_entity_mapping: {
      entity_id: string;
      entity_name: string;
      allow_additional_field_mappings: boolean;
      object?: components["schemas"]["standard_or_custom_object"] & ({
        /** @enum {string} */
        from: "developer" | "customer";
      });
      field_mappings: ({
          entity_field: string;
          mapped_field?: string;
          /** @enum {string} */
          from?: "developer" | "customer";
          is_additional: boolean;
        })[];
    };
    entity_field_mapping: {
      /**
       * @description The name of the field in your application. 
       * @example apolla_first_name
       */
      entity_field: string;
      /**
       * @description The name of the field in your customer's third-party Provider tool (e.g. Salesforce). 
       * @example FirstName
       */
      mapped_field: string;
    };
  };
  responses: never;
  parameters: {
    /** @description The pagination cursor value */
    cursor?: string;
    /** @description Number of results to return per page */
    page_size?: string;
    /** @description The customer ID that uniquely identifies the customer in your application */
    customer_id?: string;
    /** @description The provider name */
    provider_name?: string;
    /** @description The provider name */
    "x-provider-name": string;
    /** @description The customer ID that uniquely identifies the customer in your application */
    "x-customer-id": string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * List customers 
   * @description Get a list of customers
   */
  getCustomers: {
    responses: {
      /** @description Customers */
      200: {
        content: {
          "application/json": (components["schemas"]["customer"])[];
        };
      };
    };
  };
  /** Upsert customer */
  upsertCustomer: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_update_customer"];
      };
    };
    responses: {
      /** @description Customer upserted */
      200: {
        content: {
          "application/json": components["schemas"]["customer"];
        };
      };
    };
  };
  /** Get customer */
  getCustomer: {
    parameters: {
      path: {
        customer_id: string;
      };
    };
    responses: {
      /** @description Customer */
      200: {
        content: {
          "application/json": components["schemas"]["customer"];
        };
      };
    };
  };
  /** Delete customer */
  deleteCustomer: {
    parameters: {
      path: {
        customer_id: string;
      };
    };
    responses: {
      /** @description Customer */
      200: {
        content: {
          "application/json": components["schemas"]["customer"];
        };
      };
    };
  };
  /**
   * List destinations 
   * @description Get a list of destinations
   */
  getDestinations: {
    responses: {
      /** @description Destinations */
      200: {
        content: {
          "application/json": (components["schemas"]["destination"])[];
        };
      };
    };
  };
  /** Create destination */
  createDestination: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_destination"];
      };
    };
    responses: {
      /** @description Destination created */
      201: {
        content: {
          "application/json": components["schemas"]["destination"];
        };
      };
    };
  };
  /** Get destination */
  getDestination: {
    parameters: {
      path: {
        destination_id: string;
      };
    };
    responses: {
      /** @description Destination */
      200: {
        content: {
          "application/json": components["schemas"]["destination"];
        };
      };
    };
  };
  /** Update destination */
  updateDestination: {
    parameters: {
      path: {
        destination_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["update_destination"];
      };
    };
    responses: {
      /** @description Destination */
      200: {
        content: {
          "application/json": components["schemas"]["destination"];
        };
      };
    };
  };
  /** List schema mappings */
  listFieldMappings: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    responses: {
      /** @description List of objects and their field mappings (if set) */
      200: {
        content: {
          "application/json": (components["schemas"]["object_field_mappings"])[];
        };
      };
    };
  };
  /**
   * List magic links 
   * @description Get a list of magic links
   */
  getMagicLinks: {
    responses: {
      /** @description Magic Links */
      200: {
        content: {
          "application/json": (components["schemas"]["magic_link"])[];
        };
      };
    };
  };
  /** Create magic link */
  createMagicLink: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_magic_link"];
      };
    };
    responses: {
      /** @description Entity created */
      201: {
        content: {
          "application/json": components["schemas"]["magic_link"];
        };
      };
    };
  };
  /** Delete magic link */
  deleteMagicLink: {
    parameters: {
      path: {
        magic_link_id: string;
      };
    };
    responses: {
      /** @description Magic Link deleted */
      204: never;
    };
  };
  /** Update schema mappings */
  updateObjectFieldMappings: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["update_object_field_mapping"];
      };
    };
    responses: {
      /** @description List of objects and their field mappings (if set) */
      200: {
        content: {
          "application/json": components["schemas"]["object_field_mappings"];
        };
      };
    };
  };
  /** List entity mappings. */
  listEntityMappings: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    responses: {
      /** @description List of entity mappings */
      200: {
        content: {
          "application/json": (components["schemas"]["merged_entity_mapping"])[];
        };
      };
    };
  };
  /** Upsert entity mapping */
  upsertEntityMapping: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["connection_entity_mapping"];
      };
    };
    responses: {
      /** @description Entity Mapping */
      200: never;
    };
  };
  /** Delete entity mapping */
  deleteEntityMapping: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        entity_id: string;
      };
    };
    responses: {
      /** @description Entity Mapping */
      204: never;
    };
  };
  /**
   * List schemas 
   * @description Get a list of schemas
   */
  getSchemas: {
    responses: {
      /** @description Schemas */
      200: {
        content: {
          "application/json": (components["schemas"]["schema"])[];
        };
      };
    };
  };
  /** Create schema */
  createSchema: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_update_schema"];
      };
    };
    responses: {
      /** @description Schema created */
      201: {
        content: {
          "application/json": components["schemas"]["schema"];
        };
      };
    };
  };
  /** Get schema */
  getSchema: {
    parameters: {
      path: {
        schema_id: string;
      };
    };
    responses: {
      /** @description Schema */
      200: {
        content: {
          "application/json": components["schemas"]["schema"];
        };
      };
    };
  };
  /** Update schema */
  updateSchema: {
    parameters: {
      path: {
        schema_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_update_schema"];
      };
    };
    responses: {
      /** @description Schema */
      200: {
        content: {
          "application/json": components["schemas"]["schema"];
        };
      };
    };
  };
  /** Delete schema */
  deleteSchema: {
    parameters: {
      path: {
        schema_id: string;
      };
    };
    responses: {
      /** @description Schema */
      204: {
        content: {
          "application/json": components["schemas"]["schema"];
        };
      };
    };
  };
  /**
   * List entities 
   * @description Get a list of entities
   */
  getEntities: {
    responses: {
      /** @description Entities */
      200: {
        content: {
          "application/json": (components["schemas"]["entity"])[];
        };
      };
    };
  };
  /** Create entity */
  createEntity: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_update_entity"];
      };
    };
    responses: {
      /** @description Entity created */
      201: {
        content: {
          "application/json": components["schemas"]["entity"];
        };
      };
    };
  };
  /** Get entity */
  getEntity: {
    parameters: {
      path: {
        entity_id: string;
      };
    };
    responses: {
      /** @description Entity */
      200: {
        content: {
          "application/json": components["schemas"]["entity"];
        };
      };
    };
  };
  /** Update entity */
  updateEntity: {
    parameters: {
      path: {
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_update_entity"];
      };
    };
    responses: {
      /** @description Entity */
      200: {
        content: {
          "application/json": components["schemas"]["entity"];
        };
      };
    };
  };
  /** Delete entity */
  deleteEntity: {
    parameters: {
      path: {
        entity_id: string;
      };
    };
    responses: {
      /** @description Entity */
      204: {
        content: {
          "application/json": components["schemas"]["entity"];
        };
      };
    };
  };
  /**
   * List providers 
   * @description Get a list of providers
   */
  getProviders: {
    responses: {
      /** @description Providers */
      200: {
        content: {
          "application/json": (components["schemas"]["provider"])[];
        };
      };
    };
  };
  /** Create provider */
  createProvider: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_provider"];
      };
    };
    responses: {
      /** @description Provider created */
      201: {
        content: {
          "application/json": components["schemas"]["provider"];
        };
      };
    };
  };
  /** Get provider */
  getProvider: {
    parameters: {
      path: {
        provider_id: string;
      };
    };
    responses: {
      /** @description Provider */
      200: {
        content: {
          "application/json": components["schemas"]["provider"];
        };
      };
    };
  };
  /** Update provider */
  updateProvider: {
    parameters: {
      path: {
        provider_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["update_provider"];
      };
    };
    responses: {
      /** @description Provider */
      200: {
        content: {
          "application/json": components["schemas"]["provider"];
        };
      };
    };
  };
  /** Delete provider */
  deleteProvider: {
    parameters: {
      path: {
        provider_id: string;
      };
    };
    responses: {
      /** @description Provider */
      200: {
        content: {
          "application/json": components["schemas"]["provider"];
        };
      };
    };
  };
  /**
   * List Sync Configs 
   * @description Get a list of Sync Configs
   */
  getSyncConfigs: {
    responses: {
      /** @description SyncConfigs */
      200: {
        content: {
          "application/json": (components["schemas"]["sync_config"])[];
        };
      };
    };
  };
  /** Create Sync Config */
  createSyncConfig: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_update_sync_config"];
      };
    };
    responses: {
      /** @description SyncConfig created */
      201: {
        content: {
          "application/json": components["schemas"]["sync_config"];
        };
      };
    };
  };
  /** Get Sync Config */
  getSyncConfig: {
    parameters: {
      path: {
        sync_config_id: string;
      };
    };
    responses: {
      /** @description SyncConfig */
      200: {
        content: {
          "application/json": components["schemas"]["sync_config"];
        };
      };
    };
  };
  /** Update Sync Config */
  updateSyncConfig: {
    parameters: {
      path: {
        sync_config_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_update_sync_config"];
      };
    };
    responses: {
      /** @description SyncConfig */
      200: {
        content: {
          "application/json": components["schemas"]["sync_config"];
        };
      };
    };
  };
  /** Delete Sync Config */
  deleteSyncConfig: {
    parameters: {
      path: {
        sync_config_id: string;
      };
    };
    responses: {
      /** @description SyncConfig */
      200: {
        content: {
          "application/json": components["schemas"]["sync_config"];
        };
      };
    };
  };
  /**
   * List connections 
   * @description Get a list of connections
   */
  getConnections: {
    parameters: {
      path: {
        customer_id: string;
      };
    };
    responses: {
      /** @description Connections */
      200: {
        content: {
          "application/json": (components["schemas"]["connection"])[];
        };
      };
    };
  };
  /**
   * Create a connection 
   * @description This endpoint is for providers that use API key or access key for authentication. Please use [Embedded Links](https://docs.supaglue.com/platform/managed-auth#oauth-20) for providers that support Oauth2 for authentication.
   */
  createConnection: {
    parameters: {
      path: {
        customer_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": OneOf<[{
          /**
           * @example apollo 
           * @enum {string}
           */
          provider_name: "apollo";
          /**
           * @description API key for the connected customer. 
           * @example e0c5545d-77b8-458d-b4bf-fc701a9cecac
           */
          api_key: string;
        }, {
          /**
           * @example gong 
           * @enum {string}
           */
          provider_name: "gong";
          /**
           * @description Access key for the connected customer. 
           * @example e0c5545d-77b8-458d-b4bf-fc701a9cecac
           */
          access_key: string;
          /**
           * @description Access key secret for the connected customer. 
           * @example 258a80aa-2e9b-40b0-8d7a-28f858a856f3
           */
          access_key_secret: string;
        }]>;
      };
    };
    responses: {
      /** @description Connection created */
      200: {
        content: {
          "application/json": components["schemas"]["connection"];
        };
      };
    };
  };
  /**
   * Get logged in user ID 
   * @description This endpoint returns the ID of the logged in user. This is sometimes known as the owner ID.
   */
  getProviderUserId: {
    parameters: {
      query: {
        provider_name: components["schemas"]["provider_name"];
      };
      path: {
        customer_id: string;
      };
    };
    responses: {
      /** @description UserId */
      200: {
        content: {
          "application/json": {
            /** @description The ID of the logged in user. The ID originates from your customer's third-party Provider (e.g. MS Dynamics 365 Sales). */
            user_id?: string;
          };
        };
      };
    };
  };
  /** Get connection */
  getConnection: {
    parameters: {
      path: {
        customer_id: string;
        connection_id: string;
      };
    };
    responses: {
      /** @description Connection */
      200: {
        content: {
          "application/json": components["schemas"]["connection"] & {
            /** @description The id of the user associated with this connection. This is sometimes also known as the owner. */
            user_id?: string;
          };
        };
      };
    };
  };
  /** Delete connection */
  deleteConnection: {
    parameters: {
      path: {
        customer_id: string;
        connection_id: string;
      };
    };
    responses: {
      /** @description An empty body is returned on successful deletion. */
      204: never;
    };
  };
  /**
   * Get Syncs 
   * @description Get a list of Syncs.
   */
  getSyncs: {
    parameters: {
      query?: {
        /** @description The pagination cursor value */
        cursor?: string;
        /** @description Number of results to return per page */
        page_size?: string;
        /** @description The customer ID that uniquely identifies the customer in your application */
        customer_id?: string;
        /** @description The provider name */
        provider_name?: string;
        /** @description The object type to filter by */
        object_type?: "common" | "standard";
        /** @description The object to filter by */
        object?: string;
        /** @description The entity id to filter by */
        entity_id?: string;
      };
    };
    responses: {
      /** @description Sync */
      200: {
        content: {
          "application/json": components["schemas"]["pagination"] & {
            results?: (components["schemas"]["sync_with_provider_and_customer"])[];
          };
        };
      };
    };
  };
  /** Pause sync */
  pauseSync: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": OneOf<[{
          /** @description The entity id to filter by */
          entity_id: string;
        }, {
          /**
           * @description The object type to filter by 
           * @example standard 
           * @enum {string}
           */
          object_type: "common" | "standard";
          /**
           * @description The Provider object to filter by (case sensitive) 
           * @example Contact
           */
          object: string;
        }, {
          /**
           * @description The object type to filter by 
           * @example common 
           * @enum {string}
           */
          object_type: "common";
          /**
           * @description The Supaglue object to filter by 
           * @example contact
           */
          object: string;
        }]>;
      };
    };
    responses: {
      /** @description Sync paused */
      200: {
        content: {
          "application/json": components["schemas"]["sync"];
        };
      };
    };
  };
  /** Resume sync */
  resumeSync: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": OneOf<[{
          /**
           * @description The entity id to filter by 
           * @example cfba6060-c43a-4a63-8a8c-501c6099f8b0
           */
          entity_id: string;
        }, {
          /**
           * @description The object type to filter by 
           * @example standard 
           * @enum {string}
           */
          object_type: "common" | "standard";
          /**
           * @description The object to filter by 
           * @example contact
           */
          object: string;
        }]>;
      };
    };
    responses: {
      /** @description Sync resumed */
      200: {
        content: {
          "application/json": components["schemas"]["sync"];
        };
      };
    };
  };
  /** Trigger sync */
  triggerSync: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": OneOf<[{
          /** @description The entity id to filter by */
          entity_id: string;
          /** @example true */
          perform_full_refresh?: boolean;
        }, {
          /**
           * @description The object type to filter by 
           * @example standard 
           * @enum {string}
           */
          object_type: "standard";
          /**
           * @description The Provider object to filter by (case sensitive) 
           * @example contact
           */
          object: string;
          /** @example true */
          perform_full_refresh?: boolean;
        }, {
          /**
           * @description The object type to filter by 
           * @example common 
           * @enum {string}
           */
          object_type: "common";
          /**
           * @description The Supaglue object to filter by 
           * @example contact
           */
          object: string;
          /** @example true */
          perform_full_refresh?: boolean;
        }]>;
      };
    };
    responses: {
      /** @description Sync triggered */
      200: {
        content: {
          "application/json": components["schemas"]["sync"];
        };
      };
    };
  };
  /**
   * Get SyncRuns 
   * @description Get a list of SyncRuns.
   */
  getSyncRuns: {
    parameters: {
      query?: {
        /** @description The pagination cursor value */
        cursor?: string;
        /** @description Number of results to return per page */
        page_size?: string;
        /** @description The customer ID that uniquely identifies the customer in your application */
        customer_id?: string;
        /** @description The provider name */
        provider_name?: string;
        object_type?: "common" | "standard";
        /** @description The object to filter by */
        object?: string;
        /** @description The entity id to filter by */
        entity_id?: string;
      };
    };
    responses: {
      /** @description SyncRun */
      200: {
        content: {
          "application/json": components["schemas"]["pagination"] & {
            results?: (components["schemas"]["sync_run"])[];
          };
        };
      };
    };
  };
  /**
   * Salesforce record created (beta) 
   * @description When a record is created in a customer's Salesforce (beta)
   * 
   * This feature is in private beta in Supaglue Cloud. Please [register](https://m8ndtm64l4g.typeform.com/to/ovOUDxGj) if you'd like early access.
   */
  salesforceCdcCreate: {
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": "0011t00000B0G6uAAF",
         *   "entity_name": "Account",
         *   "fields": {
         *     "Name": "Acme"
         *   }
         * }
         */
        "application/json": {
          /**
           * @description The Salesforce ID of the record that was created 
           * @example 0011t00000B0G6uAAF
           */
          id: string;
          /**
           * @description The name of the Salesforce object that the record belongs to 
           * @example Account
           */
          entity_name: string;
          /**
           * @description The fields that were set when the record was created 
           * @example {
           *   "Name": "Acme"
           * }
           */
          fields: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * Salesforce record updated (beta) 
   * @description When a record is updated in a customer's Salesforce (beta)
   * 
   * This feature is in private beta in Supaglue Cloud. Please [register](https://m8ndtm64l4g.typeform.com/to/ovOUDxGj) if you'd like early access.
   */
  salesforceCdcUpdate: {
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": "0011t00000B0G6uAAF",
         *   "entity_name": "Account",
         *   "fields": {
         *     "Name": "Acme"
         *   },
         *   "nulled_fields": [],
         *   "changed_fields": [
         *     "Name"
         *   ],
         *   "diff_fields": []
         * }
         */
        "application/json": {
          /**
           * @description The Salesforce ID of the record that was updated 
           * @example 0011t00000B0G6uAAF
           */
          id: string;
          /**
           * @description The name of the Salesforce object that the record belongs to 
           * @example Account
           */
          entity_name: string;
          /**
           * @description The fields that were set to null when the record was updated 
           * @example [
           *   "PhoneNumber2"
           * ]
           */
          nulled_fields: (string)[];
          /**
           * @description The fields that were changed when the record was updated 
           * @example [
           *   "Name"
           * ]
           */
          changed_fields: (string)[];
          /**
           * @description The fields that were changed when the record was updated and the value in the fields object is a diff to be applied to the existing value 
           * @example [
           *   "Description"
           * ]
           */
          diff_fields: (string)[];
          /** @description The fields that were set when the record was created */
          fields: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * Salesforce record deleted (beta) 
   * @description When a record is deleted from a customer's Salesforce (beta)
   * 
   * This feature is in private beta in Supaglue Cloud. Please [register](https://m8ndtm64l4g.typeform.com/to/ovOUDxGj) if you'd like early access.
   */
  salesforceCdcDelete: {
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": "0011t00000B0G6uAAF",
         *   "entity_name": "Account"
         * }
         */
        "application/json": {
          /**
           * @description The Salesforce ID of the record that was deleted 
           * @example 0011t00000B0G6uAAF
           */
          id: string;
          /**
           * @description The name of the Salesforce object that the record belongs to 
           * @example Account
           */
          entity_name: string;
        };
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * Salesforce record undeleted (beta) 
   * @description When a record is undeleted in a customer's Salesforce (beta)
   * 
   * This feature is in private beta in Supaglue Cloud. Please [register](https://m8ndtm64l4g.typeform.com/to/ovOUDxGj) if you'd like early access.
   */
  salesforceCdcUndelete: {
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": "0011t00000B0G6uAAF",
         *   "entity_name": "Account",
         *   "fields": {
         *     "Name": "Acme"
         *   }
         * }
         */
        "application/json": {
          /**
           * @description The Salesforce ID of the record that was undeleted 
           * @example 0011t00000B0G6uAAF
           */
          id: string;
          /**
           * @description The name of the Salesforce object that the record belongs to 
           * @example Account
           */
          entity_name: string;
          /**
           * @description The fields that were set when the record was undeleted 
           * @example {
           *   "Name": "Acme"
           * }
           */
          fields: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * Sync completed 
   * @description Notification of the completion of a sync
   */
  syncComplete: {
    requestBody?: {
      content: {
        /**
         * @example {
         *   "connection_id": "e30cbb93-5b05-4186-b6de-1acc10013795",
         *   "customer_id": "7bfcc74d-c98b-49de-8e8f-3dc7a17273f6",
         *   "provider_name": "salesforce",
         *   "history_id": "2fdbd03d-11f2-4e66-a5e6-2b731c71a12d",
         *   "object_type": "standard",
         *   "object": "contact",
         *   "error_message": "Error message"
         * }
         */
        "application/json": ({
          /** @example e30cbb93-5b05-4186-b6de-1acc10013795 */
          connection_id: string;
          /** @example 7bfcc74d-c98b-49de-8e8f-3dc7a17273f6 */
          customer_id: string;
          provider_name: components["schemas"]["provider_name"];
          /** @example 2fdbd03d-11f2-4e66-a5e6-2b731c71a12d */
          history_id: string;
          /** @enum {string} */
          result: "SUCCESS" | "ERROR";
          /** @example 100 */
          num_records_synced?: number;
          /** @example Error message */
          error_message?: string;
        }) & (OneOf<[{
          /** @enum {string} */
          type: "object";
          /** @enum {string} */
          object_type: "common" | "standard";
          /** @example contact */
          object: string;
        }, {
          /** @enum {string} */
          type: "entity";
          entity_id: string;
        }]>);
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * Customer connection created 
   * @description Notification of the creation of a connection for a customer
   */
  connectionCreate: {
    requestBody?: {
      content: {
        /**
         * @example {
         *   "customer_id": "e30cbb93-5b05-4186-b6de-1acc10013795",
         *   "provider_id": "5a4dbac6-3a56-4ad9-8aa3-e7b7f00be024",
         *   "category": "crm",
         *   "provider_name": "salesforce",
         *   "result": "SUCCESS"
         * }
         */
        "application/json": {
          /** @example e30cbb93-5b05-4186-b6de-1acc10013795 */
          customer_id: string;
          /** @example 5a4dbac6-3a56-4ad9-8aa3-e7b7f00be024 */
          provider_id: string;
          category: components["schemas"]["category"];
          provider_name: components["schemas"]["provider_name"];
          /** @enum {string} */
          result: "SUCCESS" | "ERROR";
        };
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
}
