/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/entities/{entity_name}": {
    /** Create Entity record */
    post: operations["createEntityRecord"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        entity_name: string;
      };
    };
  };
  "/entities/{entity_name}/{record_id}": {
    /** Get Entity Record */
    get: operations["getEntityRecord"];
    /** Update entity record */
    patch: operations["updateEntityRecord"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        entity_name: string;
        record_id: string;
      };
    };
  };
  "/objects/standard/{object_name}": {
    /** Create Standard Object record */
    post: operations["createStandardObjectRecord"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        object_name: string;
      };
    };
  };
  "/objects/standard/{object_name}/{record_id}": {
    /** Get Standard Object record */
    get: operations["getStandardObjectRecord"];
    /** Update Standard Object record */
    patch: operations["updateStandardObjectRecord"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        object_name: string;
        record_id: string;
      };
    };
  };
  "/associations": {
    /**
     * List associations 
     * @description Get a list of associations
     */
    get: operations["getAssociations"];
    /** Create association */
    put: operations["createAssociation"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/passthrough": {
    /**
     * Send passthrough request 
     * @description Send request directly to a provider
     */
    post: operations["sendPassthroughRequest"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    entity_record: {
      /** @example ede9f49c-3a38-4ff8-8226-ffd99b89ad5e */
      id: string;
      entity: components["schemas"]["simple_entity"];
      /**
       * @description The data, in key:value format 
       * @example {
       *   "name": "John Doe",
       *   "email": "johndoe123@supaglue.com",
       *   "additional_properties": {
       *     "has_signed_nda": false
       *   }
       * }
       */
      data: {
        /** @description Any data that is not part of the Entity itself but is mapped by the customer when `allow_additional_field_mappings` is `true` on the Entity. */
        additional_fields?: {
          [key: string]: unknown;
        };
        [key: string]: unknown;
      };
    };
    simple_entity: {
      /** @example 12579e73-8524-4570-9b67-ecbd702c6b19 */
      id: string;
      /** @example ApplicationContact */
      name: string;
    };
    standard_object_record: {
      id: string;
      standard_object_name: string;
      /** @description The data, in key:value format */
      data: {
        /** @description Any data that is not part of the Schema itself but is mapped by the customer when `allow_additional_field_mappings` is `true` on the Schema. */
        additional_fields?: {
          [key: string]: unknown;
        };
        [key: string]: unknown;
      };
    };
    /**
     * @example {
     *   "id": "001Fn00023f8oYYIA0",
     *   "custom_object_id": "Account",
     *   "data": {
     *     "Name": "Acme Corp",
     *     "Description": "We create the best embedded integration platforms."
     *   }
     * }
     */
    custom_object_record: {
      id: string;
      custom_object_id: string;
      data: {
        additional_fields?: {
          [key: string]: unknown;
        };
        [key: string]: unknown;
      };
    };
    /** @description The data (in key:value format) that will be used to create or update an Entity Record. */
    create_update_entity_record: {
      [key: string]: unknown;
    };
    created_entity_record: {
      /** @example 42579e73-8524-4570-9b67-ecbd702c6b15 */
      id: string;
      entity: components["schemas"]["simple_entity"];
    };
    /** @description The data (in key:value format) that will be used to create or update an Standard Object Record. */
    create_update_standard_object_record: {
      [key: string]: unknown;
    };
    created_standard_object_record: {
      id: string;
      standard_object_name: string;
    };
    create_update_custom_object_record: {
      [key: string]: unknown;
    };
    created_custom_object_record: {
      id: string;
      custom_object_id: string;
    };
    create_update_association: {
      association_type_id: string;
      source_record: components["schemas"]["simple_entity_record"];
      target_record: components["schemas"]["simple_entity_record"];
    };
    association: {
      source_record: components["schemas"]["simple_entity_record"];
      target_record: components["schemas"]["simple_entity_record"];
      association_type_id: string;
    };
    simple_entity_record: {
      id: string;
      entity_id: string;
    };
    errors: ({
        /** @example name is a required field on model. */
        detail?: string;
        /** @example MISSING_REQUIRED_FIELD */
        problem_type?: string;
        source?: {
          /** @example irure consectetur */
          pointer?: string;
        };
        /** @example Missing Required Field */
        title?: string;
      })[];
    /**
     * @example [
     *   {
     *     "detail": "An unrecognized field, age, was passed in with request data.",
     *     "problem_type": "UNRECOGNIZED_FIELD",
     *     "source": {
     *       "pointer": "Lorem ipsum"
     *     },
     *     "title": "Unrecognized Field"
     *   },
     *   {
     *     "detail": "An unrecognized field, age, was passed in with request data.",
     *     "problem_type": "UNRECOGNIZED_FIELD",
     *     "source": {
     *       "pointer": "in"
     *     },
     *     "title": "Unrecognized Field"
     *   }
     * ]
     */
    warnings: ({
        /** @example An unrecognized field, age, was passed in with request data. */
        detail?: string;
        /** @example UNRECOGNIZED_FIELD */
        problem_type?: string;
        source?: {
          /** @example Lorem ipsum */
          pointer?: string;
        };
        /** @example Unrecognized Field */
        title?: string;
      })[];
  };
  responses: never;
  parameters: {
    /** @description The customer ID that uniquely identifies the customer in your application */
    "x-customer-id": string;
    /** @description The provider name */
    "x-provider-name": string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Create Entity record */
  createEntityRecord: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        entity_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data: components["schemas"]["create_update_entity_record"];
        };
      };
    };
    responses: {
      /** @description EntityRecord created */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            record?: components["schemas"]["created_entity_record"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Get Entity Record */
  getEntityRecord: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        entity_name: string;
        record_id: string;
      };
    };
    responses: {
      /** @description Entity record */
      200: {
        content: {
          "application/json": components["schemas"]["entity_record"];
        };
      };
    };
  };
  /** Update entity record */
  updateEntityRecord: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        entity_name: string;
        record_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data: components["schemas"]["create_update_entity_record"];
        };
      };
    };
    responses: {
      /** @description Entity record updated */
      200: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Create Standard Object record */
  createStandardObjectRecord: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        object_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data: components["schemas"]["create_update_standard_object_record"];
        };
      };
    };
    responses: {
      /** @description Standard ObjectRecord created */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            record?: components["schemas"]["created_standard_object_record"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Get Standard Object record */
  getStandardObjectRecord: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        object_name: string;
        record_id: string;
      };
    };
    responses: {
      /** @description Standard object record */
      200: {
        content: {
          "application/json": components["schemas"]["standard_object_record"];
        };
      };
    };
  };
  /** Update Standard Object record */
  updateStandardObjectRecord: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        object_name: string;
        record_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data: components["schemas"]["create_update_standard_object_record"];
        };
      };
    };
    responses: {
      /** @description Standard object record updated */
      200: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /**
   * List associations 
   * @description Get a list of associations
   */
  getAssociations: {
    parameters: {
      query: {
        source_record_id: string;
        source_entity_id: string;
        target_entity_id: string;
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    responses: {
      /** @description Associations */
      200: {
        content: {
          "application/json": {
            results?: (components["schemas"]["association"])[];
          };
        };
      };
    };
  };
  /** Create association */
  createAssociation: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["create_update_association"];
      };
    };
    responses: {
      /** @description Association created */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            association?: components["schemas"]["association"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /**
   * Send passthrough request 
   * @description Send request directly to a provider
   */
  sendPassthroughRequest: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The path to send the request to (do not pass the domain) */
          path: string;
          /**
           * @example GET 
           * @enum {string}
           */
          method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
          /** @description Headers to pass to downstream */
          headers?: {
            [key: string]: string | undefined;
          };
          /** @description Query parameters to pass to downstream */
          query?: {
            [key: string]: string | undefined;
          };
          /** @description Body to pass to downstream */
          body?: OneOf<[string, {
            [key: string]: unknown;
          }]>;
        };
      };
    };
    responses: {
      /** @description Passthrough response */
      200: {
        content: {
          "application/json": {
            /**
             * @description The full URL the request was went to 
             * @example https://customcrm.com/api/cars
             */
            url: string;
            /**
             * @description Status code from the downstream 
             * @example 200
             */
            status: number;
            /** @description The response headers from the downstream */
            headers: {
              [key: string]: string | undefined;
            };
            /** @description The body from the downstream */
            body?: string | number | boolean | ({
                [key: string]: unknown;
              })[] | {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
}
