/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/accounts": {
    /**
     * List accounts (Preview) 
     * @description :::note
     * This feature is only available in Preview to select customers on our Enterprise plan. [Contact us](mailto:team@supaglue.com) for more information.
     * :::
     */
    get: operations["listAccounts"];
    /** Create account */
    post: operations["createAccount"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/accounts/_upsert": {
    /**
     * Upsert account 
     * @description Upsert an account. If the account does not exist, it will be created. If the account does exist, it will be updated.
     * Only supported for Salesforce and Hubspot.
     */
    post: operations["upsertAccount"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/accounts/{account_id}": {
    /** Get account */
    get: operations["getAccount"];
    /** Update account */
    patch: operations["updateAccount"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        account_id: string;
      };
    };
  };
  "/contacts": {
    /**
     * List contacts (Preview) 
     * @description :::note
     * This feature is only available in Preview to select customers on our Enterprise plan. [Contact us](mailto:team@supaglue.com) for more information.
     * :::
     */
    get: operations["listContacts"];
    /** Create contact */
    post: operations["createContact"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/contacts/_upsert": {
    /**
     * Upsert contact 
     * @description Upsert a contact. If the contact does not exist, it will be created. If the contact does exist, it will be updated.
     * Only supported for Salesforce, Hubspot, and Pipedrive.
     */
    post: operations["upsertContact"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/contacts/{contact_id}": {
    /** Get contact */
    get: operations["getContact"];
    /** Update contact */
    patch: operations["updateContact"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        contact_id: string;
      };
    };
  };
  "/leads": {
    /** Create lead */
    post: operations["createLead"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/leads/{lead_id}": {
    /** Get lead */
    get: operations["getLead"];
    /** Update lead */
    patch: operations["updateLead"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        lead_id: string;
      };
    };
  };
  "/opportunities": {
    /** Create opportunity */
    post: operations["createOpportunity"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/opportunities/{opportunity_id}": {
    /** Get opportunity */
    get: operations["getOpportunity"];
    /** Update opportunity */
    patch: operations["updateOpportunity"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        opportunity_id: string;
      };
    };
  };
  "/users/{user_id}": {
    /** Get user */
    get: operations["getUser"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        user_id: string;
      };
    };
  };
  "/lists/{object_type}": {
    /** List lists */
    get: operations["listLists"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        object_type: "contact" | "account" | "lead" | "opportunity";
      };
    };
  };
  "/lists/{object_type}/{list_id}": {
    /** Get list membership */
    get: operations["getListMembership"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
      };
      path: {
        object_type: "contact" | "account" | "lead" | "opportunity";
        list_view_id: string;
      };
    };
  };
  "/passthrough": {
    /**
     * Send passthrough request 
     * @deprecated 
     * @description Send request directly to a provider
     */
    post: operations["sendPassthroughRequest"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    account: {
      addresses: components["schemas"]["addresses"];
      /** @example Integration API */
      description: string | null;
      /** @example 1234 */
      id: string;
      /** @example API's */
      industry: string | null;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      last_activity_at: Date | null;
      /** @example Sample Customer */
      name: string | null;
      /** @example 276000 */
      number_of_employees: number | null;
      /** @example d8ceb3ff-8b7f-4fa7-b8de-849292f6ca69 */
      owner_id: string | null;
      owner?: components["schemas"]["user"];
      phone_numbers: components["schemas"]["phone_numbers"];
      lifecycle_stage: components["schemas"]["lifecycle_stage"];
      /** @example https://supaglue.com/ */
      website: string | null;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      created_at: Date | null;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      updated_at: Date | null;
      /** @example false */
      is_deleted: boolean;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      last_modified_at: Date;
    };
    create_update_account: {
      /** @example Integration API */
      description?: string | null;
      /** @example API's */
      industry?: string | null;
      /** @example Sample Customer */
      name?: string | null;
      /** @example 276000 */
      number_of_employees?: number | null;
      /** @example https://supaglue.com/ */
      website?: string | null;
      addresses?: components["schemas"]["addresses"];
      phone_numbers?: components["schemas"]["phone_numbers"];
      /** @example 9f3e97fd-4d5d-4efc-959d-bbebfac079f5 */
      owner_id?: string | null;
      lifecycle_stage?: components["schemas"]["lifecycle_stage"];
      custom_fields?: components["schemas"]["custom_fields"];
    };
    contact: {
      /** @example fd089246-09b1-4e3b-a60a-7a76314bbcce */
      account_id: string | null;
      account?: components["schemas"]["account"];
      /** @example 23e640fe-6105-4a11-a636-3aa6b6c6e762 */
      owner_id: string | null;
      owner?: components["schemas"]["user"];
      addresses: components["schemas"]["addresses"];
      email_addresses: components["schemas"]["email_addresses"];
      /** @example George */
      first_name: string | null;
      /** @example 54312 */
      id: string;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      last_activity_at: Date | null;
      /** @example Xing */
      last_name: string | null;
      phone_numbers: components["schemas"]["phone_numbers"];
      lifecycle_stage: components["schemas"]["lifecycle_stage"];
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      created_at: Date | null;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      updated_at: Date | null;
      /** @example false */
      is_deleted: boolean;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      last_modified_at: Date;
      raw_data?: {
        [key: string]: unknown;
      };
    };
    create_update_contact: {
      /** @example George */
      first_name?: string | null;
      /** @example Xing */
      last_name?: string | null;
      /** @example 64571bff-48ea-4469-9fa0-ee1a0bab38bd */
      account_id?: string | null;
      addresses?: components["schemas"]["addresses"];
      email_addresses?: components["schemas"]["email_addresses"];
      phone_numbers?: components["schemas"]["phone_numbers"];
      /** @example 9f3e97fd-4d5d-4efc-959d-bbebfac079f5 */
      owner_id?: string | null;
      lifecycle_stage?: components["schemas"]["lifecycle_stage"];
      custom_fields?: components["schemas"]["custom_fields"];
    };
    lead: {
      addresses: components["schemas"]["addresses"];
      /** @example Supaglue */
      company: string | null;
      /** @example 88cc44ca-7a34-4e8b-b0da-51c3aae34daf */
      converted_account_id: string | null;
      converted_account?: components["schemas"]["account"];
      /** @example 8c8de778-a219-4d6c-848c-1d57b52149f6 */
      converted_contact_id: string | null;
      converted_contact?: components["schemas"]["contact"];
      /**
       * Format: date-time 
       * @example 2023-02-27T00:00:00Z
       */
      converted_date: Date | null;
      email_addresses?: components["schemas"]["email_addresses"];
      /** @example George */
      first_name?: string | null;
      /** @example 54312 */
      id: string;
      /** @example Xing */
      last_name: string | null;
      /** @example API Blogger */
      lead_source: string | null;
      /** @example 62e5e0f7-becd-4ae2-be82-8b4e1d5ed8a2 */
      owner_id: string | null;
      owner?: components["schemas"]["user"];
      phone_numbers: components["schemas"]["phone_numbers"];
      /** @example Co-Founder */
      title: string | null;
      /**
       * Format: date-time 
       * @example 2023-02-10T00:00:00Z
       */
      created_at: Date | null;
      /**
       * Format: date-time 
       * @example 2023-02-10T00:00:00Z
       */
      updated_at: Date | null;
      /** @example false */
      is_deleted: boolean;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      last_modified_at: Date;
    };
    create_update_lead: {
      /** @example Supaglue */
      company?: string | null;
      /** @example George */
      first_name?: string | null;
      /** @example Xing */
      last_name?: string | null;
      /** @example API Blogger */
      lead_source?: string | null;
      /** @example Co-Founder */
      title?: string;
      email_addresses?: components["schemas"]["email_addresses"];
      addresses?: components["schemas"]["addresses"];
      /** @example 9f3e97fd-4d5d-4efc-959d-bbebfac079f5 */
      owner_id?: string | null;
      /** @example ad43955d-2b27-4ec3-b38a-0ca07a76d43b */
      converted_contact_id?: string | null;
      /** @example 2e1e6813-0459-47f5-ad4c-3d137c0e1fdd */
      converted_account_id?: string | null;
      custom_fields?: components["schemas"]["custom_fields"];
    };
    opportunity: {
      /** @example fd089246-09b1-4e3b-a60a-7a76314bbcce */
      account_id: string | null;
      account?: components["schemas"]["account"];
      /** @example 100000 */
      amount: number | null;
      /**
       * Format: date-time 
       * @example 2023-02-27T00:00:00Z
       */
      close_date?: Date | null;
      /** @example Wants to use open source unified API for third-party integrations */
      description: string | null;
      /** @example 54312 */
      id: string;
      /**
       * Format: date-time 
       * @example 2023-02-27T00:00:00Z
       */
      last_activity_at: Date | null;
      /** @example Needs third-party integrations */
      name: string | null;
      /** @example d8ceb3ff-8b7f-4fa7-b8de-849292f6ca69 */
      owner_id: string | null;
      owner?: components["schemas"]["user"];
      pipeline: string | null;
      /** @example Closed Won */
      stage: string | null;
      /** @example OPEN */
      status: string | null;
      /**
       * Format: date-time 
       * @example 2023-02-27T00:00:00Z
       */
      created_at: Date | null;
      /**
       * Format: date-time 
       * @example 2023-02-27T00:00:00Z
       */
      updated_at: Date | null;
      /** @example false */
      is_deleted: boolean;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      last_modified_at: Date;
    };
    user: {
      /** @example 54312 */
      id: string;
      /** @example George Xing */
      name: string | null;
      /** @example george@supaglue.com */
      email: string | null;
      is_active: boolean | null;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      created_at: Date | null;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      updated_at: Date | null;
      /** @example false */
      is_deleted: boolean;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      last_modified_at: Date;
    };
    list_metadata: {
      /**
       * @description The unique identifier for this list. 
       * @example 12345
       */
      id: string;
      /** @enum {string} */
      object_type?: "contact" | "account" | "lead" | "opportunity";
      /**
       * @description The developer name of this list. 
       * @example my-list
       */
      name: string;
      /**
       * @description The label for this list. 
       * @example My List
       */
      label: string;
      /**
       * @description The raw data for this list. 
       * @example {
       *   "describeUrl": "/services/data/v58.0/sobjects/Account/listviews/00BD0000005WcBeMAK/describe",
       *   "developerName": "NewThisWeek",
       *   "id": "00BD0000005WcBeMAK",
       *   "label": "New This Week",
       *   "resultsUrl": "/services/data/v58.0/sobjects/Account/listviews/00BD0000005WcBeMAK/results",
       *   "soqlCompatible": true,
       *   "url": "/services/data/v58.0/sobjects/Account/listviews/00BD0000005WcBeMAK"
       * }
       */
      raw_data: {
        [key: string]: unknown;
      };
    };
    list_membership: {
      /** @description The unique identifier for a member of this list. */
      id: string;
      /**
       * @description The raw data for this list view membership. 
       * @example {
       *   "columns": [
       *     {
       *       "fieldNameOrPath": "Id",
       *       "value": "0012800000bbzSAAAY"
       *     },
       *     {
       *       "fieldNameOrPath": "Email",
       *       "value": "jdoe@example.com"
       *     },
       *     {
       *       "fieldNameOrPath": "FirstName",
       *       "value": "John"
       *     },
       *     {
       *       "fieldNameOrPath": "LastName",
       *       "value": "Doe"
       *     },
       *     {
       *       "fieldNameOrPath": "CreatedDate",
       *       "value": "Fri Aug 01 21:15:46 GMT 2014"
       *     },
       *     {
       *       "fieldNameOrPath": "LastModifiedDate",
       *       "value": "Fri Aug 01 21:15:46 GMT 2014"
       *     },
       *     {
       *       "fieldNameOrPath": "SystemModstamp",
       *       "value": "Fri Aug 01 21:15:46 GMT 2014"
       *     }
       *   ]
       * }
       */
      raw_data: {
        [key: string]: unknown;
      };
    };
    create_update_opportunity: {
      /** @example 100000 */
      amount?: number | null;
      /** @example 2022-02-10T00:00:00Z */
      close_date?: string | null;
      /** @example Wants to use open source unified API for third-party integrations */
      description?: string | null;
      /** @example Needs Integrations */
      name?: string | null;
      /** @example Closed Won */
      stage?: string;
      /** @example 64571bff-48ea-4469-9fa0-ee1a0bab38bd */
      account_id?: string | null;
      /** @example 9f3e97fd-4d5d-4efc-959d-bbebfac079f5 */
      owner_id?: string | null;
      pipeline?: string | null;
      custom_fields?: components["schemas"]["custom_fields"];
    };
    errors: ({
        /**
         * @description The full error message from the remote Provider. The schema and level of detail will vary by Provider. 
         * @example {"code":400,"body":{"status":"error","message":"Property values were not valid: [{\\"isValid\\":false,\\"message\\":\\"Property \\\\\\"__about_us\\\\\\" does not exist\\",\\"error\\":\\"PROPERTY_DOESNT_EXIST\\",\\"name\\":\\"__about_us\\",\\"localizedErrorMessage\\":\\"Property \\\\\\"__about_us\\\\\\" does not exist\\"}]","correlationId":"ac94252c-90b5-45d2-ad1d-9a9f7651d7d2","category":"VALIDATION_ERROR"},"headers":{"access-control-allow-credentials":"false","cf-cache-status":"DYNAMIC","cf-ray":"8053d17b9dae9664-SJC","connection":"close","content-length":"361","content-type":"application/json;charset=utf-8","date":"Mon, 11 Sep 2023 23:51:22 GMT","nel":"{\\"success_fraction\\":0.01,\\"report_to\\":\\"cf-nel\\",\\"max_age\\":604800}","report-to":"{\\"endpoints\\":[{\\"url\\":\\"https://a.nel.cloudflare.com/report/v3?s=FgwuXObO%2Fz6ahUJKsxjDLaXTWjooJ8tB0w4%2B%2BKaulGStx0FGkn1PoJoOx2KrFMfihzNdfAqikq7CmgbdlmwKB8hkmp3eTb68qpg10LXFlRgiSqRhbWM7yYSfo8CXmPBc\\"}],\\"group\\":\\"cf-nel\\",\\"max_age\\":604800}","server":"cloudflare","strict-transport-security":"max-age=31536000; includeSubDomains; preload","vary":"origin, Accept-Encoding","x-content-type-options":"nosniff","x-envoy-upstream-service-time":"91","x-evy-trace-listener":"listener_https","x-evy-trace-route-configuration":"listener_https/all","x-evy-trace-route-service-name":"envoyset-translator","x-evy-trace-served-by-pod":"iad02/hubapi-td/envoy-proxy-6c94986c56-9xsh2","x-evy-trace-virtual-host":"all","x-hubspot-correlation-id":"ac94252c-90b5-45d2-ad1d-9a9f7651d7d2","x-hubspot-ratelimit-interval-milliseconds":"10000","x-hubspot-ratelimit-max":"100","x-hubspot-ratelimit-remaining":"99","x-hubspot-ratelimit-secondly":"10","x-hubspot-ratelimit-secondly-remaining":"9","x-request-id":"ac94252c-90b5-45d2-ad1d-9a9f7651d7d2","x-trace":"2B1B4386362759B6A4C34802AD168B803DDC1BE770000000000000000000"}}
         */
        detail?: string;
        /**
         * @description The Supaglue error code associated with the error. 
         * @example MISSING_REQUIRED_FIELD
         */
        problem_type?: string;
        /**
         * @description A brief description of the error. The schema and type of message will vary by Provider. 
         * @example Property values were not valid
         */
        title?: string;
      })[];
    warnings: ({
        detail?: string;
        problem_type?: string;
        title?: string;
      })[];
    created_record: {
      id: string;
    };
    /**
     * @example [
     *   {
     *     "address_type": "shipping",
     *     "city": "San Francisco",
     *     "country": "US",
     *     "postal_code": "94107",
     *     "state": "CA",
     *     "street_1": "525 Brannan",
     *     "street_2": null
     *   }
     * ]
     */
    addresses: ({
        /** @enum {string} */
        address_type: "primary" | "mailing" | "other" | "billing" | "shipping";
        /** @example San Francisco */
        city: string | null;
        /** @example USA */
        country: string | null;
        /** @example 94107 */
        postal_code: string | null;
        /** @example CA */
        state: string | null;
        /** @example 525 Brannan */
        street_1: string | null;
        /** @example null */
        street_2: string | null;
      })[];
    /**
     * @example [
     *   {
     *     "email_address": "hello@supaglue.com",
     *     "email_address_type": "work"
     *   }
     * ]
     */
    email_addresses: ({
        /** @example hello@supaglue.com */
        email_address: string;
        /** @enum {string} */
        email_address_type: "primary" | "work" | "other";
      })[];
    /**
     * @example [
     *   {
     *     "phone_number": "+14151234567",
     *     "phone_number_type": "primary"
     *   }
     * ]
     */
    phone_numbers: ({
        /** @example +14151234567 */
        phone_number: string | null;
        /** @enum {string} */
        phone_number_type: "primary" | "mobile" | "fax" | "other";
      })[];
    pagination: {
      /** @example eyJpZCI6IjQyNTc5ZjczLTg1MjQtNDU3MC05YjY3LWVjYmQ3MDJjNmIxNCIsInJldmVyc2UiOmZhbHNlfQ== */
      next: string | null;
      /** @example eyJpZCI6IjBjZDhmYmZkLWU5NmQtNDEwZC05ZjQxLWIwMjU1YjdmNGI4NyIsInJldmVyc2UiOnRydWV9 */
      previous: string | null;
      /** @example 100 */
      total_count: number;
    };
    /** @description Custom properties to be inserted that are not covered by the common object. Object keys must match exactly to the corresponding provider API. */
    custom_fields: {
      [key: string]: unknown;
    };
    equals_filter: {
      /** @enum {string} */
      type: "equals";
      value: string;
    };
    contains_filter: {
      /** @enum {string} */
      type: "contains";
      value: string;
    };
    filter: components["schemas"]["equals_filter"] | components["schemas"]["contains_filter"];
    /** @enum {string|null} */
    lifecycle_stage: "subscriber" | "lead" | "marketingqualifiedlead" | "salesqualifiedlead" | "opportunity" | "customer" | "evangelist" | "other" | null;
  };
  responses: never;
  parameters: {
    /** @description Whether to include data that was deleted in providers. */
    include_deleted_data?: boolean;
    /** @description Whether to include raw data fetched from the 3rd party provider. */
    include_raw_data?: boolean;
    /** @description If provided, will only return objects created after this datetime */
    created_after?: Date;
    /** @description If provided, will only return objects created before this datetime */
    created_before?: Date;
    /** @description If provided, will only return objects modified after this datetime */
    modified_after?: Date;
    /** @description If provided, will only return objects modified before this datetime */
    modified_before?: Date;
    /** @description The pagination cursor value */
    cursor?: string;
    /** @description Number of results to return per page. (Max: 1000) */
    page_size?: string;
    /** @description The customer ID that uniquely identifies the customer in your application */
    "x-customer-id": string;
    /** @description The provider name */
    "x-provider-name": string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * List accounts (Preview) 
   * @description :::note
   * This feature is only available in Preview to select customers on our Enterprise plan. [Contact us](mailto:team@supaglue.com) for more information.
   * :::
   */
  listAccounts: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
        /** @description Whether to read from Supaglue's Managed Destination cache or to read directly from the provider. (Only applicable if Supaglue Managed Destination is set) */
        read_from_cache?: boolean;
        modified_after?: components["parameters"]["modified_after"];
        page_size?: components["parameters"]["page_size"];
        cursor?: components["parameters"]["cursor"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    responses: {
      /** @description Paginated Accounts */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["pagination"];
            records: (components["schemas"]["account"])[];
          };
        };
      };
    };
  };
  /** Create account */
  createAccount: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          record: components["schemas"]["create_update_account"];
        };
      };
    };
    responses: {
      /** @description Account created */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            record?: components["schemas"]["created_record"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /**
   * Upsert account 
   * @description Upsert an account. If the account does not exist, it will be created. If the account does exist, it will be updated.
   * Only supported for Salesforce and Hubspot.
   */
  upsertAccount: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          record: components["schemas"]["create_update_account"];
          upsert_on: {
            /**
             * @description The key to upsert on. Only `website` is supported for Salesforce, while both `domain` and `website` are supported for Hubspot. 
             * @enum {string}
             */
            key: "domain" | "website";
            /** @description The values to upsert on. If more than one value is provided, it will act as a logical OR. If more than one account is found that matches, then an error will be thrown. */
            values: (string)[];
          };
        };
      };
    };
    responses: {
      /** @description Account upserted */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            record?: components["schemas"]["created_record"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Get account */
  getAccount: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        account_id: string;
      };
    };
    responses: {
      /** @description Account */
      200: {
        content: {
          "application/json": components["schemas"]["account"];
        };
      };
    };
  };
  /** Update account */
  updateAccount: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        account_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          record: components["schemas"]["create_update_account"];
        };
      };
    };
    responses: {
      /** @description Account updated */
      200: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /**
   * List contacts (Preview) 
   * @description :::note
   * This feature is only available in Preview to select customers on our Enterprise plan. [Contact us](mailto:team@supaglue.com) for more information.
   * :::
   */
  listContacts: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
        modified_after?: components["parameters"]["modified_after"];
        page_size?: components["parameters"]["page_size"];
        cursor?: components["parameters"]["cursor"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    responses: {
      /** @description Paginated Contacts */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["pagination"];
            records: (components["schemas"]["account"])[];
          };
        };
      };
    };
  };
  /** Create contact */
  createContact: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "record": {
         *     "first_name": "George",
         *     "last_activity_at": "2022-02-10T00:00:00Z",
         *     "last_name": "Xing",
         *     "account_id": "64571bff-48ea-4469-9fa0-ee1a0bab38bd"
         *   }
         * }
         */
        "application/json": {
          record: components["schemas"]["create_update_contact"];
        };
      };
    };
    responses: {
      /** @description Contact created */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            record?: components["schemas"]["created_record"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /**
   * Upsert contact 
   * @description Upsert a contact. If the contact does not exist, it will be created. If the contact does exist, it will be updated.
   * Only supported for Salesforce, Hubspot, and Pipedrive.
   */
  upsertContact: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          record: components["schemas"]["create_update_contact"];
          upsert_on: {
            /**
             * @description The key to upsert on. Only `email` is supported for all providers. 
             * @enum {string}
             */
            key: "email";
            /** @description The values to upsert on. If more than one value is provided, it will act as a logical OR. If more than one account is found that matches, then an error will be thrown. */
            values: (string)[];
          };
        };
      };
    };
    responses: {
      /** @description Contact created */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            record?: components["schemas"]["created_record"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Get contact */
  getContact: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        contact_id: string;
      };
    };
    responses: {
      /** @description Contact */
      200: {
        content: {
          "application/json": components["schemas"]["contact"];
        };
      };
    };
  };
  /** Update contact */
  updateContact: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        contact_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          record: components["schemas"]["create_update_contact"];
        };
      };
    };
    responses: {
      /** @description Contact updated */
      200: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Create lead */
  createLead: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "record": {
         *     "company": "Supaglue",
         *     "first_name": "George",
         *     "last_name": "Xing",
         *     "lead_source": "API Blogger",
         *     "title": "Co-Founder"
         *   }
         * }
         */
        "application/json": {
          record: components["schemas"]["create_update_lead"];
        };
      };
    };
    responses: {
      /** @description Lead created */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            record?: components["schemas"]["created_record"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Get lead */
  getLead: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        lead_id: string;
      };
    };
    responses: {
      /** @description Lead */
      200: {
        content: {
          "application/json": components["schemas"]["lead"];
        };
      };
    };
  };
  /** Update lead */
  updateLead: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        lead_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          record: components["schemas"]["create_update_lead"];
        };
      };
    };
    responses: {
      /** @description Lead updated */
      200: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Create opportunity */
  createOpportunity: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "record": {
         *     "amount": 100000,
         *     "close_date": "2023-02-27T00:00:00Z",
         *     "description": "Wants to use open source unified API for third-party integrations",
         *     "name": "Needs Integrations",
         *     "stage": "Closed Won",
         *     "account_id": "109c88c0-7bf4-4cd8-afbc-b51f9432ca0b"
         *   }
         * }
         */
        "application/json": {
          record: components["schemas"]["create_update_opportunity"];
        };
      };
    };
    responses: {
      /** @description Opportunity created */
      201: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            record?: components["schemas"]["created_record"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Get opportunity */
  getOpportunity: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        opportunity_id: string;
      };
    };
    responses: {
      /** @description Opportunity */
      200: {
        content: {
          "application/json": components["schemas"]["opportunity"];
        };
      };
    };
  };
  /** Update opportunity */
  updateOpportunity: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        opportunity_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          record: components["schemas"]["create_update_opportunity"];
        };
      };
    };
    responses: {
      /** @description Opportunity updated */
      200: {
        content: {
          "application/json": {
            errors?: components["schemas"]["errors"];
            warnings?: components["schemas"]["warnings"];
          };
        };
      };
    };
  };
  /** Get user */
  getUser: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description User */
      200: {
        content: {
          "application/json": components["schemas"]["user"];
        };
      };
    };
  };
  /** List lists */
  listLists: {
    parameters: {
      query?: {
        page_size?: components["parameters"]["page_size"];
        cursor?: components["parameters"]["cursor"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        object_type: "contact" | "account" | "lead" | "opportunity";
      };
    };
    responses: {
      /** @description List Lists */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["pagination"];
            records: (components["schemas"]["list_metadata"])[];
          };
        };
      };
    };
  };
  /** Get list membership */
  getListMembership: {
    parameters: {
      query?: {
        page_size?: components["parameters"]["page_size"];
        cursor?: components["parameters"]["cursor"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
      };
      path: {
        object_type: "contact" | "account" | "lead" | "opportunity";
        list_view_id: string;
      };
    };
    responses: {
      /** @description List membership */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["pagination"];
            members?: (components["schemas"]["list_membership"])[];
            metadata?: components["schemas"]["list_metadata"];
          };
        };
      };
    };
  };
  /**
   * Send passthrough request 
   * @deprecated 
   * @description Send request directly to a provider
   */
  sendPassthroughRequest: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The path to send the request to (do not pass the domain) */
          path: string;
          /**
           * @example GET 
           * @enum {string}
           */
          method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
          /** @description Headers to pass to downstream */
          headers?: {
            [key: string]: string | undefined;
          };
          /** @description Query parameters to pass to downstream */
          query?: {
            [key: string]: string | undefined;
          };
          /** @description Body to pass to downstream (can be string or JSON object) */
          body?: OneOf<[string, {
            [key: string]: unknown;
          }]>;
        };
      };
    };
    responses: {
      /** @description Passthrough response */
      200: {
        content: {
          "application/json": {
            /**
             * @description The full URL the request was went to 
             * @example https://customcrm.com/api/cars
             */
            url: string;
            /**
             * @description Status code from the downstream 
             * @example 200
             */
            status: number;
            /** @description The response headers from the downstream */
            headers: {
              [key: string]: string | undefined;
            };
            /** @description The body from the downstream */
            body?: string | number | boolean | ({
                [key: string]: unknown;
              })[] | {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
}
