/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/forms/{form_id}/_submit": {
    /** Submit form */
    post: operations["submitForm"];
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        form_id: string;
      };
    };
  };
  "/forms": {
    /** List forms */
    get: operations["listForms"];
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
  };
  "/forms/{form_id}/_fields": {
    /** Get form fields */
    get: operations["getFormFields"];
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        form_id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    submit_form_response: {
      /**
       * @description The id of the lead that was created/updated as a result of submitting the form 
       * @example 12345
       */
      id?: string;
      /** @example updated */
      status: string;
    };
    form_metadata: {
      id: string;
      name: string;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      created_at: Date;
      /**
       * Format: date-time 
       * @example 2022-02-27T00:00:00Z
       */
      updated_at: Date;
      raw_data?: {
        [key: string]: unknown;
      };
    };
    form_field: {
      id: string;
      name: string;
      required: boolean;
      form_id: string;
      data_format: string;
      /** @description Selectable options for this field. Only applicable if the data_format is `select`. */
      data_options?: (components["schemas"]["form_data_option"])[];
      validation_message?: string | null;
      raw_data?: {
        [key: string]: unknown;
      };
    };
    form_data_option: {
      label: string;
      value: string;
      raw_data?: {
        [key: string]: unknown;
      };
    };
  };
  responses: never;
  parameters: {
    /** @description The customer ID that uniquely identifies the customer in your application */
    "x-customer-id": string;
    /** @description The provider name */
    "x-provider-name": string;
    /** @description Whether to include raw data fetched from the 3rd party provider. */
    include_raw_data?: boolean;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Submit form */
  submitForm: {
    parameters: {
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        form_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description a mapping of field name to value for each field in the form 
           * @example {
           *   "email": "me@supaglue.com",
           *   "firstName": "George",
           *   "lastName": "Xing"
           * }
           */
          formFields: {
            /**
             * @description the email address of the lead 
             * @example me@supaglue.com
             */
            email: string;
            [key: string]: unknown;
          };
        };
      };
    };
    responses: {
      /** @description Information about the lead created or updated by the form submission */
      200: {
        content: {
          "application/json": components["schemas"]["submit_form_response"];
        };
      };
    };
  };
  /** List forms */
  listForms: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
    };
    responses: {
      /** @description List of forms and their metadata */
      200: {
        content: {
          "application/json": {
            forms: (components["schemas"]["form_metadata"])[];
          };
        };
      };
    };
  };
  /** Get form fields */
  getFormFields: {
    parameters: {
      query?: {
        include_raw_data?: components["parameters"]["include_raw_data"];
      };
      header: {
        "x-customer-id": components["parameters"]["x-customer-id"];
        "x-provider-name": components["parameters"]["x-provider-name"];
      };
      path: {
        form_id: string;
      };
    };
    responses: {
      /** @description List of fields on the form with the given ID */
      200: {
        content: {
          "application/json": {
            fields: (components["schemas"]["form_field"])[];
          };
        };
      };
    };
  };
}
