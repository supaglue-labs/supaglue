/*
 * Supaglue Management API
 * # Introduction  Welcome to the Supaglue Management API documentation. You can use this API to manage customer integrations and connections.  ### Base API URL  ``` http://localhost:8080/mgmt/v1 ``` 
 *
 * OpenAPI spec version: 0.4.1
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CreateUpdateCustomer
 */


public class CreateUpdateCustomer {
  @SerializedName("application_id")
  private Object applicationId = null;

  @SerializedName("external_identifier")
  private Object externalIdentifier = null;

  @SerializedName("name")
  private Object name = null;

  @SerializedName("email")
  private Object email = null;

  public CreateUpdateCustomer applicationId(Object applicationId) {
    this.applicationId = applicationId;
    return this;
  }

   /**
   * Get applicationId
   * @return applicationId
  **/
  @Schema(example = "d8ceb3ff-8b7f-4fa7-b8de-849292f6ca69", required = true, description = "")
  public Object getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(Object applicationId) {
    this.applicationId = applicationId;
  }

  public CreateUpdateCustomer externalIdentifier(Object externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
    return this;
  }

   /**
   * Get externalIdentifier
   * @return externalIdentifier
  **/
  @Schema(example = "your-customers-unique-application-id", required = true, description = "")
  public Object getExternalIdentifier() {
    return externalIdentifier;
  }

  public void setExternalIdentifier(Object externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }

  public CreateUpdateCustomer name(Object name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(example = "MyCompany Inc", required = true, description = "")
  public Object getName() {
    return name;
  }

  public void setName(Object name) {
    this.name = name;
  }

  public CreateUpdateCustomer email(Object email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(example = "contact@mycompany.com", required = true, description = "")
  public Object getEmail() {
    return email;
  }

  public void setEmail(Object email) {
    this.email = email;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdateCustomer createUpdateCustomer = (CreateUpdateCustomer) o;
    return Objects.equals(this.applicationId, createUpdateCustomer.applicationId) &&
        Objects.equals(this.externalIdentifier, createUpdateCustomer.externalIdentifier) &&
        Objects.equals(this.name, createUpdateCustomer.name) &&
        Objects.equals(this.email, createUpdateCustomer.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, externalIdentifier, name, email);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdateCustomer {\n");
    
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
