/*
 * Supaglue Management API
 * # Introduction  Welcome to the Supaglue Management API documentation. You can use this API to manage customer integrations and connections.  ### Base API URL  ``` http://localhost:8080/mgmt/v1 ``` 
 *
 * OpenAPI spec version: 0.3.4
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ApplicationConfigWebhook
 */


public class ApplicationConfigWebhook {
  @SerializedName("url")
  private String url = null;

  /**
   * Gets or Sets requestType
   */
  @JsonAdapter(RequestTypeEnum.Adapter.class)
  public enum RequestTypeEnum {
    GET("GET"),
    POST("POST"),
    PUT("PUT"),
    DELETE("DELETE"),
    PATCH("PATCH");

    private String value;

    RequestTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RequestTypeEnum fromValue(String input) {
      for (RequestTypeEnum b : RequestTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RequestTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("request_type")
  private RequestTypeEnum requestType = null;

  @SerializedName("notify_on_sync_success")
  private Boolean notifyOnSyncSuccess = null;

  @SerializedName("notify_on_sync_error")
  private Boolean notifyOnSyncError = null;

  @SerializedName("notify_on_connection_success")
  private Boolean notifyOnConnectionSuccess = null;

  @SerializedName("notify_on_connection_error")
  private Boolean notifyOnConnectionError = null;

  @SerializedName("headers")
  private Map<String, Object> headers = null;

  public ApplicationConfigWebhook url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(required = true, description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ApplicationConfigWebhook requestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
    return this;
  }

   /**
   * Get requestType
   * @return requestType
  **/
  @Schema(required = true, description = "")
  public RequestTypeEnum getRequestType() {
    return requestType;
  }

  public void setRequestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
  }

  public ApplicationConfigWebhook notifyOnSyncSuccess(Boolean notifyOnSyncSuccess) {
    this.notifyOnSyncSuccess = notifyOnSyncSuccess;
    return this;
  }

   /**
   * Get notifyOnSyncSuccess
   * @return notifyOnSyncSuccess
  **/
  @Schema(required = true, description = "")
  public Boolean isNotifyOnSyncSuccess() {
    return notifyOnSyncSuccess;
  }

  public void setNotifyOnSyncSuccess(Boolean notifyOnSyncSuccess) {
    this.notifyOnSyncSuccess = notifyOnSyncSuccess;
  }

  public ApplicationConfigWebhook notifyOnSyncError(Boolean notifyOnSyncError) {
    this.notifyOnSyncError = notifyOnSyncError;
    return this;
  }

   /**
   * Get notifyOnSyncError
   * @return notifyOnSyncError
  **/
  @Schema(required = true, description = "")
  public Boolean isNotifyOnSyncError() {
    return notifyOnSyncError;
  }

  public void setNotifyOnSyncError(Boolean notifyOnSyncError) {
    this.notifyOnSyncError = notifyOnSyncError;
  }

  public ApplicationConfigWebhook notifyOnConnectionSuccess(Boolean notifyOnConnectionSuccess) {
    this.notifyOnConnectionSuccess = notifyOnConnectionSuccess;
    return this;
  }

   /**
   * Get notifyOnConnectionSuccess
   * @return notifyOnConnectionSuccess
  **/
  @Schema(required = true, description = "")
  public Boolean isNotifyOnConnectionSuccess() {
    return notifyOnConnectionSuccess;
  }

  public void setNotifyOnConnectionSuccess(Boolean notifyOnConnectionSuccess) {
    this.notifyOnConnectionSuccess = notifyOnConnectionSuccess;
  }

  public ApplicationConfigWebhook notifyOnConnectionError(Boolean notifyOnConnectionError) {
    this.notifyOnConnectionError = notifyOnConnectionError;
    return this;
  }

   /**
   * Get notifyOnConnectionError
   * @return notifyOnConnectionError
  **/
  @Schema(required = true, description = "")
  public Boolean isNotifyOnConnectionError() {
    return notifyOnConnectionError;
  }

  public void setNotifyOnConnectionError(Boolean notifyOnConnectionError) {
    this.notifyOnConnectionError = notifyOnConnectionError;
  }

  public ApplicationConfigWebhook headers(Map<String, Object> headers) {
    this.headers = headers;
    return this;
  }

  public ApplicationConfigWebhook putHeadersItem(String key, Object headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<String, Object>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @Schema(description = "")
  public Map<String, Object> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, Object> headers) {
    this.headers = headers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigWebhook applicationConfigWebhook = (ApplicationConfigWebhook) o;
    return Objects.equals(this.url, applicationConfigWebhook.url) &&
        Objects.equals(this.requestType, applicationConfigWebhook.requestType) &&
        Objects.equals(this.notifyOnSyncSuccess, applicationConfigWebhook.notifyOnSyncSuccess) &&
        Objects.equals(this.notifyOnSyncError, applicationConfigWebhook.notifyOnSyncError) &&
        Objects.equals(this.notifyOnConnectionSuccess, applicationConfigWebhook.notifyOnConnectionSuccess) &&
        Objects.equals(this.notifyOnConnectionError, applicationConfigWebhook.notifyOnConnectionError) &&
        Objects.equals(this.headers, applicationConfigWebhook.headers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, requestType, notifyOnSyncSuccess, notifyOnSyncError, notifyOnConnectionSuccess, notifyOnConnectionError, headers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigWebhook {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    notifyOnSyncSuccess: ").append(toIndentedString(notifyOnSyncSuccess)).append("\n");
    sb.append("    notifyOnSyncError: ").append(toIndentedString(notifyOnSyncError)).append("\n");
    sb.append("    notifyOnConnectionSuccess: ").append(toIndentedString(notifyOnConnectionSuccess)).append("\n");
    sb.append("    notifyOnConnectionError: ").append(toIndentedString(notifyOnConnectionError)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
