# coding: utf-8

"""
    Supaglue Management API

    # Introduction  Welcome to the Supaglue Management API documentation. You can use this API to manage customer integrations and connections.  ### Base API URL  ``` http://localhost:8080/mgmt/v1 ```   # noqa: E501

    OpenAPI spec version: 0.6.0
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SyncHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_name': 'object',
        'error_message': 'object',
        'start_timestamp': 'object',
        'end_timestamp': 'object',
        'application_id': 'object',
        'customer_id': 'object',
        'provider_name': 'object',
        'category': 'object',
        'connection_id': 'object',
        'status': 'object'
    }

    attribute_map = {
        'model_name': 'model_name',
        'error_message': 'error_message',
        'start_timestamp': 'start_timestamp',
        'end_timestamp': 'end_timestamp',
        'application_id': 'application_id',
        'customer_id': 'customer_id',
        'provider_name': 'provider_name',
        'category': 'category',
        'connection_id': 'connection_id',
        'status': 'status'
    }

    def __init__(self, model_name=None, error_message=None, start_timestamp=None, end_timestamp=None, application_id=None, customer_id=None, provider_name=None, category=None, connection_id=None, status=None):  # noqa: E501
        """SyncHistory - a model defined in Swagger"""  # noqa: E501
        self._model_name = None
        self._error_message = None
        self._start_timestamp = None
        self._end_timestamp = None
        self._application_id = None
        self._customer_id = None
        self._provider_name = None
        self._category = None
        self._connection_id = None
        self._status = None
        self.discriminator = None
        self.model_name = model_name
        self.error_message = error_message
        self.start_timestamp = start_timestamp
        self.end_timestamp = end_timestamp
        self.application_id = application_id
        self.customer_id = customer_id
        self.provider_name = provider_name
        self.category = category
        self.connection_id = connection_id
        self.status = status

    @property
    def model_name(self):
        """Gets the model_name of this SyncHistory.  # noqa: E501


        :return: The model_name of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this SyncHistory.


        :param model_name: The model_name of this SyncHistory.  # noqa: E501
        :type: object
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def error_message(self):
        """Gets the error_message of this SyncHistory.  # noqa: E501


        :return: The error_message of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this SyncHistory.


        :param error_message: The error_message of this SyncHistory.  # noqa: E501
        :type: object
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")  # noqa: E501

        self._error_message = error_message

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this SyncHistory.  # noqa: E501


        :return: The start_timestamp of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this SyncHistory.


        :param start_timestamp: The start_timestamp of this SyncHistory.  # noqa: E501
        :type: object
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")  # noqa: E501

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this SyncHistory.  # noqa: E501


        :return: The end_timestamp of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this SyncHistory.


        :param end_timestamp: The end_timestamp of this SyncHistory.  # noqa: E501
        :type: object
        """
        if end_timestamp is None:
            raise ValueError("Invalid value for `end_timestamp`, must not be `None`")  # noqa: E501

        self._end_timestamp = end_timestamp

    @property
    def application_id(self):
        """Gets the application_id of this SyncHistory.  # noqa: E501


        :return: The application_id of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this SyncHistory.


        :param application_id: The application_id of this SyncHistory.  # noqa: E501
        :type: object
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def customer_id(self):
        """Gets the customer_id of this SyncHistory.  # noqa: E501


        :return: The customer_id of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SyncHistory.


        :param customer_id: The customer_id of this SyncHistory.  # noqa: E501
        :type: object
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def provider_name(self):
        """Gets the provider_name of this SyncHistory.  # noqa: E501


        :return: The provider_name of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this SyncHistory.


        :param provider_name: The provider_name of this SyncHistory.  # noqa: E501
        :type: object
        """
        if provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")  # noqa: E501

        self._provider_name = provider_name

    @property
    def category(self):
        """Gets the category of this SyncHistory.  # noqa: E501


        :return: The category of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SyncHistory.


        :param category: The category of this SyncHistory.  # noqa: E501
        :type: object
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def connection_id(self):
        """Gets the connection_id of this SyncHistory.  # noqa: E501


        :return: The connection_id of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this SyncHistory.


        :param connection_id: The connection_id of this SyncHistory.  # noqa: E501
        :type: object
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    @property
    def status(self):
        """Gets the status of this SyncHistory.  # noqa: E501


        :return: The status of this SyncHistory.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SyncHistory.


        :param status: The status of this SyncHistory.  # noqa: E501
        :type: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
