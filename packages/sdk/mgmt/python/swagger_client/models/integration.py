# coding: utf-8

"""
    Supaglue Management API

    # Introduction  Welcome to the Supaglue Management API documentation. You can use this API to manage customer integrations and connections.  ### Base API URL  ``` http://localhost:8080/mgmt/v1 ```   # noqa: E501

    OpenAPI spec version: 0.6.0
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Integration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'application_id': 'object',
        'category': 'Category',
        'auth_type': 'object',
        'provider_name': 'ProviderName',
        'config': 'IntegrationConfig'
    }

    attribute_map = {
        'id': 'id',
        'application_id': 'application_id',
        'category': 'category',
        'auth_type': 'auth_type',
        'provider_name': 'provider_name',
        'config': 'config'
    }

    def __init__(self, id=None, application_id=None, category=None, auth_type=None, provider_name=None, config=None):  # noqa: E501
        """Integration - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._application_id = None
        self._category = None
        self._auth_type = None
        self._provider_name = None
        self._config = None
        self.discriminator = None
        self.id = id
        self.application_id = application_id
        self.category = category
        self.auth_type = auth_type
        self.provider_name = provider_name
        if config is not None:
            self.config = config

    @property
    def id(self):
        """Gets the id of this Integration.  # noqa: E501


        :return: The id of this Integration.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Integration.


        :param id: The id of this Integration.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def application_id(self):
        """Gets the application_id of this Integration.  # noqa: E501


        :return: The application_id of this Integration.  # noqa: E501
        :rtype: object
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Integration.


        :param application_id: The application_id of this Integration.  # noqa: E501
        :type: object
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def category(self):
        """Gets the category of this Integration.  # noqa: E501


        :return: The category of this Integration.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Integration.


        :param category: The category of this Integration.  # noqa: E501
        :type: Category
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def auth_type(self):
        """Gets the auth_type of this Integration.  # noqa: E501


        :return: The auth_type of this Integration.  # noqa: E501
        :rtype: object
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Integration.


        :param auth_type: The auth_type of this Integration.  # noqa: E501
        :type: object
        """
        if auth_type is None:
            raise ValueError("Invalid value for `auth_type`, must not be `None`")  # noqa: E501

        self._auth_type = auth_type

    @property
    def provider_name(self):
        """Gets the provider_name of this Integration.  # noqa: E501


        :return: The provider_name of this Integration.  # noqa: E501
        :rtype: ProviderName
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this Integration.


        :param provider_name: The provider_name of this Integration.  # noqa: E501
        :type: ProviderName
        """
        if provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")  # noqa: E501

        self._provider_name = provider_name

    @property
    def config(self):
        """Gets the config of this Integration.  # noqa: E501


        :return: The config of this Integration.  # noqa: E501
        :rtype: IntegrationConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Integration.


        :param config: The config of this Integration.  # noqa: E501
        :type: IntegrationConfig
        """

        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Integration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Integration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
