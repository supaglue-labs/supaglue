# coding: utf-8

"""
    Supaglue Management API

    # Introduction  Welcome to the Supaglue Management API documentation. You can use this API to manage customer integrations and connections.  ### Base API URL  ``` http://localhost:8080/mgmt/v1 ```   # noqa: E501

    OpenAPI spec version: 0.3.4
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectionCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'access_token': 'str',
        'refresh_token': 'str',
        'instance_url': 'str',
        'expires_at': 'str'
    }

    attribute_map = {
        'type': 'type',
        'access_token': 'access_token',
        'refresh_token': 'refresh_token',
        'instance_url': 'instance_url',
        'expires_at': 'expires_at'
    }

    def __init__(self, type=None, access_token=None, refresh_token=None, instance_url=None, expires_at=None):  # noqa: E501
        """ConnectionCredentials - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._access_token = None
        self._refresh_token = None
        self._instance_url = None
        self._expires_at = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if access_token is not None:
            self.access_token = access_token
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if instance_url is not None:
            self.instance_url = instance_url
        if expires_at is not None:
            self.expires_at = expires_at

    @property
    def type(self):
        """Gets the type of this ConnectionCredentials.  # noqa: E501


        :return: The type of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectionCredentials.


        :param type: The type of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def access_token(self):
        """Gets the access_token of this ConnectionCredentials.  # noqa: E501


        :return: The access_token of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ConnectionCredentials.


        :param access_token: The access_token of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this ConnectionCredentials.  # noqa: E501


        :return: The refresh_token of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this ConnectionCredentials.


        :param refresh_token: The refresh_token of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def instance_url(self):
        """Gets the instance_url of this ConnectionCredentials.  # noqa: E501


        :return: The instance_url of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._instance_url

    @instance_url.setter
    def instance_url(self, instance_url):
        """Sets the instance_url of this ConnectionCredentials.


        :param instance_url: The instance_url of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._instance_url = instance_url

    @property
    def expires_at(self):
        """Gets the expires_at of this ConnectionCredentials.  # noqa: E501


        :return: The expires_at of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ConnectionCredentials.


        :param expires_at: The expires_at of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
