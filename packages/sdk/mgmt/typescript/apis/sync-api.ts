/* tslint:disable */
/* eslint-disable */
/**
 * Supaglue Management API
 * # Introduction  Welcome to the Supaglue Management API documentation. You can use this API to manage customer integrations and connections.  ### Base API URL  ``` http://localhost:8080/mgmt/v1 ``` 
 *
 * OpenAPI spec version: 0.6.0
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * SyncApi - axios parameter creator
 * @export
 */
export const SyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of Sync History objects.
         * @summary Get Sync History
         * @param {any} [cursor] The pagination cursor value
         * @param {any} [pageSize] Number of results to return per page
         * @param {any} [customerId] The customer ID that uniquely identifies the customer in your application
         * @param {any} [providerName] The provider name
         * @param {any} [model] The model name to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncHistory: async (cursor?: any, pageSize?: any, customerId?: any, providerName?: any, model?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sync-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }

            if (providerName !== undefined) {
                localVarQueryParameter['provider_name'] = providerName;
            }

            if (model !== undefined) {
                localVarQueryParameter['model'] = model;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Sync Info
         * @summary Get Sync Info
         * @param {any} [customerId] The customer ID that uniquely identifies the customer in your application
         * @param {any} [providerName] The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncInfos: async (customerId?: any, providerName?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sync-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }

            if (providerName !== undefined) {
                localVarQueryParameter['provider_name'] = providerName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncApi - functional programming interface
 * @export
 */
export const SyncApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a list of Sync History objects.
         * @summary Get Sync History
         * @param {any} [cursor] The pagination cursor value
         * @param {any} [pageSize] Number of results to return per page
         * @param {any} [customerId] The customer ID that uniquely identifies the customer in your application
         * @param {any} [providerName] The provider name
         * @param {any} [model] The model name to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncHistory(cursor?: any, pageSize?: any, customerId?: any, providerName?: any, model?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await SyncApiAxiosParamCreator(configuration).getSyncHistory(cursor, pageSize, customerId, providerName, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Sync Info
         * @summary Get Sync Info
         * @param {any} [customerId] The customer ID that uniquely identifies the customer in your application
         * @param {any} [providerName] The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncInfos(customerId?: any, providerName?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await SyncApiAxiosParamCreator(configuration).getSyncInfos(customerId, providerName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SyncApi - factory interface
 * @export
 */
export const SyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a list of Sync History objects.
         * @summary Get Sync History
         * @param {any} [cursor] The pagination cursor value
         * @param {any} [pageSize] Number of results to return per page
         * @param {any} [customerId] The customer ID that uniquely identifies the customer in your application
         * @param {any} [providerName] The provider name
         * @param {any} [model] The model name to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncHistory(cursor?: any, pageSize?: any, customerId?: any, providerName?: any, model?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return SyncApiFp(configuration).getSyncHistory(cursor, pageSize, customerId, providerName, model, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Sync Info
         * @summary Get Sync Info
         * @param {any} [customerId] The customer ID that uniquely identifies the customer in your application
         * @param {any} [providerName] The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncInfos(customerId?: any, providerName?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return SyncApiFp(configuration).getSyncInfos(customerId, providerName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncApi - object-oriented interface
 * @export
 * @class SyncApi
 * @extends {BaseAPI}
 */
export class SyncApi extends BaseAPI {
    /**
     * Get a list of Sync History objects.
     * @summary Get Sync History
     * @param {any} [cursor] The pagination cursor value
     * @param {any} [pageSize] Number of results to return per page
     * @param {any} [customerId] The customer ID that uniquely identifies the customer in your application
     * @param {any} [providerName] The provider name
     * @param {any} [model] The model name to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public async getSyncHistory(cursor?: any, pageSize?: any, customerId?: any, providerName?: any, model?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return SyncApiFp(this.configuration).getSyncHistory(cursor, pageSize, customerId, providerName, model, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Sync Info
     * @summary Get Sync Info
     * @param {any} [customerId] The customer ID that uniquely identifies the customer in your application
     * @param {any} [providerName] The provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public async getSyncInfos(customerId?: any, providerName?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return SyncApiFp(this.configuration).getSyncInfos(customerId, providerName, options).then((request) => request(this.axios, this.basePath));
    }
}
