/*
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.4.1
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Contact;
import io.swagger.client.model.ContactsBody;
import io.swagger.client.model.ContactsContactIdBody;
import io.swagger.client.model.ContactsSearchBody;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2011;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactsApi {
    private ApiClient apiClient;

    public ContactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContact
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContactCall(ContactsBody body, String xCustomerId, String xProviderName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContactValidateBeforeCall(ContactsBody body, String xCustomerId, String xProviderName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createContact(Async)");
        }
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling createContact(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling createContact(Async)");
        }
        
        com.squareup.okhttp.Call call = createContactCall(body, xCustomerId, xProviderName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create contact
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @return InlineResponse2011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2011 createContact(ContactsBody body, String xCustomerId, String xProviderName) throws ApiException {
        ApiResponse<InlineResponse2011> resp = createContactWithHttpInfo(body, xCustomerId, xProviderName);
        return resp.getData();
    }

    /**
     * Create contact
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @return ApiResponse&lt;InlineResponse2011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2011> createContactWithHttpInfo(ContactsBody body, String xCustomerId, String xProviderName) throws ApiException {
        com.squareup.okhttp.Call call = createContactValidateBeforeCall(body, xCustomerId, xProviderName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create contact (asynchronously)
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContactAsync(ContactsBody body, String xCustomerId, String xProviderName, final ApiCallback<InlineResponse2011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContactValidateBeforeCall(body, xCustomerId, xProviderName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContact
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param contactId  (required)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactCall(String xCustomerId, String xProviderName, String contactId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{contact_id}"
            .replaceAll("\\{" + "contact_id" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactValidateBeforeCall(String xCustomerId, String xProviderName, String contactId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling getContact(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling getContact(Async)");
        }
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getContact(Async)");
        }
        
        com.squareup.okhttp.Call call = getContactCall(xCustomerId, xProviderName, contactId, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get contact
     * 
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param contactId  (required)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @return Contact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contact getContact(String xCustomerId, String xProviderName, String contactId, String expand) throws ApiException {
        ApiResponse<Contact> resp = getContactWithHttpInfo(xCustomerId, xProviderName, contactId, expand);
        return resp.getData();
    }

    /**
     * Get contact
     * 
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param contactId  (required)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @return ApiResponse&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contact> getContactWithHttpInfo(String xCustomerId, String xProviderName, String contactId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getContactValidateBeforeCall(xCustomerId, xProviderName, contactId, expand, null, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contact (asynchronously)
     * 
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param contactId  (required)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactAsync(String xCustomerId, String xProviderName, String contactId, String expand, final ApiCallback<Contact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactValidateBeforeCall(xCustomerId, xProviderName, contactId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContacts
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param createdAfter If provided, will only return objects created after this datetime (optional)
     * @param createdBefore If provided, will only return objects created before this datetime (optional)
     * @param updatedAfter If provided, will only return objects modified after this datetime (optional)
     * @param updatedBefore If provided, will only return objects modified before this datetime (optional)
     * @param cursor The pagination cursor value (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactsCall(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_after", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_before", createdBefore));
        if (updatedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updated_after", updatedAfter));
        if (updatedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updated_before", updatedBefore));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactsValidateBeforeCall(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling getContacts(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling getContacts(Async)");
        }
        
        com.squareup.okhttp.Call call = getContactsCall(xCustomerId, xProviderName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List contacts
     * Get a list of contacts
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param createdAfter If provided, will only return objects created after this datetime (optional)
     * @param createdBefore If provided, will only return objects created before this datetime (optional)
     * @param updatedAfter If provided, will only return objects modified after this datetime (optional)
     * @param updatedBefore If provided, will only return objects modified before this datetime (optional)
     * @param cursor The pagination cursor value (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param pageSize Number of results to return per page (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getContacts(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getContactsWithHttpInfo(xCustomerId, xProviderName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize);
        return resp.getData();
    }

    /**
     * List contacts
     * Get a list of contacts
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param createdAfter If provided, will only return objects created after this datetime (optional)
     * @param createdBefore If provided, will only return objects created before this datetime (optional)
     * @param updatedAfter If provided, will only return objects modified after this datetime (optional)
     * @param updatedBefore If provided, will only return objects modified before this datetime (optional)
     * @param cursor The pagination cursor value (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param pageSize Number of results to return per page (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getContactsWithHttpInfo(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getContactsValidateBeforeCall(xCustomerId, xProviderName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List contacts (asynchronously)
     * Get a list of contacts
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param createdAfter If provided, will only return objects created after this datetime (optional)
     * @param createdBefore If provided, will only return objects created before this datetime (optional)
     * @param updatedAfter If provided, will only return objects modified after this datetime (optional)
     * @param updatedBefore If provided, will only return objects modified before this datetime (optional)
     * @param cursor The pagination cursor value (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactsAsync(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactsValidateBeforeCall(xCustomerId, xProviderName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchContacts
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param cursor The pagination cursor value (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchContactsCall(ContactsSearchBody body, String xCustomerId, String xProviderName, String cursor, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contacts/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchContactsValidateBeforeCall(ContactsSearchBody body, String xCustomerId, String xProviderName, String cursor, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchContacts(Async)");
        }
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling searchContacts(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling searchContacts(Async)");
        }
        
        com.squareup.okhttp.Call call = searchContactsCall(body, xCustomerId, xProviderName, cursor, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search contacts
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param cursor The pagination cursor value (optional)
     * @param pageSize Number of results to return per page (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 searchContacts(ContactsSearchBody body, String xCustomerId, String xProviderName, String cursor, String pageSize) throws ApiException {
        ApiResponse<InlineResponse2001> resp = searchContactsWithHttpInfo(body, xCustomerId, xProviderName, cursor, pageSize);
        return resp.getData();
    }

    /**
     * Search contacts
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param cursor The pagination cursor value (optional)
     * @param pageSize Number of results to return per page (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> searchContactsWithHttpInfo(ContactsSearchBody body, String xCustomerId, String xProviderName, String cursor, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = searchContactsValidateBeforeCall(body, xCustomerId, xProviderName, cursor, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search contacts (asynchronously)
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param cursor The pagination cursor value (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchContactsAsync(ContactsSearchBody body, String xCustomerId, String xProviderName, String cursor, String pageSize, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchContactsValidateBeforeCall(body, xCustomerId, xProviderName, cursor, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContact
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param contactId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContactCall(ContactsContactIdBody body, String xCustomerId, String xProviderName, String contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contacts/{contact_id}"
            .replaceAll("\\{" + "contact_id" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContactValidateBeforeCall(ContactsContactIdBody body, String xCustomerId, String xProviderName, String contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateContact(Async)");
        }
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling updateContact(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling updateContact(Async)");
        }
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling updateContact(Async)");
        }
        
        com.squareup.okhttp.Call call = updateContactCall(body, xCustomerId, xProviderName, contactId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update contact
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param contactId  (required)
     * @return InlineResponse2011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2011 updateContact(ContactsContactIdBody body, String xCustomerId, String xProviderName, String contactId) throws ApiException {
        ApiResponse<InlineResponse2011> resp = updateContactWithHttpInfo(body, xCustomerId, xProviderName, contactId);
        return resp.getData();
    }

    /**
     * Update contact
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param contactId  (required)
     * @return ApiResponse&lt;InlineResponse2011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2011> updateContactWithHttpInfo(ContactsContactIdBody body, String xCustomerId, String xProviderName, String contactId) throws ApiException {
        com.squareup.okhttp.Call call = updateContactValidateBeforeCall(body, xCustomerId, xProviderName, contactId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update contact (asynchronously)
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param contactId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContactAsync(ContactsContactIdBody body, String xCustomerId, String xProviderName, String contactId, final ApiCallback<InlineResponse2011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContactValidateBeforeCall(body, xCustomerId, xProviderName, contactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
