/*
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.4.1
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * EmailAddressesInner
 */


public class EmailAddressesInner {
  @SerializedName("email_address")
  private String emailAddress = null;

  /**
   * Gets or Sets emailAddressType
   */
  @JsonAdapter(EmailAddressTypeEnum.Adapter.class)
  public enum EmailAddressTypeEnum {
    PRIMARY("primary"),
    WORK("work");

    private String value;

    EmailAddressTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EmailAddressTypeEnum fromValue(String input) {
      for (EmailAddressTypeEnum b : EmailAddressTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EmailAddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmailAddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public EmailAddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EmailAddressTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("email_address_type")
  private EmailAddressTypeEnum emailAddressType = null;

  public EmailAddressesInner emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Get emailAddress
   * @return emailAddress
  **/
  @Schema(example = "hello@supaglue.com", required = true, description = "")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

  public EmailAddressesInner emailAddressType(EmailAddressTypeEnum emailAddressType) {
    this.emailAddressType = emailAddressType;
    return this;
  }

   /**
   * Get emailAddressType
   * @return emailAddressType
  **/
  @Schema(required = true, description = "")
  public EmailAddressTypeEnum getEmailAddressType() {
    return emailAddressType;
  }

  public void setEmailAddressType(EmailAddressTypeEnum emailAddressType) {
    this.emailAddressType = emailAddressType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailAddressesInner emailAddressesInner = (EmailAddressesInner) o;
    return Objects.equals(this.emailAddress, emailAddressesInner.emailAddress) &&
        Objects.equals(this.emailAddressType, emailAddressesInner.emailAddressType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailAddress, emailAddressType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailAddressesInner {\n");
    
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    emailAddressType: ").append(toIndentedString(emailAddressType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
