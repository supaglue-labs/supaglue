/*
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.4.1
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse2006;
import io.swagger.client.model.InlineResponse2007;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SyncApi {
    private ApiClient apiClient;

    public SyncApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SyncApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getSyncHistory
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param cursor The pagination cursor value (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param model The model name to filter by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncHistoryCall(String xCustomerId, String xProviderName, String cursor, String pageSize, String model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sync-history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("model", model));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncHistoryValidateBeforeCall(String xCustomerId, String xProviderName, String cursor, String pageSize, String model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling getSyncHistory(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling getSyncHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getSyncHistoryCall(xCustomerId, xProviderName, cursor, pageSize, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Sync History
     * Get a list of Sync History objects.
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param cursor The pagination cursor value (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param model The model name to filter by (optional)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2006 getSyncHistory(String xCustomerId, String xProviderName, String cursor, String pageSize, String model) throws ApiException {
        ApiResponse<InlineResponse2006> resp = getSyncHistoryWithHttpInfo(xCustomerId, xProviderName, cursor, pageSize, model);
        return resp.getData();
    }

    /**
     * Get Sync History
     * Get a list of Sync History objects.
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param cursor The pagination cursor value (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param model The model name to filter by (optional)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2006> getSyncHistoryWithHttpInfo(String xCustomerId, String xProviderName, String cursor, String pageSize, String model) throws ApiException {
        com.squareup.okhttp.Call call = getSyncHistoryValidateBeforeCall(xCustomerId, xProviderName, cursor, pageSize, model, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sync History (asynchronously)
     * Get a list of Sync History objects.
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param cursor The pagination cursor value (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param model The model name to filter by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncHistoryAsync(String xCustomerId, String xProviderName, String cursor, String pageSize, String model, final ApiCallback<InlineResponse2006> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncHistoryValidateBeforeCall(xCustomerId, xProviderName, cursor, pageSize, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSyncInfos
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncInfosCall(String xCustomerId, String xProviderName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sync-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncInfosValidateBeforeCall(String xCustomerId, String xProviderName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling getSyncInfos(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling getSyncInfos(Async)");
        }
        
        com.squareup.okhttp.Call call = getSyncInfosCall(xCustomerId, xProviderName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Sync Info
     * Get a list of Sync Info
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @return List&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2007> getSyncInfos(String xCustomerId, String xProviderName) throws ApiException {
        ApiResponse<List<InlineResponse2007>> resp = getSyncInfosWithHttpInfo(xCustomerId, xProviderName);
        return resp.getData();
    }

    /**
     * Get Sync Info
     * Get a list of Sync Info
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2007&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2007>> getSyncInfosWithHttpInfo(String xCustomerId, String xProviderName) throws ApiException {
        com.squareup.okhttp.Call call = getSyncInfosValidateBeforeCall(xCustomerId, xProviderName, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2007>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sync Info (asynchronously)
     * Get a list of Sync Info
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncInfosAsync(String xCustomerId, String xProviderName, final ApiCallback<List<InlineResponse2007>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncInfosValidateBeforeCall(xCustomerId, xProviderName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2007>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
