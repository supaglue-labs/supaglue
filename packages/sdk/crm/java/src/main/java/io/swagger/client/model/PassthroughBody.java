/*
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.4.1
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * PassthroughBody
 */


public class PassthroughBody {
  @SerializedName("path")
  private String path = null;

  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    GET("GET"),
    POST("POST"),
    PUT("PUT"),
    PATCH("PATCH"),
    DELETE("DELETE");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MethodEnum fromValue(String input) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MethodEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("method")
  private MethodEnum method = null;

  @SerializedName("headers")
  private Map<String, String> headers = null;

  @SerializedName("query")
  private Map<String, String> query = null;

  @SerializedName("body")
  private String body = null;

  public PassthroughBody path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The path to send the request to (do not pass the domain)
   * @return path
  **/
  @Schema(required = true, description = "The path to send the request to (do not pass the domain)")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public PassthroughBody method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @Schema(example = "GET", required = true, description = "")
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }

  public PassthroughBody headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public PassthroughBody putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<String, String>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Headers to pass to downstream
   * @return headers
  **/
  @Schema(description = "Headers to pass to downstream")
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }

  public PassthroughBody query(Map<String, String> query) {
    this.query = query;
    return this;
  }

  public PassthroughBody putQueryItem(String key, String queryItem) {
    if (this.query == null) {
      this.query = new HashMap<String, String>();
    }
    this.query.put(key, queryItem);
    return this;
  }

   /**
   * Query parameters to pass to downstream
   * @return query
  **/
  @Schema(description = "Query parameters to pass to downstream")
  public Map<String, String> getQuery() {
    return query;
  }

  public void setQuery(Map<String, String> query) {
    this.query = query;
  }

  public PassthroughBody body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Body to pass to downstream
   * @return body
  **/
  @Schema(description = "Body to pass to downstream")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PassthroughBody passthroughBody = (PassthroughBody) o;
    return Objects.equals(this.path, passthroughBody.path) &&
        Objects.equals(this.method, passthroughBody.method) &&
        Objects.equals(this.headers, passthroughBody.headers) &&
        Objects.equals(this.query, passthroughBody.query) &&
        Objects.equals(this.body, passthroughBody.body);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, method, headers, query, body);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PassthroughBody {\n");
    
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
