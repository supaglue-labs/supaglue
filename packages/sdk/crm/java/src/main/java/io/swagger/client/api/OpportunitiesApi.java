/*
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.4.1
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2013;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.OpportunitiesBody;
import io.swagger.client.model.OpportunitiesOpportunityIdBody;
import io.swagger.client.model.Opportunity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OpportunitiesApi {
    private ApiClient apiClient;

    public OpportunitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OpportunitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOpportunity
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOpportunityCall(OpportunitiesBody body, String xCustomerId, String xProviderName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/opportunities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOpportunityValidateBeforeCall(OpportunitiesBody body, String xCustomerId, String xProviderName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOpportunity(Async)");
        }
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling createOpportunity(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling createOpportunity(Async)");
        }
        
        com.squareup.okhttp.Call call = createOpportunityCall(body, xCustomerId, xProviderName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create opportunity
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 createOpportunity(OpportunitiesBody body, String xCustomerId, String xProviderName) throws ApiException {
        ApiResponse<InlineResponse2013> resp = createOpportunityWithHttpInfo(body, xCustomerId, xProviderName);
        return resp.getData();
    }

    /**
     * Create opportunity
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> createOpportunityWithHttpInfo(OpportunitiesBody body, String xCustomerId, String xProviderName) throws ApiException {
        com.squareup.okhttp.Call call = createOpportunityValidateBeforeCall(body, xCustomerId, xProviderName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create opportunity (asynchronously)
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOpportunityAsync(OpportunitiesBody body, String xCustomerId, String xProviderName, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOpportunityValidateBeforeCall(body, xCustomerId, xProviderName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOpportunities
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param createdAfter If provided, will only return objects created after this datetime (optional)
     * @param createdBefore If provided, will only return objects created before this datetime (optional)
     * @param updatedAfter If provided, will only return objects modified after this datetime (optional)
     * @param updatedBefore If provided, will only return objects modified before this datetime (optional)
     * @param cursor The pagination cursor value (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOpportunitiesCall(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/opportunities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_after", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_before", createdBefore));
        if (updatedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updated_after", updatedAfter));
        if (updatedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updated_before", updatedBefore));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOpportunitiesValidateBeforeCall(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling getOpportunities(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling getOpportunities(Async)");
        }
        
        com.squareup.okhttp.Call call = getOpportunitiesCall(xCustomerId, xProviderName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List opportunities
     * Get a list of opportunities
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param createdAfter If provided, will only return objects created after this datetime (optional)
     * @param createdBefore If provided, will only return objects created before this datetime (optional)
     * @param updatedAfter If provided, will only return objects modified after this datetime (optional)
     * @param updatedBefore If provided, will only return objects modified before this datetime (optional)
     * @param cursor The pagination cursor value (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param pageSize Number of results to return per page (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getOpportunities(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getOpportunitiesWithHttpInfo(xCustomerId, xProviderName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize);
        return resp.getData();
    }

    /**
     * List opportunities
     * Get a list of opportunities
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param createdAfter If provided, will only return objects created after this datetime (optional)
     * @param createdBefore If provided, will only return objects created before this datetime (optional)
     * @param updatedAfter If provided, will only return objects modified after this datetime (optional)
     * @param updatedBefore If provided, will only return objects modified before this datetime (optional)
     * @param cursor The pagination cursor value (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param pageSize Number of results to return per page (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getOpportunitiesWithHttpInfo(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getOpportunitiesValidateBeforeCall(xCustomerId, xProviderName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List opportunities (asynchronously)
     * Get a list of opportunities
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param createdAfter If provided, will only return objects created after this datetime (optional)
     * @param createdBefore If provided, will only return objects created before this datetime (optional)
     * @param updatedAfter If provided, will only return objects modified after this datetime (optional)
     * @param updatedBefore If provided, will only return objects modified before this datetime (optional)
     * @param cursor The pagination cursor value (optional)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param pageSize Number of results to return per page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOpportunitiesAsync(String xCustomerId, String xProviderName, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime updatedAfter, OffsetDateTime updatedBefore, String cursor, String expand, String pageSize, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOpportunitiesValidateBeforeCall(xCustomerId, xProviderName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOpportunity
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param opportunityId  (required)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOpportunityCall(String xCustomerId, String xProviderName, String opportunityId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/opportunities/{opportunity_id}"
            .replaceAll("\\{" + "opportunity_id" + "\\}", apiClient.escapeString(opportunityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOpportunityValidateBeforeCall(String xCustomerId, String xProviderName, String opportunityId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling getOpportunity(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling getOpportunity(Async)");
        }
        // verify the required parameter 'opportunityId' is set
        if (opportunityId == null) {
            throw new ApiException("Missing the required parameter 'opportunityId' when calling getOpportunity(Async)");
        }
        
        com.squareup.okhttp.Call call = getOpportunityCall(xCustomerId, xProviderName, opportunityId, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get opportunity
     * 
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param opportunityId  (required)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @return Opportunity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Opportunity getOpportunity(String xCustomerId, String xProviderName, String opportunityId, String expand) throws ApiException {
        ApiResponse<Opportunity> resp = getOpportunityWithHttpInfo(xCustomerId, xProviderName, opportunityId, expand);
        return resp.getData();
    }

    /**
     * Get opportunity
     * 
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param opportunityId  (required)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @return ApiResponse&lt;Opportunity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Opportunity> getOpportunityWithHttpInfo(String xCustomerId, String xProviderName, String opportunityId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getOpportunityValidateBeforeCall(xCustomerId, xProviderName, opportunityId, expand, null, null);
        Type localVarReturnType = new TypeToken<Opportunity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get opportunity (asynchronously)
     * 
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param opportunityId  (required)
     * @param expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOpportunityAsync(String xCustomerId, String xProviderName, String opportunityId, String expand, final ApiCallback<Opportunity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOpportunityValidateBeforeCall(xCustomerId, xProviderName, opportunityId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Opportunity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOpportunity
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param opportunityId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOpportunityCall(OpportunitiesOpportunityIdBody body, String xCustomerId, String xProviderName, String opportunityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/opportunities/{opportunity_id}"
            .replaceAll("\\{" + "opportunity_id" + "\\}", apiClient.escapeString(opportunityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCustomerId != null)
        localVarHeaderParams.put("x-customer-id", apiClient.parameterToString(xCustomerId));
        if (xProviderName != null)
        localVarHeaderParams.put("x-provider-name", apiClient.parameterToString(xProviderName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOpportunityValidateBeforeCall(OpportunitiesOpportunityIdBody body, String xCustomerId, String xProviderName, String opportunityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOpportunity(Async)");
        }
        // verify the required parameter 'xCustomerId' is set
        if (xCustomerId == null) {
            throw new ApiException("Missing the required parameter 'xCustomerId' when calling updateOpportunity(Async)");
        }
        // verify the required parameter 'xProviderName' is set
        if (xProviderName == null) {
            throw new ApiException("Missing the required parameter 'xProviderName' when calling updateOpportunity(Async)");
        }
        // verify the required parameter 'opportunityId' is set
        if (opportunityId == null) {
            throw new ApiException("Missing the required parameter 'opportunityId' when calling updateOpportunity(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOpportunityCall(body, xCustomerId, xProviderName, opportunityId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update opportunity
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param opportunityId  (required)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 updateOpportunity(OpportunitiesOpportunityIdBody body, String xCustomerId, String xProviderName, String opportunityId) throws ApiException {
        ApiResponse<InlineResponse2013> resp = updateOpportunityWithHttpInfo(body, xCustomerId, xProviderName, opportunityId);
        return resp.getData();
    }

    /**
     * Update opportunity
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param opportunityId  (required)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> updateOpportunityWithHttpInfo(OpportunitiesOpportunityIdBody body, String xCustomerId, String xProviderName, String opportunityId) throws ApiException {
        com.squareup.okhttp.Call call = updateOpportunityValidateBeforeCall(body, xCustomerId, xProviderName, opportunityId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update opportunity (asynchronously)
     * 
     * @param body  (required)
     * @param xCustomerId The customer ID (required)
     * @param xProviderName The provider name (required)
     * @param opportunityId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOpportunityAsync(OpportunitiesOpportunityIdBody body, String xCustomerId, String xProviderName, String opportunityId, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOpportunityValidateBeforeCall(body, xCustomerId, xProviderName, opportunityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
