/* tslint:disable */
/* eslint-disable */
/**
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/api/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.3.4
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Contact } from '../models';
import { ContactsBody } from '../models';
import { ContactsContactIdBody } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2011 } from '../models';
/**
 * ContactsApi - axios parameter creator
 * @export
 */
export const ContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create contact
         * @param {ContactsBody} body 
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact: async (body: ContactsBody, customerId: string, providerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createContact.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling createContact.');
            }
            // verify required parameter 'providerName' is not null or undefined
            if (providerName === null || providerName === undefined) {
                throw new RequiredError('providerName','Required parameter providerName was null or undefined when calling createContact.');
            }
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customerId !== undefined && customerId !== null) {
                localVarHeaderParameter['customer-id'] = String(customerId);
            }

            if (providerName !== undefined && providerName !== null) {
                localVarHeaderParameter['provider-name'] = String(providerName);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get contact
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {string} contactId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContact: async (customerId: string, providerName: string, contactId: string, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling getContact.');
            }
            // verify required parameter 'providerName' is not null or undefined
            if (providerName === null || providerName === undefined) {
                throw new RequiredError('providerName','Required parameter providerName was null or undefined when calling getContact.');
            }
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling getContact.');
            }
            const localVarPath = `/contacts/{contact_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (customerId !== undefined && customerId !== null) {
                localVarHeaderParameter['customer-id'] = String(customerId);
            }

            if (providerName !== undefined && providerName !== null) {
                localVarHeaderParameter['provider-name'] = String(providerName);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of contacts
         * @summary List contacts
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [updatedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [updatedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContacts: async (customerId: string, providerName: string, createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling getContacts.');
            }
            // verify required parameter 'providerName' is not null or undefined
            if (providerName === null || providerName === undefined) {
                throw new RequiredError('providerName','Required parameter providerName was null or undefined when calling getContacts.');
            }
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createdAfter !== undefined) {
                localVarQueryParameter['created_after'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['created_before'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updated_after'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updated_before'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString() :
                    updatedBefore;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (customerId !== undefined && customerId !== null) {
                localVarHeaderParameter['customer-id'] = String(customerId);
            }

            if (providerName !== undefined && providerName !== null) {
                localVarHeaderParameter['provider-name'] = String(providerName);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update contact
         * @param {ContactsContactIdBody} body 
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact: async (body: ContactsContactIdBody, customerId: string, providerName: string, contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateContact.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling updateContact.');
            }
            // verify required parameter 'providerName' is not null or undefined
            if (providerName === null || providerName === undefined) {
                throw new RequiredError('providerName','Required parameter providerName was null or undefined when calling updateContact.');
            }
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling updateContact.');
            }
            const localVarPath = `/contacts/{contact_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customerId !== undefined && customerId !== null) {
                localVarHeaderParameter['customer-id'] = String(customerId);
            }

            if (providerName !== undefined && providerName !== null) {
                localVarHeaderParameter['provider-name'] = String(providerName);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactsApi - functional programming interface
 * @export
 */
export const ContactsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create contact
         * @param {ContactsBody} body 
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContact(body: ContactsBody, customerId: string, providerName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {
            const localVarAxiosArgs = await ContactsApiAxiosParamCreator(configuration).createContact(body, customerId, providerName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get contact
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {string} contactId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContact(customerId: string, providerName: string, contactId: string, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Contact>>> {
            const localVarAxiosArgs = await ContactsApiAxiosParamCreator(configuration).getContact(customerId, providerName, contactId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of contacts
         * @summary List contacts
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [updatedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [updatedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContacts(customerId: string, providerName: string, createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await ContactsApiAxiosParamCreator(configuration).getContacts(customerId, providerName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update contact
         * @param {ContactsContactIdBody} body 
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(body: ContactsContactIdBody, customerId: string, providerName: string, contactId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {
            const localVarAxiosArgs = await ContactsApiAxiosParamCreator(configuration).updateContact(body, customerId, providerName, contactId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ContactsApi - factory interface
 * @export
 */
export const ContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create contact
         * @param {ContactsBody} body 
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContact(body: ContactsBody, customerId: string, providerName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {
            return ContactsApiFp(configuration).createContact(body, customerId, providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get contact
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {string} contactId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContact(customerId: string, providerName: string, contactId: string, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Contact>> {
            return ContactsApiFp(configuration).getContact(customerId, providerName, contactId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of contacts
         * @summary List contacts
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [updatedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [updatedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContacts(customerId: string, providerName: string, createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return ContactsApiFp(configuration).getContacts(customerId, providerName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update contact
         * @param {ContactsContactIdBody} body 
         * @param {string} customerId The customer ID
         * @param {string} providerName The provider name
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(body: ContactsContactIdBody, customerId: string, providerName: string, contactId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {
            return ContactsApiFp(configuration).updateContact(body, customerId, providerName, contactId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactsApi - object-oriented interface
 * @export
 * @class ContactsApi
 * @extends {BaseAPI}
 */
export class ContactsApi extends BaseAPI {
    /**
     * 
     * @summary Create contact
     * @param {ContactsBody} body 
     * @param {string} customerId The customer ID
     * @param {string} providerName The provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public async createContact(body: ContactsBody, customerId: string, providerName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {
        return ContactsApiFp(this.configuration).createContact(body, customerId, providerName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get contact
     * @param {string} customerId The customer ID
     * @param {string} providerName The provider name
     * @param {string} contactId 
     * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public async getContact(customerId: string, providerName: string, contactId: string, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Contact>> {
        return ContactsApiFp(this.configuration).getContact(customerId, providerName, contactId, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of contacts
     * @summary List contacts
     * @param {string} customerId The customer ID
     * @param {string} providerName The provider name
     * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
     * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
     * @param {Date} [updatedAfter] If provided, will only return objects modified after this datetime
     * @param {Date} [updatedBefore] If provided, will only return objects modified before this datetime
     * @param {string} [cursor] The pagination cursor value
     * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
     * @param {string} [pageSize] Number of results to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public async getContacts(customerId: string, providerName: string, createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return ContactsApiFp(this.configuration).getContacts(customerId, providerName, createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update contact
     * @param {ContactsContactIdBody} body 
     * @param {string} customerId The customer ID
     * @param {string} providerName The provider name
     * @param {string} contactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public async updateContact(body: ContactsContactIdBody, customerId: string, providerName: string, contactId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {
        return ContactsApiFp(this.configuration).updateContact(body, customerId, providerName, contactId, options).then((request) => request(this.axios, this.basePath));
    }
}
