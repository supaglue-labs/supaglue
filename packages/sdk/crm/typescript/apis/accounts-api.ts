/* tslint:disable */
/* eslint-disable */
/**
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.6.0
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Account } from '../models';
import { AccountsAccountIdBody } from '../models';
import { AccountsBody } from '../models';
import { AccountsSearchBody } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse201 } from '../models';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create account
         * @param {AccountsBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (body: AccountsBody, xCustomerId: string, xProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAccount.');
            }
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling createAccount.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling createAccount.');
            }
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get account
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} accountId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (xCustomerId: string, xProviderName: string, accountId: string, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling getAccount.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling getAccount.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccount.');
            }
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of accounts
         * @summary List accounts
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [modifiedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [modifiedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts: async (xCustomerId: string, xProviderName: string, createdAfter?: Date, createdBefore?: Date, modifiedAfter?: Date, modifiedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling getAccounts.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling getAccounts.');
            }
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['created_after'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['created_before'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (modifiedAfter !== undefined) {
                localVarQueryParameter['modified_after'] = (modifiedAfter as any instanceof Date) ?
                    (modifiedAfter as any).toISOString() :
                    modifiedAfter;
            }

            if (modifiedBefore !== undefined) {
                localVarQueryParameter['modified_before'] = (modifiedBefore as any instanceof Date) ?
                    (modifiedBefore as any).toISOString() :
                    modifiedBefore;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search accounts
         * @param {AccountsSearchBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAccounts: async (body: AccountsSearchBody, xCustomerId: string, xProviderName: string, cursor?: string, pageSize?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling searchAccounts.');
            }
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling searchAccounts.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling searchAccounts.');
            }
            const localVarPath = `/accounts/_search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update account
         * @param {AccountsAccountIdBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (body: AccountsAccountIdBody, xCustomerId: string, xProviderName: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling updateAccount.');
            }
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create account
         * @param {AccountsBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(body: AccountsBody, xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).createAccount(body, xCustomerId, xProviderName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get account
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} accountId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(xCustomerId: string, xProviderName: string, accountId: string, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Account>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).getAccount(xCustomerId, xProviderName, accountId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of accounts
         * @summary List accounts
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [modifiedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [modifiedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccounts(xCustomerId: string, xProviderName: string, createdAfter?: Date, createdBefore?: Date, modifiedAfter?: Date, modifiedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).getAccounts(xCustomerId, xProviderName, createdAfter, createdBefore, modifiedAfter, modifiedBefore, cursor, expand, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Search accounts
         * @param {AccountsSearchBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAccounts(body: AccountsSearchBody, xCustomerId: string, xProviderName: string, cursor?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).searchAccounts(body, xCustomerId, xProviderName, cursor, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update account
         * @param {AccountsAccountIdBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(body: AccountsAccountIdBody, xCustomerId: string, xProviderName: string, accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).updateAccount(body, xCustomerId, xProviderName, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create account
         * @param {AccountsBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(body: AccountsBody, xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return AccountsApiFp(configuration).createAccount(body, xCustomerId, xProviderName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get account
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} accountId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(xCustomerId: string, xProviderName: string, accountId: string, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Account>> {
            return AccountsApiFp(configuration).getAccount(xCustomerId, xProviderName, accountId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of accounts
         * @summary List accounts
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [modifiedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [modifiedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccounts(xCustomerId: string, xProviderName: string, createdAfter?: Date, createdBefore?: Date, modifiedAfter?: Date, modifiedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return AccountsApiFp(configuration).getAccounts(xCustomerId, xProviderName, createdAfter, createdBefore, modifiedAfter, modifiedBefore, cursor, expand, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search accounts
         * @param {AccountsSearchBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAccounts(body: AccountsSearchBody, xCustomerId: string, xProviderName: string, cursor?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return AccountsApiFp(configuration).searchAccounts(body, xCustomerId, xProviderName, cursor, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update account
         * @param {AccountsAccountIdBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(body: AccountsAccountIdBody, xCustomerId: string, xProviderName: string, accountId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return AccountsApiFp(configuration).updateAccount(body, xCustomerId, xProviderName, accountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @summary Create account
     * @param {AccountsBody} body 
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async createAccount(body: AccountsBody, xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return AccountsApiFp(this.configuration).createAccount(body, xCustomerId, xProviderName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get account
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {string} accountId 
     * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async getAccount(xCustomerId: string, xProviderName: string, accountId: string, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Account>> {
        return AccountsApiFp(this.configuration).getAccount(xCustomerId, xProviderName, accountId, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of accounts
     * @summary List accounts
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
     * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
     * @param {Date} [modifiedAfter] If provided, will only return objects modified after this datetime
     * @param {Date} [modifiedBefore] If provided, will only return objects modified before this datetime
     * @param {string} [cursor] The pagination cursor value
     * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
     * @param {string} [pageSize] Number of results to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async getAccounts(xCustomerId: string, xProviderName: string, createdAfter?: Date, createdBefore?: Date, modifiedAfter?: Date, modifiedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return AccountsApiFp(this.configuration).getAccounts(xCustomerId, xProviderName, createdAfter, createdBefore, modifiedAfter, modifiedBefore, cursor, expand, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Search accounts
     * @param {AccountsSearchBody} body 
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {string} [cursor] The pagination cursor value
     * @param {string} [pageSize] Number of results to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async searchAccounts(body: AccountsSearchBody, xCustomerId: string, xProviderName: string, cursor?: string, pageSize?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return AccountsApiFp(this.configuration).searchAccounts(body, xCustomerId, xProviderName, cursor, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update account
     * @param {AccountsAccountIdBody} body 
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async updateAccount(body: AccountsAccountIdBody, xCustomerId: string, xProviderName: string, accountId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return AccountsApiFp(this.configuration).updateAccount(body, xCustomerId, xProviderName, accountId, options).then((request) => request(this.axios, this.basePath));
    }
}
