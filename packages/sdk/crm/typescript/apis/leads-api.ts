/* tslint:disable */
/* eslint-disable */
/**
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.6.0
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2002 } from '../models';
import { InlineResponse2012 } from '../models';
import { Lead } from '../models';
import { LeadsBody } from '../models';
import { LeadsLeadIdBody } from '../models';
/**
 * LeadsApi - axios parameter creator
 * @export
 */
export const LeadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create lead
         * @param {LeadsBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLead: async (body: LeadsBody, xCustomerId: string, xProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createLead.');
            }
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling createLead.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling createLead.');
            }
            const localVarPath = `/leads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get lead
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} leadId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLead: async (xCustomerId: string, xProviderName: string, leadId: string, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling getLead.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling getLead.');
            }
            // verify required parameter 'leadId' is not null or undefined
            if (leadId === null || leadId === undefined) {
                throw new RequiredError('leadId','Required parameter leadId was null or undefined when calling getLead.');
            }
            const localVarPath = `/leads/{lead_id}`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of leads
         * @summary List leads
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [modifiedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [modifiedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeads: async (xCustomerId: string, xProviderName: string, createdAfter?: Date, createdBefore?: Date, modifiedAfter?: Date, modifiedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling getLeads.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling getLeads.');
            }
            const localVarPath = `/leads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['created_after'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['created_before'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (modifiedAfter !== undefined) {
                localVarQueryParameter['modified_after'] = (modifiedAfter as any instanceof Date) ?
                    (modifiedAfter as any).toISOString() :
                    modifiedAfter;
            }

            if (modifiedBefore !== undefined) {
                localVarQueryParameter['modified_before'] = (modifiedBefore as any instanceof Date) ?
                    (modifiedBefore as any).toISOString() :
                    modifiedBefore;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update lead
         * @param {LeadsLeadIdBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLead: async (body: LeadsLeadIdBody, xCustomerId: string, xProviderName: string, leadId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateLead.');
            }
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling updateLead.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling updateLead.');
            }
            // verify required parameter 'leadId' is not null or undefined
            if (leadId === null || leadId === undefined) {
                throw new RequiredError('leadId','Required parameter leadId was null or undefined when calling updateLead.');
            }
            const localVarPath = `/leads/{lead_id}`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeadsApi - functional programming interface
 * @export
 */
export const LeadsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create lead
         * @param {LeadsBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLead(body: LeadsBody, xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2012>>> {
            const localVarAxiosArgs = await LeadsApiAxiosParamCreator(configuration).createLead(body, xCustomerId, xProviderName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get lead
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} leadId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLead(xCustomerId: string, xProviderName: string, leadId: string, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Lead>>> {
            const localVarAxiosArgs = await LeadsApiAxiosParamCreator(configuration).getLead(xCustomerId, xProviderName, leadId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of leads
         * @summary List leads
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [modifiedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [modifiedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeads(xCustomerId: string, xProviderName: string, createdAfter?: Date, createdBefore?: Date, modifiedAfter?: Date, modifiedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await LeadsApiAxiosParamCreator(configuration).getLeads(xCustomerId, xProviderName, createdAfter, createdBefore, modifiedAfter, modifiedBefore, cursor, expand, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update lead
         * @param {LeadsLeadIdBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLead(body: LeadsLeadIdBody, xCustomerId: string, xProviderName: string, leadId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2012>>> {
            const localVarAxiosArgs = await LeadsApiAxiosParamCreator(configuration).updateLead(body, xCustomerId, xProviderName, leadId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LeadsApi - factory interface
 * @export
 */
export const LeadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create lead
         * @param {LeadsBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLead(body: LeadsBody, xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2012>> {
            return LeadsApiFp(configuration).createLead(body, xCustomerId, xProviderName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get lead
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} leadId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLead(xCustomerId: string, xProviderName: string, leadId: string, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Lead>> {
            return LeadsApiFp(configuration).getLead(xCustomerId, xProviderName, leadId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of leads
         * @summary List leads
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [modifiedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [modifiedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeads(xCustomerId: string, xProviderName: string, createdAfter?: Date, createdBefore?: Date, modifiedAfter?: Date, modifiedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return LeadsApiFp(configuration).getLeads(xCustomerId, xProviderName, createdAfter, createdBefore, modifiedAfter, modifiedBefore, cursor, expand, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update lead
         * @param {LeadsLeadIdBody} body 
         * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
         * @param {string} xProviderName The provider name
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLead(body: LeadsLeadIdBody, xCustomerId: string, xProviderName: string, leadId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2012>> {
            return LeadsApiFp(configuration).updateLead(body, xCustomerId, xProviderName, leadId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeadsApi - object-oriented interface
 * @export
 * @class LeadsApi
 * @extends {BaseAPI}
 */
export class LeadsApi extends BaseAPI {
    /**
     * 
     * @summary Create lead
     * @param {LeadsBody} body 
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public async createLead(body: LeadsBody, xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2012>> {
        return LeadsApiFp(this.configuration).createLead(body, xCustomerId, xProviderName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get lead
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {string} leadId 
     * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public async getLead(xCustomerId: string, xProviderName: string, leadId: string, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Lead>> {
        return LeadsApiFp(this.configuration).getLead(xCustomerId, xProviderName, leadId, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of leads
     * @summary List leads
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
     * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
     * @param {Date} [modifiedAfter] If provided, will only return objects modified after this datetime
     * @param {Date} [modifiedBefore] If provided, will only return objects modified before this datetime
     * @param {string} [cursor] The pagination cursor value
     * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
     * @param {string} [pageSize] Number of results to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public async getLeads(xCustomerId: string, xProviderName: string, createdAfter?: Date, createdBefore?: Date, modifiedAfter?: Date, modifiedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return LeadsApiFp(this.configuration).getLeads(xCustomerId, xProviderName, createdAfter, createdBefore, modifiedAfter, modifiedBefore, cursor, expand, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update lead
     * @param {LeadsLeadIdBody} body 
     * @param {string} xCustomerId The customer ID that uniquely identifies the customer in your application
     * @param {string} xProviderName The provider name
     * @param {string} leadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public async updateLead(body: LeadsLeadIdBody, xCustomerId: string, xProviderName: string, leadId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2012>> {
        return LeadsApiFp(this.configuration).updateLead(body, xCustomerId, xProviderName, leadId, options).then((request) => request(this.axios, this.basePath));
    }
}
