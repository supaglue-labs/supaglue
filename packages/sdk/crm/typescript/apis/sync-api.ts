/* tslint:disable */
/* eslint-disable */
/**
 * Supaglue CRM API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.4.1
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2006 } from '../models';
import { InlineResponse2007 } from '../models';
/**
 * SyncApi - axios parameter creator
 * @export
 */
export const SyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of Sync History objects.
         * @summary Get Sync History
         * @param {string} xCustomerId The customer ID
         * @param {string} xProviderName The provider name
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [pageSize] Number of results to return per page
         * @param {string} [model] The model name to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncHistory: async (xCustomerId: string, xProviderName: string, cursor?: string, pageSize?: string, model?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling getSyncHistory.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling getSyncHistory.');
            }
            const localVarPath = `/sync-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (model !== undefined) {
                localVarQueryParameter['model'] = model;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Sync Info
         * @summary Get Sync Info
         * @param {string} xCustomerId The customer ID
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncInfos: async (xCustomerId: string, xProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCustomerId' is not null or undefined
            if (xCustomerId === null || xCustomerId === undefined) {
                throw new RequiredError('xCustomerId','Required parameter xCustomerId was null or undefined when calling getSyncInfos.');
            }
            // verify required parameter 'xProviderName' is not null or undefined
            if (xProviderName === null || xProviderName === undefined) {
                throw new RequiredError('xProviderName','Required parameter xProviderName was null or undefined when calling getSyncInfos.');
            }
            const localVarPath = `/sync-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (xCustomerId !== undefined && xCustomerId !== null) {
                localVarHeaderParameter['x-customer-id'] = String(xCustomerId);
            }

            if (xProviderName !== undefined && xProviderName !== null) {
                localVarHeaderParameter['x-provider-name'] = String(xProviderName);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncApi - functional programming interface
 * @export
 */
export const SyncApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a list of Sync History objects.
         * @summary Get Sync History
         * @param {string} xCustomerId The customer ID
         * @param {string} xProviderName The provider name
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [pageSize] Number of results to return per page
         * @param {string} [model] The model name to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncHistory(xCustomerId: string, xProviderName: string, cursor?: string, pageSize?: string, model?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await SyncApiAxiosParamCreator(configuration).getSyncHistory(xCustomerId, xProviderName, cursor, pageSize, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Sync Info
         * @summary Get Sync Info
         * @param {string} xCustomerId The customer ID
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncInfos(xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse2007>>>> {
            const localVarAxiosArgs = await SyncApiAxiosParamCreator(configuration).getSyncInfos(xCustomerId, xProviderName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SyncApi - factory interface
 * @export
 */
export const SyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a list of Sync History objects.
         * @summary Get Sync History
         * @param {string} xCustomerId The customer ID
         * @param {string} xProviderName The provider name
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [pageSize] Number of results to return per page
         * @param {string} [model] The model name to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncHistory(xCustomerId: string, xProviderName: string, cursor?: string, pageSize?: string, model?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return SyncApiFp(configuration).getSyncHistory(xCustomerId, xProviderName, cursor, pageSize, model, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Sync Info
         * @summary Get Sync Info
         * @param {string} xCustomerId The customer ID
         * @param {string} xProviderName The provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncInfos(xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse2007>>> {
            return SyncApiFp(configuration).getSyncInfos(xCustomerId, xProviderName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncApi - object-oriented interface
 * @export
 * @class SyncApi
 * @extends {BaseAPI}
 */
export class SyncApi extends BaseAPI {
    /**
     * Get a list of Sync History objects.
     * @summary Get Sync History
     * @param {string} xCustomerId The customer ID
     * @param {string} xProviderName The provider name
     * @param {string} [cursor] The pagination cursor value
     * @param {string} [pageSize] Number of results to return per page
     * @param {string} [model] The model name to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public async getSyncHistory(xCustomerId: string, xProviderName: string, cursor?: string, pageSize?: string, model?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return SyncApiFp(this.configuration).getSyncHistory(xCustomerId, xProviderName, cursor, pageSize, model, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Sync Info
     * @summary Get Sync Info
     * @param {string} xCustomerId The customer ID
     * @param {string} xProviderName The provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public async getSyncInfos(xCustomerId: string, xProviderName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse2007>>> {
        return SyncApiFp(this.configuration).getSyncInfos(xCustomerId, xProviderName, options).then((request) => request(this.axios, this.basePath));
    }
}
