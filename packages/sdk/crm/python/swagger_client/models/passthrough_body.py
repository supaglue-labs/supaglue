# coding: utf-8

"""
    Supaglue CRM API

    # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ```   # noqa: E501

    OpenAPI spec version: 0.6.0
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PassthroughBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'method': 'str',
        'headers': 'dict(str, str)',
        'query': 'dict(str, str)',
        'body': 'str'
    }

    attribute_map = {
        'path': 'path',
        'method': 'method',
        'headers': 'headers',
        'query': 'query',
        'body': 'body'
    }

    def __init__(self, path=None, method=None, headers=None, query=None, body=None):  # noqa: E501
        """PassthroughBody - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._method = None
        self._headers = None
        self._query = None
        self._body = None
        self.discriminator = None
        self.path = path
        self.method = method
        if headers is not None:
            self.headers = headers
        if query is not None:
            self.query = query
        if body is not None:
            self.body = body

    @property
    def path(self):
        """Gets the path of this PassthroughBody.  # noqa: E501

        The path to send the request to (do not pass the domain)  # noqa: E501

        :return: The path of this PassthroughBody.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PassthroughBody.

        The path to send the request to (do not pass the domain)  # noqa: E501

        :param path: The path of this PassthroughBody.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def method(self):
        """Gets the method of this PassthroughBody.  # noqa: E501


        :return: The method of this PassthroughBody.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PassthroughBody.


        :param method: The method of this PassthroughBody.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["GET", "POST", "PUT", "PATCH", "DELETE"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def headers(self):
        """Gets the headers of this PassthroughBody.  # noqa: E501

        Headers to pass to downstream  # noqa: E501

        :return: The headers of this PassthroughBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this PassthroughBody.

        Headers to pass to downstream  # noqa: E501

        :param headers: The headers of this PassthroughBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def query(self):
        """Gets the query of this PassthroughBody.  # noqa: E501

        Query parameters to pass to downstream  # noqa: E501

        :return: The query of this PassthroughBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this PassthroughBody.

        Query parameters to pass to downstream  # noqa: E501

        :param query: The query of this PassthroughBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._query = query

    @property
    def body(self):
        """Gets the body of this PassthroughBody.  # noqa: E501

        Body to pass to downstream  # noqa: E501

        :return: The body of this PassthroughBody.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PassthroughBody.

        Body to pass to downstream  # noqa: E501

        :param body: The body of this PassthroughBody.  # noqa: E501
        :type: str
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PassthroughBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PassthroughBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
