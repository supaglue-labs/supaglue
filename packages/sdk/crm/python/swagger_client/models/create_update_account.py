# coding: utf-8

"""
    Supaglue CRM API

    # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ```   # noqa: E501

    OpenAPI spec version: 0.6.0
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateUpdateAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'industry': 'str',
        'name': 'str',
        'number_of_employees': 'int',
        'website': 'str',
        'addresses': 'Addresses',
        'phone_numbers': 'PhoneNumbers',
        'owner_id': 'str',
        'lifecycle_stage': 'LifecycleStage',
        'custom_fields': 'CustomFields'
    }

    attribute_map = {
        'description': 'description',
        'industry': 'industry',
        'name': 'name',
        'number_of_employees': 'number_of_employees',
        'website': 'website',
        'addresses': 'addresses',
        'phone_numbers': 'phone_numbers',
        'owner_id': 'owner_id',
        'lifecycle_stage': 'lifecycle_stage',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, description=None, industry=None, name=None, number_of_employees=None, website=None, addresses=None, phone_numbers=None, owner_id=None, lifecycle_stage=None, custom_fields=None):  # noqa: E501
        """CreateUpdateAccount - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._industry = None
        self._name = None
        self._number_of_employees = None
        self._website = None
        self._addresses = None
        self._phone_numbers = None
        self._owner_id = None
        self._lifecycle_stage = None
        self._custom_fields = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if industry is not None:
            self.industry = industry
        if name is not None:
            self.name = name
        if number_of_employees is not None:
            self.number_of_employees = number_of_employees
        if website is not None:
            self.website = website
        if addresses is not None:
            self.addresses = addresses
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if owner_id is not None:
            self.owner_id = owner_id
        if lifecycle_stage is not None:
            self.lifecycle_stage = lifecycle_stage
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this CreateUpdateAccount.  # noqa: E501


        :return: The description of this CreateUpdateAccount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateUpdateAccount.


        :param description: The description of this CreateUpdateAccount.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def industry(self):
        """Gets the industry of this CreateUpdateAccount.  # noqa: E501


        :return: The industry of this CreateUpdateAccount.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this CreateUpdateAccount.


        :param industry: The industry of this CreateUpdateAccount.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def name(self):
        """Gets the name of this CreateUpdateAccount.  # noqa: E501


        :return: The name of this CreateUpdateAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUpdateAccount.


        :param name: The name of this CreateUpdateAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this CreateUpdateAccount.  # noqa: E501


        :return: The number_of_employees of this CreateUpdateAccount.  # noqa: E501
        :rtype: int
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this CreateUpdateAccount.


        :param number_of_employees: The number_of_employees of this CreateUpdateAccount.  # noqa: E501
        :type: int
        """

        self._number_of_employees = number_of_employees

    @property
    def website(self):
        """Gets the website of this CreateUpdateAccount.  # noqa: E501


        :return: The website of this CreateUpdateAccount.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CreateUpdateAccount.


        :param website: The website of this CreateUpdateAccount.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def addresses(self):
        """Gets the addresses of this CreateUpdateAccount.  # noqa: E501


        :return: The addresses of this CreateUpdateAccount.  # noqa: E501
        :rtype: Addresses
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this CreateUpdateAccount.


        :param addresses: The addresses of this CreateUpdateAccount.  # noqa: E501
        :type: Addresses
        """

        self._addresses = addresses

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this CreateUpdateAccount.  # noqa: E501


        :return: The phone_numbers of this CreateUpdateAccount.  # noqa: E501
        :rtype: PhoneNumbers
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this CreateUpdateAccount.


        :param phone_numbers: The phone_numbers of this CreateUpdateAccount.  # noqa: E501
        :type: PhoneNumbers
        """

        self._phone_numbers = phone_numbers

    @property
    def owner_id(self):
        """Gets the owner_id of this CreateUpdateAccount.  # noqa: E501


        :return: The owner_id of this CreateUpdateAccount.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this CreateUpdateAccount.


        :param owner_id: The owner_id of this CreateUpdateAccount.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def lifecycle_stage(self):
        """Gets the lifecycle_stage of this CreateUpdateAccount.  # noqa: E501


        :return: The lifecycle_stage of this CreateUpdateAccount.  # noqa: E501
        :rtype: LifecycleStage
        """
        return self._lifecycle_stage

    @lifecycle_stage.setter
    def lifecycle_stage(self, lifecycle_stage):
        """Sets the lifecycle_stage of this CreateUpdateAccount.


        :param lifecycle_stage: The lifecycle_stage of this CreateUpdateAccount.  # noqa: E501
        :type: LifecycleStage
        """

        self._lifecycle_stage = lifecycle_stage

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CreateUpdateAccount.  # noqa: E501


        :return: The custom_fields of this CreateUpdateAccount.  # noqa: E501
        :rtype: CustomFields
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CreateUpdateAccount.


        :param custom_fields: The custom_fields of this CreateUpdateAccount.  # noqa: E501
        :type: CustomFields
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUpdateAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUpdateAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
