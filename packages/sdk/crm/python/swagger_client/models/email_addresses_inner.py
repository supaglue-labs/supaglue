# coding: utf-8

"""
    Supaglue CRM API

    # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ```   # noqa: E501

    OpenAPI spec version: 0.6.0
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailAddressesInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'email_address_type': 'str'
    }

    attribute_map = {
        'email_address': 'email_address',
        'email_address_type': 'email_address_type'
    }

    def __init__(self, email_address=None, email_address_type=None):  # noqa: E501
        """EmailAddressesInner - a model defined in Swagger"""  # noqa: E501
        self._email_address = None
        self._email_address_type = None
        self.discriminator = None
        self.email_address = email_address
        self.email_address_type = email_address_type

    @property
    def email_address(self):
        """Gets the email_address of this EmailAddressesInner.  # noqa: E501


        :return: The email_address of this EmailAddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this EmailAddressesInner.


        :param email_address: The email_address of this EmailAddressesInner.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def email_address_type(self):
        """Gets the email_address_type of this EmailAddressesInner.  # noqa: E501


        :return: The email_address_type of this EmailAddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._email_address_type

    @email_address_type.setter
    def email_address_type(self, email_address_type):
        """Sets the email_address_type of this EmailAddressesInner.


        :param email_address_type: The email_address_type of this EmailAddressesInner.  # noqa: E501
        :type: str
        """
        if email_address_type is None:
            raise ValueError("Invalid value for `email_address_type`, must not be `None`")  # noqa: E501
        allowed_values = ["primary", "work"]  # noqa: E501
        if email_address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `email_address_type` ({0}), must be one of {1}"  # noqa: E501
                .format(email_address_type, allowed_values)
            )

        self._email_address_type = email_address_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailAddressesInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailAddressesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
