# coding: utf-8

"""
    Supaglue CRM API

    # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ```   # noqa: E501

    OpenAPI spec version: 0.4.1
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddressesInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_type': 'str',
        'city': 'str',
        'country': 'str',
        'postal_code': 'str',
        'state': 'str',
        'street1': 'str',
        'street2': 'str'
    }

    attribute_map = {
        'address_type': 'address_type',
        'city': 'city',
        'country': 'country',
        'postal_code': 'postal_code',
        'state': 'state',
        'street1': 'street1',
        'street2': 'street2'
    }

    def __init__(self, address_type=None, city=None, country=None, postal_code=None, state=None, street1=None, street2=None):  # noqa: E501
        """AddressesInner - a model defined in Swagger"""  # noqa: E501
        self._address_type = None
        self._city = None
        self._country = None
        self._postal_code = None
        self._state = None
        self._street1 = None
        self._street2 = None
        self.discriminator = None
        self.address_type = address_type
        self.city = city
        self.country = country
        self.postal_code = postal_code
        self.state = state
        self.street1 = street1
        self.street2 = street2

    @property
    def address_type(self):
        """Gets the address_type of this AddressesInner.  # noqa: E501


        :return: The address_type of this AddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this AddressesInner.


        :param address_type: The address_type of this AddressesInner.  # noqa: E501
        :type: str
        """
        if address_type is None:
            raise ValueError("Invalid value for `address_type`, must not be `None`")  # noqa: E501
        allowed_values = ["primary", "mailing", "other", "billing", "shipping"]  # noqa: E501
        if address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `address_type` ({0}), must be one of {1}"  # noqa: E501
                .format(address_type, allowed_values)
            )

        self._address_type = address_type

    @property
    def city(self):
        """Gets the city of this AddressesInner.  # noqa: E501


        :return: The city of this AddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressesInner.


        :param city: The city of this AddressesInner.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def country(self):
        """Gets the country of this AddressesInner.  # noqa: E501


        :return: The country of this AddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressesInner.


        :param country: The country of this AddressesInner.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressesInner.  # noqa: E501


        :return: The postal_code of this AddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressesInner.


        :param postal_code: The postal_code of this AddressesInner.  # noqa: E501
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this AddressesInner.  # noqa: E501


        :return: The state of this AddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressesInner.


        :param state: The state of this AddressesInner.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def street1(self):
        """Gets the street1 of this AddressesInner.  # noqa: E501


        :return: The street1 of this AddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this AddressesInner.


        :param street1: The street1 of this AddressesInner.  # noqa: E501
        :type: str
        """
        if street1 is None:
            raise ValueError("Invalid value for `street1`, must not be `None`")  # noqa: E501

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this AddressesInner.  # noqa: E501


        :return: The street2 of this AddressesInner.  # noqa: E501
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this AddressesInner.


        :param street2: The street2 of this AddressesInner.  # noqa: E501
        :type: str
        """
        if street2 is None:
            raise ValueError("Invalid value for `street2`, must not be `None`")  # noqa: E501

        self._street2 = street2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressesInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
