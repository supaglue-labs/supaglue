# coding: utf-8

"""
    Supaglue CRM API

    # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/api/crm/v1 ```   # noqa: E501

    OpenAPI spec version: 0.3.4
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse201(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errors': 'Errors',
        'logs': 'Logs',
        'model': 'Account',
        'warnings': 'Warnings'
    }

    attribute_map = {
        'errors': 'errors',
        'logs': 'logs',
        'model': 'model',
        'warnings': 'warnings'
    }

    def __init__(self, errors=None, logs=None, model=None, warnings=None):  # noqa: E501
        """InlineResponse201 - a model defined in Swagger"""  # noqa: E501
        self._errors = None
        self._logs = None
        self._model = None
        self._warnings = None
        self.discriminator = None
        if errors is not None:
            self.errors = errors
        if logs is not None:
            self.logs = logs
        if model is not None:
            self.model = model
        if warnings is not None:
            self.warnings = warnings

    @property
    def errors(self):
        """Gets the errors of this InlineResponse201.  # noqa: E501


        :return: The errors of this InlineResponse201.  # noqa: E501
        :rtype: Errors
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this InlineResponse201.


        :param errors: The errors of this InlineResponse201.  # noqa: E501
        :type: Errors
        """

        self._errors = errors

    @property
    def logs(self):
        """Gets the logs of this InlineResponse201.  # noqa: E501


        :return: The logs of this InlineResponse201.  # noqa: E501
        :rtype: Logs
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this InlineResponse201.


        :param logs: The logs of this InlineResponse201.  # noqa: E501
        :type: Logs
        """

        self._logs = logs

    @property
    def model(self):
        """Gets the model of this InlineResponse201.  # noqa: E501


        :return: The model of this InlineResponse201.  # noqa: E501
        :rtype: Account
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this InlineResponse201.


        :param model: The model of this InlineResponse201.  # noqa: E501
        :type: Account
        """

        self._model = model

    @property
    def warnings(self):
        """Gets the warnings of this InlineResponse201.  # noqa: E501


        :return: The warnings of this InlineResponse201.  # noqa: E501
        :rtype: Warnings
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this InlineResponse201.


        :param warnings: The warnings of this InlineResponse201.  # noqa: E501
        :type: Warnings
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse201, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse201):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
