# coding: utf-8

"""
    Supaglue CRM API

    # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ```   # noqa: E501

    OpenAPI spec version: 0.6.0
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Contact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account': 'Account',
        'owner_id': 'str',
        'owner': 'User',
        'addresses': 'Addresses',
        'email_addresses': 'EmailAddresses',
        'first_name': 'str',
        'id': 'str',
        'remote_id': 'str',
        'last_activity_at': 'datetime',
        'last_name': 'str',
        'phone_numbers': 'PhoneNumbers',
        'lifecycle_stage': 'LifecycleStage',
        'remote_created_at': 'datetime',
        'remote_updated_at': 'datetime',
        'remote_was_deleted': 'bool',
        'last_modified_at': 'datetime'
    }

    attribute_map = {
        'account_id': 'account_id',
        'account': 'account',
        'owner_id': 'owner_id',
        'owner': 'owner',
        'addresses': 'addresses',
        'email_addresses': 'email_addresses',
        'first_name': 'first_name',
        'id': 'id',
        'remote_id': 'remote_id',
        'last_activity_at': 'last_activity_at',
        'last_name': 'last_name',
        'phone_numbers': 'phone_numbers',
        'lifecycle_stage': 'lifecycle_stage',
        'remote_created_at': 'remote_created_at',
        'remote_updated_at': 'remote_updated_at',
        'remote_was_deleted': 'remote_was_deleted',
        'last_modified_at': 'last_modified_at'
    }

    def __init__(self, account_id=None, account=None, owner_id=None, owner=None, addresses=None, email_addresses=None, first_name=None, id=None, remote_id=None, last_activity_at=None, last_name=None, phone_numbers=None, lifecycle_stage=None, remote_created_at=None, remote_updated_at=None, remote_was_deleted=None, last_modified_at=None):  # noqa: E501
        """Contact - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account = None
        self._owner_id = None
        self._owner = None
        self._addresses = None
        self._email_addresses = None
        self._first_name = None
        self._id = None
        self._remote_id = None
        self._last_activity_at = None
        self._last_name = None
        self._phone_numbers = None
        self._lifecycle_stage = None
        self._remote_created_at = None
        self._remote_updated_at = None
        self._remote_was_deleted = None
        self._last_modified_at = None
        self.discriminator = None
        self.account_id = account_id
        if account is not None:
            self.account = account
        self.owner_id = owner_id
        if owner is not None:
            self.owner = owner
        self.addresses = addresses
        self.email_addresses = email_addresses
        self.first_name = first_name
        self.id = id
        self.remote_id = remote_id
        self.last_activity_at = last_activity_at
        self.last_name = last_name
        self.phone_numbers = phone_numbers
        self.lifecycle_stage = lifecycle_stage
        if remote_created_at is not None:
            self.remote_created_at = remote_created_at
        if remote_updated_at is not None:
            self.remote_updated_at = remote_updated_at
        if remote_was_deleted is not None:
            self.remote_was_deleted = remote_was_deleted
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at

    @property
    def account_id(self):
        """Gets the account_id of this Contact.  # noqa: E501


        :return: The account_id of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Contact.


        :param account_id: The account_id of this Contact.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def account(self):
        """Gets the account of this Contact.  # noqa: E501


        :return: The account of this Contact.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Contact.


        :param account: The account of this Contact.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def owner_id(self):
        """Gets the owner_id of this Contact.  # noqa: E501


        :return: The owner_id of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Contact.


        :param owner_id: The owner_id of this Contact.  # noqa: E501
        :type: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def owner(self):
        """Gets the owner of this Contact.  # noqa: E501


        :return: The owner of this Contact.  # noqa: E501
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Contact.


        :param owner: The owner of this Contact.  # noqa: E501
        :type: User
        """

        self._owner = owner

    @property
    def addresses(self):
        """Gets the addresses of this Contact.  # noqa: E501


        :return: The addresses of this Contact.  # noqa: E501
        :rtype: Addresses
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Contact.


        :param addresses: The addresses of this Contact.  # noqa: E501
        :type: Addresses
        """
        if addresses is None:
            raise ValueError("Invalid value for `addresses`, must not be `None`")  # noqa: E501

        self._addresses = addresses

    @property
    def email_addresses(self):
        """Gets the email_addresses of this Contact.  # noqa: E501


        :return: The email_addresses of this Contact.  # noqa: E501
        :rtype: EmailAddresses
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this Contact.


        :param email_addresses: The email_addresses of this Contact.  # noqa: E501
        :type: EmailAddresses
        """
        if email_addresses is None:
            raise ValueError("Invalid value for `email_addresses`, must not be `None`")  # noqa: E501

        self._email_addresses = email_addresses

    @property
    def first_name(self):
        """Gets the first_name of this Contact.  # noqa: E501


        :return: The first_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.


        :param first_name: The first_name of this Contact.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Contact.  # noqa: E501


        :return: The id of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.


        :param id: The id of this Contact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def remote_id(self):
        """Gets the remote_id of this Contact.  # noqa: E501


        :return: The remote_id of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this Contact.


        :param remote_id: The remote_id of this Contact.  # noqa: E501
        :type: str
        """
        if remote_id is None:
            raise ValueError("Invalid value for `remote_id`, must not be `None`")  # noqa: E501

        self._remote_id = remote_id

    @property
    def last_activity_at(self):
        """Gets the last_activity_at of this Contact.  # noqa: E501


        :return: The last_activity_at of this Contact.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity_at

    @last_activity_at.setter
    def last_activity_at(self, last_activity_at):
        """Sets the last_activity_at of this Contact.


        :param last_activity_at: The last_activity_at of this Contact.  # noqa: E501
        :type: datetime
        """
        if last_activity_at is None:
            raise ValueError("Invalid value for `last_activity_at`, must not be `None`")  # noqa: E501

        self._last_activity_at = last_activity_at

    @property
    def last_name(self):
        """Gets the last_name of this Contact.  # noqa: E501


        :return: The last_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.


        :param last_name: The last_name of this Contact.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Contact.  # noqa: E501


        :return: The phone_numbers of this Contact.  # noqa: E501
        :rtype: PhoneNumbers
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Contact.


        :param phone_numbers: The phone_numbers of this Contact.  # noqa: E501
        :type: PhoneNumbers
        """
        if phone_numbers is None:
            raise ValueError("Invalid value for `phone_numbers`, must not be `None`")  # noqa: E501

        self._phone_numbers = phone_numbers

    @property
    def lifecycle_stage(self):
        """Gets the lifecycle_stage of this Contact.  # noqa: E501


        :return: The lifecycle_stage of this Contact.  # noqa: E501
        :rtype: LifecycleStage
        """
        return self._lifecycle_stage

    @lifecycle_stage.setter
    def lifecycle_stage(self, lifecycle_stage):
        """Sets the lifecycle_stage of this Contact.


        :param lifecycle_stage: The lifecycle_stage of this Contact.  # noqa: E501
        :type: LifecycleStage
        """
        if lifecycle_stage is None:
            raise ValueError("Invalid value for `lifecycle_stage`, must not be `None`")  # noqa: E501

        self._lifecycle_stage = lifecycle_stage

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this Contact.  # noqa: E501


        :return: The remote_created_at of this Contact.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this Contact.


        :param remote_created_at: The remote_created_at of this Contact.  # noqa: E501
        :type: datetime
        """

        self._remote_created_at = remote_created_at

    @property
    def remote_updated_at(self):
        """Gets the remote_updated_at of this Contact.  # noqa: E501


        :return: The remote_updated_at of this Contact.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_updated_at

    @remote_updated_at.setter
    def remote_updated_at(self, remote_updated_at):
        """Sets the remote_updated_at of this Contact.


        :param remote_updated_at: The remote_updated_at of this Contact.  # noqa: E501
        :type: datetime
        """

        self._remote_updated_at = remote_updated_at

    @property
    def remote_was_deleted(self):
        """Gets the remote_was_deleted of this Contact.  # noqa: E501


        :return: The remote_was_deleted of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._remote_was_deleted

    @remote_was_deleted.setter
    def remote_was_deleted(self, remote_was_deleted):
        """Sets the remote_was_deleted of this Contact.


        :param remote_was_deleted: The remote_was_deleted of this Contact.  # noqa: E501
        :type: bool
        """

        self._remote_was_deleted = remote_was_deleted

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this Contact.  # noqa: E501


        :return: The last_modified_at of this Contact.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this Contact.


        :param last_modified_at: The last_modified_at of this Contact.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
