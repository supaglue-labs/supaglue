# coding: utf-8

"""
    Supaglue CRM API

    # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/crm/v1 ```   # noqa: E501

    OpenAPI spec version: 0.4.1
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Lead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'Addresses',
        'company': 'str',
        'converted_account_id': 'str',
        'converted_account': 'Account',
        'converted_contact_id': 'str',
        'converted_contact': 'Contact',
        'converted_date': 'datetime',
        'email_addresses': 'EmailAddresses',
        'first_name': 'str',
        'id': 'str',
        'last_name': 'str',
        'lead_source': 'str',
        'owner_id': 'str',
        'owner': 'User',
        'phone_numbers': 'PhoneNumbers',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'title': 'str'
    }

    attribute_map = {
        'addresses': 'addresses',
        'company': 'company',
        'converted_account_id': 'converted_account_id',
        'converted_account': 'converted_account',
        'converted_contact_id': 'converted_contact_id',
        'converted_contact': 'converted_contact',
        'converted_date': 'converted_date',
        'email_addresses': 'email_addresses',
        'first_name': 'first_name',
        'id': 'id',
        'last_name': 'last_name',
        'lead_source': 'lead_source',
        'owner_id': 'owner_id',
        'owner': 'owner',
        'phone_numbers': 'phone_numbers',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'title': 'title'
    }

    def __init__(self, addresses=None, company=None, converted_account_id=None, converted_account=None, converted_contact_id=None, converted_contact=None, converted_date=None, email_addresses=None, first_name=None, id=None, last_name=None, lead_source=None, owner_id=None, owner=None, phone_numbers=None, created_at=None, updated_at=None, title=None):  # noqa: E501
        """Lead - a model defined in Swagger"""  # noqa: E501
        self._addresses = None
        self._company = None
        self._converted_account_id = None
        self._converted_account = None
        self._converted_contact_id = None
        self._converted_contact = None
        self._converted_date = None
        self._email_addresses = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._lead_source = None
        self._owner_id = None
        self._owner = None
        self._phone_numbers = None
        self._created_at = None
        self._updated_at = None
        self._title = None
        self.discriminator = None
        if addresses is not None:
            self.addresses = addresses
        if company is not None:
            self.company = company
        if converted_account_id is not None:
            self.converted_account_id = converted_account_id
        if converted_account is not None:
            self.converted_account = converted_account
        if converted_contact_id is not None:
            self.converted_contact_id = converted_contact_id
        if converted_contact is not None:
            self.converted_contact = converted_contact
        if converted_date is not None:
            self.converted_date = converted_date
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if lead_source is not None:
            self.lead_source = lead_source
        if owner_id is not None:
            self.owner_id = owner_id
        if owner is not None:
            self.owner = owner
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if title is not None:
            self.title = title

    @property
    def addresses(self):
        """Gets the addresses of this Lead.  # noqa: E501


        :return: The addresses of this Lead.  # noqa: E501
        :rtype: Addresses
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Lead.


        :param addresses: The addresses of this Lead.  # noqa: E501
        :type: Addresses
        """

        self._addresses = addresses

    @property
    def company(self):
        """Gets the company of this Lead.  # noqa: E501


        :return: The company of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Lead.


        :param company: The company of this Lead.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def converted_account_id(self):
        """Gets the converted_account_id of this Lead.  # noqa: E501


        :return: The converted_account_id of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._converted_account_id

    @converted_account_id.setter
    def converted_account_id(self, converted_account_id):
        """Sets the converted_account_id of this Lead.


        :param converted_account_id: The converted_account_id of this Lead.  # noqa: E501
        :type: str
        """

        self._converted_account_id = converted_account_id

    @property
    def converted_account(self):
        """Gets the converted_account of this Lead.  # noqa: E501


        :return: The converted_account of this Lead.  # noqa: E501
        :rtype: Account
        """
        return self._converted_account

    @converted_account.setter
    def converted_account(self, converted_account):
        """Sets the converted_account of this Lead.


        :param converted_account: The converted_account of this Lead.  # noqa: E501
        :type: Account
        """

        self._converted_account = converted_account

    @property
    def converted_contact_id(self):
        """Gets the converted_contact_id of this Lead.  # noqa: E501


        :return: The converted_contact_id of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._converted_contact_id

    @converted_contact_id.setter
    def converted_contact_id(self, converted_contact_id):
        """Sets the converted_contact_id of this Lead.


        :param converted_contact_id: The converted_contact_id of this Lead.  # noqa: E501
        :type: str
        """

        self._converted_contact_id = converted_contact_id

    @property
    def converted_contact(self):
        """Gets the converted_contact of this Lead.  # noqa: E501


        :return: The converted_contact of this Lead.  # noqa: E501
        :rtype: Contact
        """
        return self._converted_contact

    @converted_contact.setter
    def converted_contact(self, converted_contact):
        """Sets the converted_contact of this Lead.


        :param converted_contact: The converted_contact of this Lead.  # noqa: E501
        :type: Contact
        """

        self._converted_contact = converted_contact

    @property
    def converted_date(self):
        """Gets the converted_date of this Lead.  # noqa: E501


        :return: The converted_date of this Lead.  # noqa: E501
        :rtype: datetime
        """
        return self._converted_date

    @converted_date.setter
    def converted_date(self, converted_date):
        """Sets the converted_date of this Lead.


        :param converted_date: The converted_date of this Lead.  # noqa: E501
        :type: datetime
        """

        self._converted_date = converted_date

    @property
    def email_addresses(self):
        """Gets the email_addresses of this Lead.  # noqa: E501


        :return: The email_addresses of this Lead.  # noqa: E501
        :rtype: EmailAddresses
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this Lead.


        :param email_addresses: The email_addresses of this Lead.  # noqa: E501
        :type: EmailAddresses
        """

        self._email_addresses = email_addresses

    @property
    def first_name(self):
        """Gets the first_name of this Lead.  # noqa: E501


        :return: The first_name of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Lead.


        :param first_name: The first_name of this Lead.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Lead.  # noqa: E501


        :return: The id of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lead.


        :param id: The id of this Lead.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Lead.  # noqa: E501


        :return: The last_name of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Lead.


        :param last_name: The last_name of this Lead.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def lead_source(self):
        """Gets the lead_source of this Lead.  # noqa: E501


        :return: The lead_source of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._lead_source

    @lead_source.setter
    def lead_source(self, lead_source):
        """Sets the lead_source of this Lead.


        :param lead_source: The lead_source of this Lead.  # noqa: E501
        :type: str
        """

        self._lead_source = lead_source

    @property
    def owner_id(self):
        """Gets the owner_id of this Lead.  # noqa: E501


        :return: The owner_id of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Lead.


        :param owner_id: The owner_id of this Lead.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def owner(self):
        """Gets the owner of this Lead.  # noqa: E501


        :return: The owner of this Lead.  # noqa: E501
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Lead.


        :param owner: The owner of this Lead.  # noqa: E501
        :type: User
        """

        self._owner = owner

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Lead.  # noqa: E501


        :return: The phone_numbers of this Lead.  # noqa: E501
        :rtype: PhoneNumbers
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Lead.


        :param phone_numbers: The phone_numbers of this Lead.  # noqa: E501
        :type: PhoneNumbers
        """

        self._phone_numbers = phone_numbers

    @property
    def created_at(self):
        """Gets the created_at of this Lead.  # noqa: E501


        :return: The created_at of this Lead.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Lead.


        :param created_at: The created_at of this Lead.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Lead.  # noqa: E501


        :return: The updated_at of this Lead.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Lead.


        :param updated_at: The updated_at of this Lead.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def title(self):
        """Gets the title of this Lead.  # noqa: E501


        :return: The title of this Lead.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Lead.


        :param title: The title of this Lead.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Lead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
