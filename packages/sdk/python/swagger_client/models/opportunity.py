# coding: utf-8

"""
    Supaglue CRM API

    # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/api/crm/v1 ```   # noqa: E501

    OpenAPI spec version: 0.3.3
    Contact: docs@supaglue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Opportunity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account': 'Account',
        'amount': 'int',
        'close_date': 'datetime',
        'description': 'str',
        'id': 'str',
        'last_activity_at': 'datetime',
        'name': 'str',
        'owner': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'stage': 'str',
        'status': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'account': 'account',
        'amount': 'amount',
        'close_date': 'close_date',
        'description': 'description',
        'id': 'id',
        'last_activity_at': 'last_activity_at',
        'name': 'name',
        'owner': 'owner',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'stage': 'stage',
        'status': 'status'
    }

    def __init__(self, account_id=None, account=None, amount=None, close_date=None, description=None, id=None, last_activity_at=None, name=None, owner=None, created_at=None, updated_at=None, stage=None, status=None):  # noqa: E501
        """Opportunity - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account = None
        self._amount = None
        self._close_date = None
        self._description = None
        self._id = None
        self._last_activity_at = None
        self._name = None
        self._owner = None
        self._created_at = None
        self._updated_at = None
        self._stage = None
        self._status = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account is not None:
            self.account = account
        if amount is not None:
            self.amount = amount
        if close_date is not None:
            self.close_date = close_date
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if last_activity_at is not None:
            self.last_activity_at = last_activity_at
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if stage is not None:
            self.stage = stage
        if status is not None:
            self.status = status

    @property
    def account_id(self):
        """Gets the account_id of this Opportunity.  # noqa: E501


        :return: The account_id of this Opportunity.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Opportunity.


        :param account_id: The account_id of this Opportunity.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account(self):
        """Gets the account of this Opportunity.  # noqa: E501


        :return: The account of this Opportunity.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Opportunity.


        :param account: The account of this Opportunity.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def amount(self):
        """Gets the amount of this Opportunity.  # noqa: E501


        :return: The amount of this Opportunity.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Opportunity.


        :param amount: The amount of this Opportunity.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def close_date(self):
        """Gets the close_date of this Opportunity.  # noqa: E501


        :return: The close_date of this Opportunity.  # noqa: E501
        :rtype: datetime
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this Opportunity.


        :param close_date: The close_date of this Opportunity.  # noqa: E501
        :type: datetime
        """

        self._close_date = close_date

    @property
    def description(self):
        """Gets the description of this Opportunity.  # noqa: E501


        :return: The description of this Opportunity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Opportunity.


        :param description: The description of this Opportunity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Opportunity.  # noqa: E501


        :return: The id of this Opportunity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Opportunity.


        :param id: The id of this Opportunity.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_activity_at(self):
        """Gets the last_activity_at of this Opportunity.  # noqa: E501


        :return: The last_activity_at of this Opportunity.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity_at

    @last_activity_at.setter
    def last_activity_at(self, last_activity_at):
        """Sets the last_activity_at of this Opportunity.


        :param last_activity_at: The last_activity_at of this Opportunity.  # noqa: E501
        :type: datetime
        """

        self._last_activity_at = last_activity_at

    @property
    def name(self):
        """Gets the name of this Opportunity.  # noqa: E501


        :return: The name of this Opportunity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Opportunity.


        :param name: The name of this Opportunity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Opportunity.  # noqa: E501


        :return: The owner of this Opportunity.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Opportunity.


        :param owner: The owner of this Opportunity.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def created_at(self):
        """Gets the created_at of this Opportunity.  # noqa: E501


        :return: The created_at of this Opportunity.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Opportunity.


        :param created_at: The created_at of this Opportunity.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Opportunity.  # noqa: E501


        :return: The updated_at of this Opportunity.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Opportunity.


        :param updated_at: The updated_at of this Opportunity.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def stage(self):
        """Gets the stage of this Opportunity.  # noqa: E501


        :return: The stage of this Opportunity.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this Opportunity.


        :param stage: The stage of this Opportunity.  # noqa: E501
        :type: str
        """

        self._stage = stage

    @property
    def status(self):
        """Gets the status of this Opportunity.  # noqa: E501


        :return: The status of this Opportunity.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Opportunity.


        :param status: The status of this Opportunity.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Opportunity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Opportunity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
