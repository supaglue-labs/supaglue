/* tslint:disable */
/* eslint-disable */
/**
 * Supaglue API
 * # Introduction  Welcome to the Supaglue unified CRM API documentation. You can use this API to read data that has been synced into Supaglue from third-party providers.  ### Base API URL  ``` http://localhost:8080/api/crm/v1 ``` 
 *
 * OpenAPI spec version: 0.3.0
 * Contact: docs@supaglue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2003 } from '../models';
import { InlineResponse2013 } from '../models';
import { OpportunitiesBody } from '../models';
import { OpportunitiesOpportunityIdBody } from '../models';
import { Opportunity } from '../models';
/**
 * OpportunitiesApi - axios parameter creator
 * @export
 */
export const OpportunitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create opportunity
         * @param {OpportunitiesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOpportunity: async (body: OpportunitiesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOpportunity.');
            }
            const localVarPath = `/opportunities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of opportunities
         * @summary List opportunities
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [updatedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [updatedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpportunities: async (createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/opportunities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createdAfter !== undefined) {
                localVarQueryParameter['created_after'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['created_before'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updated_after'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updated_before'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString() :
                    updatedBefore;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get opportunity
         * @param {string} opportunityId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpportunity: async (opportunityId: string, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'opportunityId' is not null or undefined
            if (opportunityId === null || opportunityId === undefined) {
                throw new RequiredError('opportunityId','Required parameter opportunityId was null or undefined when calling getOpportunity.');
            }
            const localVarPath = `/opportunities/{opportunity_id}`
                .replace(`{${"opportunity_id"}}`, encodeURIComponent(String(opportunityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update opportunity
         * @param {OpportunitiesOpportunityIdBody} body 
         * @param {string} opportunityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOpportunity: async (body: OpportunitiesOpportunityIdBody, opportunityId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOpportunity.');
            }
            // verify required parameter 'opportunityId' is not null or undefined
            if (opportunityId === null || opportunityId === undefined) {
                throw new RequiredError('opportunityId','Required parameter opportunityId was null or undefined when calling updateOpportunity.');
            }
            const localVarPath = `/opportunities/{opportunity_id}`
                .replace(`{${"opportunity_id"}}`, encodeURIComponent(String(opportunityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpportunitiesApi - functional programming interface
 * @export
 */
export const OpportunitiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create opportunity
         * @param {OpportunitiesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOpportunity(body: OpportunitiesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2013>>> {
            const localVarAxiosArgs = await OpportunitiesApiAxiosParamCreator(configuration).createOpportunity(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of opportunities
         * @summary List opportunities
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [updatedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [updatedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpportunities(createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await OpportunitiesApiAxiosParamCreator(configuration).getOpportunities(createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get opportunity
         * @param {string} opportunityId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpportunity(opportunityId: string, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Opportunity>>> {
            const localVarAxiosArgs = await OpportunitiesApiAxiosParamCreator(configuration).getOpportunity(opportunityId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update opportunity
         * @param {OpportunitiesOpportunityIdBody} body 
         * @param {string} opportunityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOpportunity(body: OpportunitiesOpportunityIdBody, opportunityId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2013>>> {
            const localVarAxiosArgs = await OpportunitiesApiAxiosParamCreator(configuration).updateOpportunity(body, opportunityId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OpportunitiesApi - factory interface
 * @export
 */
export const OpportunitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create opportunity
         * @param {OpportunitiesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOpportunity(body: OpportunitiesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>> {
            return OpportunitiesApiFp(configuration).createOpportunity(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of opportunities
         * @summary List opportunities
         * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
         * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
         * @param {Date} [updatedAfter] If provided, will only return objects modified after this datetime
         * @param {Date} [updatedBefore] If provided, will only return objects modified before this datetime
         * @param {string} [cursor] The pagination cursor value
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {string} [pageSize] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpportunities(createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return OpportunitiesApiFp(configuration).getOpportunities(createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get opportunity
         * @param {string} opportunityId 
         * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpportunity(opportunityId: string, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Opportunity>> {
            return OpportunitiesApiFp(configuration).getOpportunity(opportunityId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update opportunity
         * @param {OpportunitiesOpportunityIdBody} body 
         * @param {string} opportunityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOpportunity(body: OpportunitiesOpportunityIdBody, opportunityId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>> {
            return OpportunitiesApiFp(configuration).updateOpportunity(body, opportunityId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OpportunitiesApi - object-oriented interface
 * @export
 * @class OpportunitiesApi
 * @extends {BaseAPI}
 */
export class OpportunitiesApi extends BaseAPI {
    /**
     * 
     * @summary Create opportunity
     * @param {OpportunitiesBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApi
     */
    public async createOpportunity(body: OpportunitiesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2013>> {
        return OpportunitiesApiFp(this.configuration).createOpportunity(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of opportunities
     * @summary List opportunities
     * @param {Date} [createdAfter] If provided, will only return objects created after this datetime
     * @param {Date} [createdBefore] If provided, will only return objects created before this datetime
     * @param {Date} [updatedAfter] If provided, will only return objects modified after this datetime
     * @param {Date} [updatedBefore] If provided, will only return objects modified before this datetime
     * @param {string} [cursor] The pagination cursor value
     * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
     * @param {string} [pageSize] Number of results to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApi
     */
    public async getOpportunities(createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, cursor?: string, expand?: string, pageSize?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return OpportunitiesApiFp(this.configuration).getOpportunities(createdAfter, createdBefore, updatedAfter, updatedBefore, cursor, expand, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get opportunity
     * @param {string} opportunityId 
     * @param {string} [expand] Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApi
     */
    public async getOpportunity(opportunityId: string, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Opportunity>> {
        return OpportunitiesApiFp(this.configuration).getOpportunity(opportunityId, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update opportunity
     * @param {OpportunitiesOpportunityIdBody} body 
     * @param {string} opportunityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApi
     */
    public async updateOpportunity(body: OpportunitiesOpportunityIdBody, opportunityId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2013>> {
        return OpportunitiesApiFp(this.configuration).updateOpportunity(body, opportunityId, options).then((request) => request(this.axios, this.basePath));
    }
}
