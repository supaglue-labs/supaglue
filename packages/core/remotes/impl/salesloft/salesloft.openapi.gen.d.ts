/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/v2/account_stages.json": {
    /**
     * List account stages
     * @description Fetches multiple account stage records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of account stages to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Key to sort on, must be one of: created_at, updated_at, order. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["AccountStage"][];
          };
        };
      };
    };
  };
  "/v2/account_stages/{id}.json": {
    /**
     * Fetch an account stage
     * @description Fetches an account stage, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Account Stage ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["AccountStage"];
          };
        };
      };
    };
  };
  "/v2/account_tiers.json": {
    /**
     * List Account Tiers
     * @description Fetches multiple account tier records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of Account Tiers to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Filters Account Tiers by name. Multiple names can be applied */
          name?: string[];
          /** @description Key to sort on, must be one of: created_at, updated_at, order. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["AccountTier"][];
          };
        };
      };
    };
  };
  "/v2/account_tiers/{id}.json": {
    /**
     * Fetch an account tier
     * @description Fetches an account tier, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Account Tier ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["AccountTier"];
          };
        };
      };
    };
  };
  "/v2/account_upserts.json": {
    /**
     * Upsert an account
     * @description Upserts an account record. The upsert_key dictates how the upsert will be performed. The create and update behavior
     * is exactly the same as the individual create and update endpoints.
     */
    post: {
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description ID of the Account Tier for this Account */
            account_tier_id?: number;
            /** @description City */
            city?: string;
            /** @description ID of the CompanyStage assigned to this Account */
            company_stage_id?: number;
            /** @description Type of the Account's company */
            company_type?: string;
            /** @description Conversational name of the Account */
            conversational_name?: string;
            /** @description Country */
            country?: string;
            /**
             * @description Requires Salesforce.
             *
             * ID of the person in your external CRM. You must provide a crm_id_type if this is included.
             *
             * Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either an Account (001) object. The type will be validated using the 18 character ID.
             *
             * This field can only be used if your application or API key has the "account:set_crm_id" scope.
             */
            crm_id?: string;
            /** @description The CRM that the provided crm_id is for. Must be one of: salesforce */
            crm_id_type?: string;
            /** @description Custom fields are defined by the user's team. Only fields with values are presented in the API. */
            custom_fields?: Record<string, never>[];
            /** @description Description */
            description?: string;
            /** @description Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications */
            do_not_contact?: boolean;
            /** @description Website domain, not a fully qualified URI */
            domain: string;
            /** @description Date or year of founding */
            founded?: string;
            /**
             * @description ID of the account to update. Used if the upsert_key=id. When id and another upsert_key are provided,
             * the request will fail if the upsert record id and id parameter don't match.
             */
            id?: number;
            /** @description Industry */
            industry?: string;
            /** @description Full LinkedIn url */
            linkedin_url?: string;
            /** @description Time locale */
            locale?: string;
            /** @description Account Full Name */
            name: string;
            /** @description ID of the User that owns this Account */
            owner_id?: number;
            /** @description Phone number without formatting */
            phone?: string;
            /** @description Postal code */
            postal_code?: string;
            /** @description Estimated revenue range */
            revenue_range?: string;
            /** @description Estimated number of people in employment */
            size?: string;
            /** @description State */
            state?: string;
            /** @description Street name and number */
            street?: string;
            /** @description All tags applied to this Account */
            tags?: string[];
            /** @description Twitter handle, with @ */
            twitter_handle?: string;
            /**
             * @description Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail.
             * The request will also fail if there are multiple records matched by the upsert field.
             *
             * If upsert_key is not provided, this endpoint will not update an existing record.
             *
             * Valid options are: id, crm_id, domain. If crm_id is provided, then a valid crm_id_type must be provided, as documented
             * for the account create and update endpoints.
             */
            upsert_key?: string;
            /** @description Website */
            website?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["AccountUpsert"];
          };
        };
      };
    };
  };
  "/v2/accounts.json": {
    /**
     * List accounts
     * @description Fetches multiple account records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of accounts to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Filters accounts by crm_id. Multiple crm ids can be applied */
          crm_id?: string[];
          /** @description Filters accounts by the tags applied to the account. Multiple tags can be applied */
          tag?: string[];
          /** @description Filters accounts by the tag id's applied to the account. Multiple tag id's can be applied */
          tag_id?: number[];
          /**
           * @description Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          created_at?: string[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Domain of the accounts to fetch. Domains are unique and lowercase */
          domain?: string;
          /** @description Filters accounts by website. Multiple websites can be applied. An additional value of "_is_null" can be passed to filter accounts that do not have a website. */
          website?: string[];
          /** @description Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than "true" or "false" is passed. */
          archived?: boolean;
          /** @description Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched. */
          name?: string[];
          /** @description Filters accounts by account_stage_id. Multiple account_stage_ids can be applied. An additional value of "_is_null" can be passed to filter accounts that do not have account_stage_id */
          account_stage_id?: number[];
          /** @description Filters accounts by account_tier_id. Multiple account tier ids can be applied */
          account_tier_id?: number[];
          /** @description Filters accounts by owner_id. Multiple owner_ids can be applied. An additional value of "_is_null" can be passed to filter accounts that are unowned */
          owner_id?: string[];
          /** @description Filters accounts by whether the owner is active or not. */
          owner_is_active?: boolean;
          /**
           * @description Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
           * Additional values of "_is_null" or "_is_not_null" can be passed to filter records that either have no timestamp value or any timestamp value.
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          last_contacted?: Record<string, never>;
          /** @description Filters by accounts matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/accounts?custom_fields[custom_field_name]=custom_field_value */
          custom_fields?: Record<string, never>;
          /** @description Filters accounts by industry by exact match. Supports partial matching */
          industry?: string[];
          /** @description Filters accounts by country by exact match. Supports partial matching */
          country?: string[];
          /** @description Filters accounts by state by exact match. Supports partial matching */
          state?: string[];
          /** @description Filters accounts by city by exact match. Supports partial matching */
          city?: string[];
          /** @description Filters accounts by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of "_is_null" can be passed to filter accounts that are unowned. A "_not_in" modifier can be used to exclude specific owner_crm_ids. Example: v2/accounts?owner_crm_id[_not_in]=id */
          owner_crm_id?: string[];
          /** @description Filters accounts by locale. Multiple locales are allowed */
          locales?: string[];
          /** @description Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values. Example: v2/accounts?user_relationships[name]=value */
          user_relationships?: Record<string, never>;
          /** @description Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_stage_name, account_tier, account_tier_name, name, counts_people. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Account"][];
          };
        };
      };
    };
    /**
     * Create an account
     * @description Creates an account.
     *
     * "domain" must be unique on the current team.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description ID of the Account Tier for this Account */
            account_tier_id?: number;
            /** @description City */
            city?: string;
            /** @description ID of the CompanyStage assigned to this Account */
            company_stage_id?: number;
            /** @description Type of the Account's company */
            company_type?: string;
            /** @description Conversational name of the Account */
            conversational_name?: string;
            /** @description Country */
            country?: string;
            /**
             * @description Requires Salesforce.
             *
             * ID of the person in your external CRM. You must provide a crm_id_type if this is included.
             *
             * Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either an Account (001) object. The type will be validated using the 18 character ID.
             *
             * This field can only be used if your application or API key has the "account:set_crm_id" scope.
             */
            crm_id?: string;
            /** @description The CRM that the provided crm_id is for. Must be one of: salesforce */
            crm_id_type?: string;
            /** @description Custom fields are defined by the user's team. Only fields with values are presented in the API. */
            custom_fields?: Record<string, never>[];
            /** @description Description */
            description?: string;
            /** @description Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications */
            do_not_contact?: boolean;
            /** @description Website domain, not a fully qualified URI */
            domain: string;
            /** @description Date or year of founding */
            founded?: string;
            /** @description Industry */
            industry?: string;
            /** @description Full LinkedIn url */
            linkedin_url?: string;
            /** @description Time locale */
            locale?: string;
            /** @description Account Full Name */
            name: string;
            /** @description ID of the User that owns this Account */
            owner_id?: number;
            /** @description Phone number without formatting */
            phone?: string;
            /** @description Postal code */
            postal_code?: string;
            /** @description Estimated revenue range */
            revenue_range?: string;
            /** @description Estimated number of people in employment */
            size?: string;
            /** @description State */
            state?: string;
            /** @description Street name and number */
            street?: string;
            /** @description All tags applied to this Account */
            tags?: string[];
            /** @description Twitter handle, with @ */
            twitter_handle?: string;
            /** @description Website */
            website?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Account"];
          };
        };
      };
    };
  };
  "/v2/accounts/{id}.json": {
    /**
     * Fetch an account
     * @description Fetches an account, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Account ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Account"];
          };
        };
      };
    };
    /**
     * Update an existing Account
     * @description Updates an account.
     *
     * "domain" must be unique on the current team.
     */
    put: {
      parameters: {
        path: {
          /** @description Account ID */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description ID of the Account Tier for this Account */
            account_tier_id?: number;
            /** @description Whether this Account should be archived or not. Setting this to true sets archived_at to the current time if it's not already set. Setting this to false will set archived_at to null */
            archived?: boolean;
            /** @description City */
            city?: string;
            /** @description ID of the CompanyStage assigned to this Account */
            company_stage_id?: number;
            /** @description Type of the Account's company */
            company_type?: string;
            /** @description Conversational name of the Account */
            conversational_name?: string;
            /** @description Country */
            country?: string;
            /**
             * @description Requires Salesforce.
             *
             * ID of the person in your external CRM. You must provide a crm_id_type if this is included.
             *
             * Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either an Account (001) object. The type will be validated using the 18 character ID.
             *
             * This field can only be used if your application or API key has the "account:set_crm_id" scope.
             */
            crm_id?: string;
            /** @description The CRM that the provided crm_id is for. Must be one of: salesforce */
            crm_id_type?: string;
            /** @description Custom fields are defined by the user's team. Only fields with values are presented in the API. */
            custom_fields?: Record<string, never>[];
            /** @description Description */
            description?: string;
            /** @description Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications */
            do_not_contact?: boolean;
            /** @description Website domain, not a fully qualified URI */
            domain: string;
            /** @description Date or year of founding */
            founded?: string;
            /** @description Industry */
            industry?: string;
            /** @description Full LinkedIn url */
            linkedin_url?: string;
            /** @description Time locale */
            locale?: string;
            /** @description Account Full Name */
            name: string;
            /** @description ID of the User that owns this Account */
            owner_id?: number;
            /** @description Phone number without formatting */
            phone?: string;
            /** @description Postal code */
            postal_code?: string;
            /** @description Estimated revenue range */
            revenue_range?: string;
            /** @description Estimated number of people in employment */
            size?: string;
            /** @description State */
            state?: string;
            /** @description Street name and number */
            street?: string;
            /** @description All tags applied to this Account */
            tags?: string[];
            /** @description Twitter handle, with @ */
            twitter_handle?: string;
            /** @description Website */
            website?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Account"];
          };
        };
      };
    };
    /**
     * Delete an account
     * @description Deletes an account. This operation is not reversible without contacting support.
     * This operation can be called multiple times successfully.
     *
     * Deleting an account will remove all connected people from that account.
     */
    delete: {
      parameters: {
        path: {
          /** @description Account ID */
          id: string;
        };
      };
      responses: {
        /** @description The Account has been deleted successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/action_details/call_instructions.json": {
    /**
     * List call instructions
     * @description Fetches multiple call instruction records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of call instructions to fetch. */
          ids?: number[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CallInstruction"][];
          };
        };
      };
    };
  };
  "/v2/action_details/call_instructions/{id}.json": {
    /**
     * Fetch a call instructions
     * @description Fetches a call instruction, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Call instructions ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CallInstruction"];
          };
        };
      };
    };
  };
  "/v2/actions.json": {
    /**
     * List actions
     * @description Fetches multiple action records. The records can be filtered, paged, and sorted according to
     * the respective parameters. Only actions that are currently "in_progess" will be returned by
     * this endpoint.
     *
     * If the requester is not an admin, this endpoint will only return actions belonging to the requester.
     * If the request is an admin, this endpoint will return actions for the entire team. Additionaly, an admin
     * may use the user_guid parameter to request actions that belong to specific users on the team.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of actions to fetch. */
          ids?: number[];
          /** @description Fetch actions by step ID */
          step_id?: number;
          /** @description Filter actions by type */
          type?: string;
          /**
           * @description Equality filters that are applied to the due_on field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          due_on?: string[];
          /** @description Filters actions by the user's guid. Multiple user guids can be applied. The user must be a team admin to filter other users' actions */
          user_guid?: string[];
          /** @description Filters actions by person_id. Multiple person ids can be applied */
          person_id?: number[];
          /** @description Filters actions by cadence_id. Multiple cadence ids can be applied */
          cadence_id?: number[];
          /** @description Filters actions by multitouch_group_id. Multiple multitouch group ids can be applied */
          multitouch_group_id?: number[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Action"][];
          };
        };
      };
    };
  };
  "/v2/actions/{id}.json": {
    /**
     * Fetch an action
     * @description Fetches an action, by ID only.
     * This endpoint will only return actions that are in_progress or pending_activity.
     * Once an action is complete, the request for that action will return a 404 status code.
     */
    get: {
      parameters: {
        path: {
          /** @description Action ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Action"];
          };
        };
      };
    };
  };
  "/v2/activities.json": {
    /**
     * Create an activity
     * @description Creates an activity. An activity will mark the associated action as completed. Currently,
     * only certain action types can have an activity explicitly created for them.
     */
    post: {
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /**
             * @description Action that is being completed. This will validate that the action is still
             * valid before completed it. The same action can never be successfully passed twice to this endpoint.
             * The action must have a type of 'integration'.
             */
            action_id?: number;
            /**
             * @description Task that is being completed. This will validate that the task is still
             * valid before completed it. The same action can never be successfully passed twice to this endpoint.
             * The task must have a type of 'integration'.
             */
            task_id?: number;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Activity"];
          };
        };
      };
    };
  };
  "/v2/activities/calls.json": {
    /**
     * List calls
     * @description Fetches multiple call records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of calls to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /**
           * @description Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          created_at?: string[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Filters list to only include guids */
          user_guid?: string[];
          /** @description Filters calls by person_id. Multiple person ids can be applied */
          person_id?: number[];
          /** @description Filters calls by sentiment. Sentiment matches are exact and case sensitive. Multiple sentiments are allowed. */
          sentiment?: string[];
          /** @description Filters calls by disposition. Disposition matches are exact and case sensitive. Multiple dispositions are allowed. */
          disposition?: string[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Call"][];
          };
        };
      };
    };
    /**
     * Create a call
     * @description Creates a call. The parameters of this endpoint can be used to create an action
     * and ensure that the CRM Task is mapped correctly.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /**
             * @description Action that this call is being logged for. This will validate that the action is still
             * valid before completing it. The same action can never be successfully passed twice to this endpoint. The
             * action must have a type of 'phone'.
             */
            action_id?: number;
            /**
             * @description CRM specific parameters. Some parameters are required on a per-team basis. Consume the
             * CrmActivityFields endpoint to receive a list of valid parameters. The "field" property
             * is passed as the key of this object, and the value of this object is the value that you
             * would like to set.
             *
             * If CrmActivityField has a non-null value, then that value must be submitted, or excluded
             * from API calls, as these values are automatically applied.
             */
            crm_params?: Record<string, never>;
            /** @description The disposition of the call. Can be required on a per-team basis. Must be present in the disposition list. */
            disposition?: string;
            /** @description The length of the call, in seconds */
            duration?: number;
            /**
             * @description CallDataRecord associations that will become linked to the created call. It is possible to pass
             * multiple CallDataRecord ids in this field; this can be used to represent multiple phone calls
             * that made up a single call.
             *
             * Any call data record that is used must not already be linked to a call. It is not possible
             * to link a call data record to multiple calls, and it is not possible to re-assign a call data
             * record to a different call.
             */
            linked_call_data_record_ids?: number[];
            /** @description Notes to log for the call. This is similar to the notes endpoint, but ensures that the notes get synced to the user's CRM */
            notes?: string;
            /** @description The ID of the person whom this call will be logged for */
            person_id: number;
            /** @description The sentiment of the call. Can be required on a per-team basis. Must be present in the sentiment list. */
            sentiment?: string;
            /** @description The phone number that was called */
            to?: string;
            /** @description Guid of the user whom this call should be logged for. Defaults to the authenticated user. Only team admins can pass another user's guid */
            user_guid?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Call"];
          };
        };
      };
    };
  };
  "/v2/activities/calls/{id}.json": {
    /**
     * Fetch a call
     * @description Fetches a call, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Call ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Call"];
          };
        };
      };
    };
  };
  "/v2/activities/emails.json": {
    /**
     * List emails
     * @description Fetches multiple email records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of emails to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Filters emails by whether they have bounced or not */
          bounced?: boolean;
          /** @description Filters emails by crm_activity_id. Multiple crm activty ids can be applied */
          crm_activity_id?: number[];
          /** @description Filters emails by action_id. Multiple action ids can be applied */
          action_id?: number[];
          /** @description Filters emails by user_id. Multiple User ids can be applied */
          user_id?: number[];
          /** @description Filters emails by status. Multiple status can be applied, possible values are sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external */
          status?: string[];
          /** @description Filters emails by cadence. Multiple cadence ids can be applied */
          cadence_id?: number[];
          /** @description Filters emails by step. Multiple step ids can be applied */
          step_id?: number[];
          /** @description Filters emails by one-off only */
          one_off?: boolean;
          /** @description Specify explicit scoped fields desired on the Email Resource. */
          scoped_fields?: string[];
          /** @description Filters emails by person_id. Multiple person ids can be applied */
          person_id?: number[];
          /** @description Filters emails by recipient email address. Multiple emails can be applied. */
          email_addresses?: string[];
          /** @description Filters emails by personalization score */
          personalization?: string[];
          /**
           * @description Equality filters that are applied to the sent_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          sent_at?: string[];
          /** @description Key to sort on, must be one of: updated_at, send_time. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Email"][];
          };
        };
      };
    };
  };
  "/v2/activities/emails/{id}.json": {
    /**
     * Fetch an email
     * @description Fetches an email, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Email ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Email"];
          };
        };
      };
    };
  };
  "/v2/activity_histories": {
    /**
     * List Past Activities
     * @description Fetches all of the customer's past activities for your application. Returns all the Activities that are found on the Salesloft Activity Feed. <a href="/activity-history.html" target="_blank" rel="noopener noreferrer">Visit here for more details</a>.
     */
    get: {
      parameters: {
        query?: {
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Key to sort on, must be one of: occurred_at, updated_at. Defaults to occurred_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description Filter by the type of activity. Must be one of: added_to_cadence, completed_action, call, requested_email, sent_email, received_email, email_reply, note, success, dnc_event, residency_change, meeting, meeting_held, message_conversation, task, voicemail, opportunity_stage_change, opportunity_amount_change, opportunity_close_date_change. Can be provided as an array, or as an object of type[resource_type][]=type */
          type?: string;
          /** @description For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filter by the {resource_type, resource_id} of activity. Provide this in the format resource[]=person,1234 */
          _resource?: string;
          /**
           * @description Equality filters that are applied to the occurred_at field. A single filter can be used by itself or combined with other filters to create a range.
           * ---CUSTOM---
           * {"keys":[{"description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gt","type":"iso8601 string"},{"description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gte","type":"iso8601 string"},{"description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lt","type":"iso8601 string"},{"description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lte","type":"iso8601 string"}],"type":"object"}
           */
          occurred_at?: Record<string, never>;
          /** @description Filter by the pinned status of activity. Must be 'true' or 'false' */
          pinned?: boolean;
          /** @description Filter by the resource type. A resource is a Salesloft object that the activity is attributed to. A valid resource types must be one of person, account, crm_opportunity. Can be provided as an array */
          resource_type?: string;
          /** @description Filter by the resource id. "resource_type" filter is required to use this filter. */
          resource_id?: string[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           * ---CUSTOM---
           * {"keys":[{"description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gt","type":"iso8601 string"},{"description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gte","type":"iso8601 string"},{"description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lt","type":"iso8601 string"},{"description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lte","type":"iso8601 string"}],"type":"object"}
           */
          updated_at?: Record<string, never>;
          /** @description Filter activities by a user's guid. */
          user_guid?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["ActivityHistory"];
          };
        };
      };
    };
  };
  "/v2/bulk_jobs": {
    /**
     * List bulk jobs
     * @description Fetches multiple bulk job records. The records can be filtered, paged, and sorted according to the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description The state of the bulk job. Accepts multiple states. Each state must be one of: open, executing, done */
          state?: string[];
          /** @description Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123) */
          id?: Record<string, never>;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["BulkJob"][];
          };
        };
      };
    };
    /**
     * Create a bulk job
     * @description Creates a bulk job. The type of the bulk job must be included when created.
     *
     * For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href="/bulk.html" target="_blank" rel="noopener noreferrer">bulk job details page</a>.
     */
    post: {
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Name for your bulk job */
            name?: string;
            /** @description Type of bulk job. Must be a valid type. Follow link to the bulk job details page above to view supported types. */
            type: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["BulkJob"];
          };
        };
      };
    };
  };
  "/v2/bulk_jobs/{bulk_jobs_id}/job_data": {
    /**
     * List job data for a bulk job
     * @description Fetches multiple job data records for a given bulk job. Pagination is not supported, but cursor based polling is via use of the `id[gt]` filter. Pass the last id seen (i.e. `id[gt]=1234`) in order to get the next batch of records.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying */
          status?: string[];
          /** @description Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123) */
          id?: Record<string, never>;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
        };
        path: {
          /** @description The id for the bulk job to which the job data relates */
          bulk_jobs_id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["BulkJobResult"][];
          };
        };
      };
    };
    /**
     * Create job data for a bulk job
     * @description Upload job data for the specified bulk job. Upload an array of objects, where element contains the parameters necessary to execute the individual calls. Each call to this endpoint can handle up to 5,000 records at a time. There is no limit to how many times you can create job data for a given bulk job.
     *
     * For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href="/bulk.html" target="_blank" rel="noopener noreferrer">bulk job details page</a>.
     */
    post: {
      parameters: {
        path: {
          /** @description The id for the bulk job to which the job data relates */
          bulk_jobs_id: number;
        };
      };
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Array of objects containing parameters to be used to execute an instance of each. Array must be 5,000 records or less. */
            data: string[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["JobDataCreationResult"];
          };
        };
      };
    };
  };
  "/v2/bulk_jobs/{bulk_jobs_id}/results": {
    /**
     * List job data for a completed bulk job.
     * @description Fetches multiple job data records for a completed bulk job. Note that until a bulk job's state is set to `done` the returned `data` will be an empty array. Pagination is not supported, but cursor based polling is via use of the `id[gt]` filter. Pass the last id seen (i.e. `id[gt]=1234`) in order to get the next batch of records.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying */
          status?: string[];
          /** @description Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123) */
          id?: Record<string, never>;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
        };
        path: {
          /** @description The id for the Bulk Job */
          bulk_jobs_id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["BulkJobResult"][];
          };
        };
      };
    };
  };
  "/v2/bulk_jobs/{id}": {
    /**
     * Fetch a bulk job
     * @description Fetches a bulk job, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description The id for the Bulk Job */
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["BulkJob"];
          };
        };
      };
    };
    /**
     * Update a bulk job
     * @description Updates a bulk job's name and / or marks a bulk job as 'ready_to_execute'.  May only be updated if the bulk job is still in an "open" state.
     *
     * For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href="/bulk.html" target="_blank" rel="noopener noreferrer">bulk job details page</a>.
     */
    put: {
      parameters: {
        path: {
          /** @description The id for the bulk job to which the job data relates */
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Name for your bulk job */
            name?: string;
            /** @description Whether the job is ready to be executed. Must be true or false. */
            ready_to_execute?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["BulkJob"];
          };
        };
      };
    };
  };
  "/v2/cadence_memberships.json": {
    /**
     * List cadence memberships
     * @description Fetches multiple cadence membership records. The records can be filtered, paged, and sorted according to
     * the respective parameters. A cadence membership is the association between a person and their current and
     * historical time on a cadence. Cadence membership records are mutable and change over time. If a person is
     * added to a cadence and re-added to the same cadence in the future, there is a single membership record.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of cadence memberships to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description ID of the person to find cadence memberships for */
          person_id?: number;
          /** @description ID of the cadence to find cadence memberships for */
          cadence_id?: number;
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description If true, return only cadence memberships for people currently on cadences.  If false, return cadence memberships for people who have been removed from or have completed a cadence. */
          currently_on_cadence?: boolean;
          /** @description Key to sort on, must be one of: added_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CadenceMembership"][];
          };
        };
      };
    };
    /**
     * Create a cadence membership
     * @description Adds a person to a cadence. person_id and cadence_id are required, and must be visible to the authenticated user. user_id will
     * default to the authenticated user, but can be set to any visible user on the authenticated team.
     *
     * A person cannot be added to a cadence on behalf of a teammate unless the cadence is a team cadence, the cadence is owned by
     * the teammate, or the teammate has the Personal Cadence Admin permission.
     */
    post: {
      parameters: {
        query: {
          /** @description ID of the person to create a cadence membership for */
          person_id: number;
          /** @description ID of the cadence to create a cadence membership for */
          cadence_id: number;
          /** @description ID of the user to create a cadence membership for. The associated cadence must be owned by the user, or it must be a team cadence */
          user_id?: number;
          /** @description ID of the step on which the person should start the cadence. Start on first step is the default behavior without this parameter. */
          step_id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CadenceMembership"];
          };
        };
      };
    };
  };
  "/v2/cadence_memberships/{id}.json": {
    /**
     * Fetch a cadence membership
     * @description Fetches a cadence membership, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description CadenceMembership ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CadenceMembership"];
          };
        };
      };
    };
    /**
     * Delete a cadence membership
     * @description Cadence Membership
     */
    delete: {
      parameters: {
        path: {
          /** @description CadenceMembership ID */
          id: string;
        };
      };
      responses: {
        /** @description The person has been removed from the cadence successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/cadences.json": {
    /**
     * List cadences
     * @description Fetches multiple cadence records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of cadences to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Filters cadences by whether they are a team cadence or not */
          team_cadence?: boolean;
          /** @description Filters cadences by whether they are shared */
          shared?: boolean;
          /** @description Filters cadences by the owner's guid. Multiple owner guids can be applied */
          owned_by_guid?: string[];
          /** @description Filters cadences by whether they are able to have people added to them */
          people_addable?: boolean;
          /** @description Filters cadences by name */
          name?: string[];
          /** @description Filters by group ids. Also supports group ids passed in as a JSON array string */
          group_ids?: string;
          /** @description Filters by whether the Cadences have been archived. Excluding this field will result in both archived and unarchived Cadences to return. */
          archived?: boolean;
          /** @description Key to sort on, must be one of: created_at, updated_at, name. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Cadence"][];
          };
        };
      };
    };
  };
  "/v2/cadences/{id}.json": {
    /**
     * Fetch a cadence
     * @description Fetches a cadence, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Cadence ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Cadence"];
          };
        };
      };
    };
  };
  "/v2/calendar/events": {
    /**
     * List calendar events
     * @description Returns all calendar events, paginated and filtered by the date.
     */
    get: {
      parameters: {
        query?: {
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Key to sort on, must be one of: start_time. Defaults to start_time */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /**
           * @description Lower bound (inclusive) for a calendar event's end time to filter by.
           * Must be in ISO 8601 format.
           *
           * Example: `2022-02-14T10:12:59+00:00`.
           */
          start_time?: string;
          /**
           * @description Upper bound (exclusive) for a calendar event's start time to filter by.
           * Must be in ISO 8601 format.
           *
           * Example: `2022-02-14T10:12:59+00:00`.
           */
          end_time?: string;
          /** @description user_guid of the user who created or included as a guest to the event. */
          user_guid?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CalendarEvent"][];
          };
        };
      };
    };
  };
  "/v2/calendar/events/upsert": {
    /**
     * Upsert a calendar event
     * @description   Upserts a calendar event object.
     *   Upsert key is a combination of `id` and `i_cal_uid` scoped to the given `calendar_id`.
     *   Bulk operations:
     *   This endpoint is used for bulk operations, see https://developers.salesloft.com/bulk.html for integration instructions.
     *   Use `calendar/events/upsert` as an event type, and this spec as a data spec.
     *   This endpoint should be used directly for the time sensitive calendar event updates.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Should be set to `true` for all day calendar events. */
            all_day?: boolean;
            /**
             * @description   List of attendees of the calendar event.
             *   Example:
             *   ```
             *     {
             *       ...
             *       "attendees": [
             *         {
             *           "name": "Alice",
             *           "email": "alice@example.com",
             *           "status": "accepted",
             *           "organizer": true
             *         },
             *         {
             *           "name": "Bob",
             *           "email": "bob@example.com",
             *           "status": "needsAction",
             *           "organizer": false
             *         }
             *       ]
             *     }
             *   ```
             *   `name`: full name of the attendee
             *
             *   `email`: email address of the attendee
             *
             *   `status`: one of the following - needsAction, accepted, tentative, declined
             *
             *   `organizer`: whether the attendee is the organizer of the calendar event
             */
            attendees?: Record<string, never>;
            /**
             * @description   Calendar ID of the calendar event owner.
             *   For the External Calendar connection use `external_{salesloft_user_guid}` format.
             *   Example: `external_00210d1a-df8a-459f-af75-89b953b618b0`.
             */
            calendar_id: string;
            /**
             * @description   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
             *   Example: `2022-02-14T10:12:59+00:00`.
             */
            canceled_at?: string;
            /** @description Description of the calendar event */
            description?: string;
            /**
             * Format: date
             * @description   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
             *   Example: `2022-02-14T10:12:59+00:00`.
             */
            end_time: string;
            /**
             * @description   icalUID of the calendar event. Unique identifier for a calendar event across calendars.
             *
             *   Used as an upsert key.
             */
            i_cal_uid: string;
            /**
             * @description   Id of the calendar event, different for each occurrence in a recurring series.
             *
             *   Used as an upsert key.
             */
            id: string;
            /** @description Location of the calendar event as free-form text. */
            location?: string;
            /** @description   Email address of the organizer */
            organizer?: string;
            /** @description Should be set to `true` if this is one of recurring series calendar event. */
            recurring?: boolean;
            /**
             * Format: date
             * @description   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
             *   Example: `2022-02-14T10:12:59+00:00`.
             */
            start_time: string;
            /**
             * @description   Status of the calendar event. Depending on the status, the calendar event will or will not impact user's availability.
             *   Possible values: `confirmed`, `tentative`, `cancelled`.
             *   Example: `confirmed`.
             */
            status?: string;
            /** @description Title of the calendar event */
            title?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        201: {
          content: {
            "*/*": components["schemas"]["CalendarEvent"];
          };
        };
      };
    };
  };
  "/v2/call_data_records.json": {
    /**
     * List call data records
     * @description Fetches multiple call data records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     *
     * Call data records are records of all inbound and outbound calls through Salesloft. A call data record may
     * be associated with a call, but does not have to be.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of call data records to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Return only call data records which have or do not have a call logged for them */
          has_call?: boolean;
          /**
           * @description Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          created_at?: string[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Filters list to only include guids */
          user_guid?: string[];
          /** @description Filters list by person_id. Multiple person ids can be applied */
          person_id?: number[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CallDataRecord"][];
          };
        };
      };
    };
  };
  "/v2/call_data_records/{id}.json": {
    /**
     * Fetch a call data record
     * @description Fetches a call data record, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description CallDataRecord ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CallDataRecord"];
          };
        };
      };
    };
  };
  "/v2/call_dispositions.json": {
    /**
     * List call dispositions
     * @description Fetches multiple call disposition records. The records can be sorted according to
     * the respective parameters. Call dispositions must be configured in application. This will
     * change in the future, but please contact us if you have a pressing use case.
     */
    get: {
      parameters: {
        query?: {
          /** @description Key to sort on, must be one of: name, updated_at. Defaults to name */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to ASC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CallDisposition"][];
          };
        };
      };
    };
  };
  "/v2/call_sentiments.json": {
    /**
     * List call sentiments
     * @description Fetches multiple call sentiment records. The records can be sorted according to
     * the respective parameters. Call sentiments must be configured in application. This will
     * change in the future, but please contact us if you have a pressing use case.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters call sentiments by name */
          name?: string;
          /** @description Key to sort on, must be one of: name, updated_at. Defaults to name */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to ASC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CallSentiment"][];
          };
        };
      };
    };
  };
  "/v2/conversations/calls": {
    /**
     * Create Conversations Call
     * @description Enqueue a Conversations Call for processing
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Timestamp for when the call started. If not provided, will default to the time the request was received */
            call_created_at?: string;
            /** @description Call direction */
            direction?: string;
            /** @description Duration of call in seconds */
            duration: number;
            /** @description Phone number that call was made from */
            from: string;
            /** @description Object containing recording info including the audio file (.mp3, .wav, .ogg, .m4a) */
            recording: Record<string, never>;
            /** @description  Phone number that was called */
            to: string;
            /** @description Guid of the Salesloft User to assign the call to. If not provided, will default to the user within the authentication token */
            user_guid?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        201: {
          content: {
            "*/*": components["schemas"]["ConversationsCall"];
          };
        };
      };
    };
  };
  "/v2/crm_activities.json": {
    /**
     * List crm activities
     * @description Fetches multiple crm activity records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of crm activities to fetch. */
          ids?: number[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CrmActivity"][];
          };
        };
      };
    };
  };
  "/v2/crm_activities/{id}.json": {
    /**
     * Fetch a crm activity
     * @description Fetches a crm activity, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Crm activity ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CrmActivity"];
          };
        };
      };
    };
  };
  "/v2/crm_activity_fields.json": {
    /**
     * List crm activity fields
     * @description Fetches multiple crm activity field records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description Return only records with this source */
          source?: string;
          /** @description Key to sort on, must be one of: title, updated_at. Defaults to title */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to ASC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CrmActivityField"][];
          };
        };
      };
    };
  };
  "/v2/crm_users.json": {
    /**
     * List crm users
     * @description Crm Users
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of crm users to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Filters crm users by crm_ids */
          crm_id?: string[];
          /** @description Filters crm users by user_ids */
          user_id?: number[];
          /** @description Filters crm users by user guids */
          user_guid?: string[];
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
          /** @description Key to sort on, must be one of: id, updated_at. Defaults to id */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CrmUser"][];
          };
        };
      };
    };
  };
  "/v2/custom_fields.json": {
    /**
     * List custom fields
     * @description Fetches multiple custom field records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of custom fields to fetch. */
          ids?: number[];
          /** @description Type of field to fetch. Value must be one of: person, company, opportunity */
          field_type?: string;
          /** @description Key to sort on, must be one of: created_at, updated_at, name. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CustomField"][];
          };
        };
      };
    };
    /**
     * Create a custom field
     * @description Creates a custom field.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description The field type of the custom field. Value must be one of: person, company, opportunity */
            field_type?: string;
            /** @description The name of the custom field */
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CustomField"];
          };
        };
      };
    };
  };
  "/v2/custom_fields/{id}.json": {
    /**
     * Fetch a custom field
     * @description Fetches a custom field, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Custom Field ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CustomField"];
          };
        };
      };
    };
    /**
     * Update a custom field
     * @description Update a custom field.
     */
    put: {
      parameters: {
        path: {
          /** @description Custom Field ID */
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description The field type of the custom field. Value must be one of: person, company, opportunity */
            field_type?: string;
            /** @description The name of the custom field */
            name?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CustomField"];
          };
        };
      };
    };
    /**
     * Delete a custom field
     * @description Deletes a custom field.
     */
    delete: {
      parameters: {
        path: {
          /** @description Custom Field ID */
          id: string;
        };
      };
      responses: {
        /** @description The Custom Field has been deleted successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/email_template_attachments.json": {
    /**
     * List email template attachments
     * @description Fetches multiple email template attachment records. The records can be filtered and paged according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of email template attachments to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Filters email template attachments by email template IDs */
          email_template_id?: number[];
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["EmailTemplateAttachment"][];
          };
        };
      };
    };
  };
  "/v2/email_templates.json": {
    /**
     * List email templates
     * @description Fetches multiple email template records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of email templates to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Filters email templates by whether they are linked to a team template or not */
          linked_to_team_template?: boolean;
          /** @description Filters email templates by title or subject */
          search?: string;
          /** @description Filters email templates by tags applied to the template by tag ID, not to exceed 100 IDs */
          tag_ids?: number[];
          /** @description Filters email templates by tags applied to the template, not to exceed 100 tags */
          tag?: string[];
          /** @description Filters email templates by current authenticated user */
          filter_by_owner?: boolean;
          /** @description Filters email templates by groups applied to the template by group ID. Not to exceed 500 IDs. Returns templates that are assigned to any of the group ids. */
          group_id?: number[];
          /** @description Filters email templates based on whether or not the template has been used on a cadence */
          include_cadence_templates?: boolean;
          /** @description Filters email templates to include archived templates or not */
          include_archived_templates?: boolean;
          /** @description Filters email templates to those belonging to the cadence. Not to exceed 100 IDs. If a record can't be found, that record won't be returned and your request will be successful */
          cadence_id?: number[];
          /** @description Key to sort on, must be one of: created_at, updated_at, last_used_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["EmailTemplate"][];
          };
        };
      };
    };
  };
  "/v2/email_templates/{id}.json": {
    /**
     * Fetch an email template
     * @description Fetches an email template, by ID only.
     */
    get: {
      parameters: {
        query?: {
          /** @description Optionally will return the templates with the current user's email signature */
          include_signature?: boolean;
        };
        path: {
          /** @description EmailTemplate ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["EmailTemplate"];
          };
        };
      };
    };
  };
  "/v2/external_emails.json": {
    /**
     * Create an External Email
     * @description Creates an external email object.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Email address of mailbox email was sent to */
            mailbox: string;
            /** @description Base64 encoded MIME email content */
            raw: string;
          };
        };
      };
      responses: {
        /** @description Success */
        201: {
          content: {
            "*/*": components["schemas"]["ExternalEmail"];
          };
        };
      };
    };
  };
  "/v2/groups.json": {
    /**
     * List groups
     * @description Fetches multiple group records. The records can be filtered, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of groups to fetch. */
          ids?: number[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Group"][];
          };
        };
      };
    };
  };
  "/v2/groups/{id}.json": {
    /**
     * Fetch a group
     * @description Fetches a group, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Group ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Group"];
          };
        };
      };
    };
  };
  "/v2/imports.json": {
    /**
     * List imports
     * @description Fetches multiple imports.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of imports to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description ID of users to fetch imports for. Using this filter will return an empty array for non-admin users who request other user's imports */
          user_ids?: number[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to created_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Import"][];
          };
        };
      };
    };
    /**
     * Create an import
     * @description Creates an import.
     */
    post: {
      requestBody: components["requestBodies"]["postV2ImportsJson"];
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Import"];
          };
        };
      };
    };
  };
  "/v2/imports/{id}.json": {
    /**
     * Fetch an import
     * @description Fetches an import, by ID only.
     *
     * Admin users can access imports for the entire team, but non-admin users can only access their own imports.
     */
    get: {
      parameters: {
        path: {
          /** @description Import ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Import"];
          };
        };
      };
    };
    /**
     * Update an import
     * @description Updates an import, by ID only.
     *
     * Admin users can access imports for the entire team, but non-admin users can only access their own imports.
     */
    put: {
      parameters: {
        path: {
          /** @description Import ID */
          id: string;
        };
      };
      requestBody: components["requestBodies"]["postV2ImportsJson"];
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Import"];
          };
        };
      };
    };
    /**
     * Delete an import
     * @description Deletes an import, by ID only. The associated people can be deleted as part of the deletion process.
     *
     * Admin users can access imports for the entire team, but non-admin users can only access their own imports.
     */
    delete: {
      parameters: {
        query?: {
          /**
           * @description Whether to delete people on this Import. Possible values are: [not present], all, single.
           *
           * 'single' will delete people who are only present in this Import.
           * 'all' will delete people even if they are present in other Imports.
           * Not specifying this parameter will not delete any people
           */
          undo?: string;
        };
        path: {
          /** @description Import ID */
          id: string;
        };
      };
      responses: {
        /** @description The import has been deleted successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/live_website_tracking_parameters.json": {
    /**
     * Create an Live Website Tracking Parameter
     * @description Creates a Live Website Tracking parameter to identify a person
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description The person to create the LiveWebsiteTrackingParameter for */
            person_id: number;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["LiveWebsiteTrackingParameter"];
          };
        };
      };
    };
  };
  "/v2/me.json": {
    /**
     * Fetch current user
     * @description Authenticated user information. This endpoint does not accept any parameters as it is
     * represents your authenticated user. The "Users" resource provides user information
     * for other users on the team.
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/v2/meetings.json": {
    /**
     * List meetings
     * @description Fetches multiple meeting records. The records can be filtered, paged, and sorted according to the respective parameters.
     * Meetings resource is responsible for events created via the Salesloft platform using calendaring features.
     * These events can relate to cadences, people, and accounts.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of meetings to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Filters meetings by status. Possible values are: pending, booked, failed, retry */
          status?: string;
          /** @description Filters meetings by person_id. Multiple person ids can be applied */
          person_id?: string;
          /** @description Filters meetings by account_id. Multiple account ids can be applied */
          account_id?: string;
          /** @description Filters meetings by person_id. Multiple person ids can be applied */
          person_ids?: number[];
          /** @description Filters meetings by event IDs */
          event_ids?: number[];
          /** @description Filters meetings by UIDs provided by calendar provider */
          i_cal_uids?: string[];
          /** @description Filters meetings by task_id. Multiple task ids can be applied */
          task_ids?: number[];
          /** @description Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects */
          include_meetings_settings?: boolean;
          /**
           * @description Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          start_time?: string[];
          /** @description Filters meetings by user_guid. Multiple user guids can be applied */
          user_guids?: string[];
          /** @description Whether to include deleted events in the result */
          show_deleted?: boolean;
          /** @description Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Meeting"][];
          };
        };
      };
    };
  };
  "/v2/meetings/settings/searches.json": {
    /**
     * List meeting settings
     * @description Fetches multiple meeting setting records. The records can be filtered, paged, and sorted according to the respective parameters.
     */
    post: {
      parameters: {
        query?: {
          /** @description Filters meeting settings by array of user_guids */
          user_guids?: string[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Filters meeting settings by calendar type */
          calendar_type?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["MeetingSetting"][];
          };
        };
        /** @description This endpoint is not available without the following permissions: manage_team */
        403: {
          content: never;
        };
      };
    };
  };
  "/v2/meetings/settings/{id}.json": {
    /**
     * Update a meeting setting
     * @description Updates a meeting setting, by ID only.
     */
    put: {
      parameters: {
        path: {
          /** @description MeetingSetting ID */
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Allow other team members to schedule on you behalf. */
            allow_booking_on_behalf?: boolean;
            /** @description Allow team members to insert available time outside your working hours. */
            allow_booking_overtime?: boolean;
            /** @description Allow team members to double book events on your calendar. */
            allow_event_overlap?: boolean;
            /** @description The number of days out the user allows a prospect to schedule a meeting */
            availability_limit?: number;
            /** @description If Availability Limits have been turned on */
            availability_limit_enabled?: boolean;
            /** @description Default buffer duration in minutes set by a user */
            buffer_time_duration?: number;
            /** @description Calendar type */
            calendar_type?: string;
            /** @description Default meeting length in minutes set by the user */
            default_meeting_length?: number;
            /** @description Default description of the meeting */
            description?: string;
            /** @description Determines if a user enabled Calendar Sync feature */
            enable_calendar_sync?: boolean;
            /** @description Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.) */
            enable_dynamic_location?: boolean;
            /** @description Default location of the meeting */
            location?: string;
            /** @description Determines if the user lost calendar connection */
            primary_calendar_connection_failed?: boolean;
            /** @description ID of the primary calendar */
            primary_calendar_id?: string;
            /** @description Display name of the primary calendar */
            primary_calendar_name?: string;
            /** @description Determines if meetings are scheduled with a 15 minute buffer between them */
            schedule_buffer_enabled?: boolean;
            /** @description The number of hours in advance a user requires someone to a book a meeting with them */
            schedule_delay?: number;
            /** @description Allow team members to see the details of events on your calendar. */
            share_event_detail?: boolean;
            /** @description Time zone for current calendar */
            time_zone?: string;
            /** @description Times available set by a user that can be used to book meetings */
            times_available?: Record<string, never>;
            /** @description Default title of the meeting */
            title?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["MeetingSetting"];
          };
        };
      };
    };
  };
  "/v2/meetings/{id}.json": {
    /**
     * Update a meeting
     * @description Updates a meeting, by ID only.
     */
    put: {
      parameters: {
        path: {
          /** @description Meeting ID */
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Meeting ID from the calendar provider */
            event_id?: string;
            /** @description Meeting unique identifier (iCalUID) */
            i_cal_uid?: string;
            /** @description Whether the meeting is a No Show meeting */
            no_show?: boolean;
            /** @description Status of the meeting creation progress. Possible values are: pending, booked, failed, retry */
            status?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Meeting"];
          };
        };
      };
    };
  };
  "/v2/mime_email_payloads/{id}.json": {
    /**
     * Fetch the MIME content for email
     * @description Fetch the MIME content for email.
     */
    get: {
      parameters: {
        path: {
          /** @description ID of Email */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["MimeEmailPayload"];
          };
        };
      };
    };
  };
  "/v2/notes.json": {
    /**
     * List notes
     * @description Fetches multiple note records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description Case insensitive type of item with which the note is associated.  Value must be one of: person, account */
          associated_with_type?: string;
          /** @description ID of the item with which the note is associated.  The associated_with_type must also be present if this parameter is used */
          associated_with_id?: number;
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description IDs of notes to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Note"][];
          };
        };
      };
    };
    /**
     * Create a note
     * @description Creates a note.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description ID of the item with which the note is associated */
            associated_with_id: number;
            /** @description Case insensitive type of item with which the note is associated.  Value must be one of: person, account */
            associated_with_type: string;
            /** @description ID of the call with which the note is associated. The call cannot already have a note */
            call_id?: number;
            /** @description The content of the note */
            content: string;
            /** @description Boolean indicating if the CRM sync should be skipped.  No syncing will occur if true */
            skip_crm_sync?: boolean;
            /** @description The subject of the note's crm activity, defaults to 'Note' */
            subject?: string;
            /** @description The user to create the note for. Only team admins may create notes on behalf of other users. Defaults to the requesting user */
            user_guid?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Note"];
          };
        };
      };
    };
  };
  "/v2/notes/{id}.json": {
    /**
     * Fetch a note
     * @description Fetches a note, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Note ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Note"];
          };
        };
      };
    };
    /**
     * Update a note
     * @description Updates a note. Any changes to the note or associated records will not reflect in your CRM.
     */
    put: {
      parameters: {
        path: {
          /** @description Note ID */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description ID of the call with which the note is associated. The call cannot already have a note. If the note is associated to a call already, it will become associated to the requested call */
            call_id?: number;
            /** @description The content of the note */
            content: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Person"];
          };
        };
      };
    };
    /**
     * Delete a note
     * @description Deletes a note owned by authorized account.
     * This operation is not reversible without contacting support.
     * This operation can be called multiple times successfully.
     */
    delete: {
      parameters: {
        path: {
          /** @description Note ID */
          id: string;
        };
      };
      responses: {
        /** @description The Note has been deleted successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/ongoing_actions.json": {
    /**
     * Create an ongoing action
     * @description Creates an ongoing action. An ongoing action is an action that is not yet completed,
     * but progress has been made towards the completion. The user should not need to do
     * anything for an ongoing action to be completed. An ongoing action can be later completed
     * by creating an activity.
     *
     * Ongoing actions are marked as status=pending_activity.
     */
    post: {
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /**
             * @description Action that is being marked ongoing. This will validate that the action is still
             * valid before modifying it. Ongoing actions can not be marked ongoing.
             */
            action_id?: number;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Action"];
          };
        };
      };
    };
  };
  "/v2/pending_emails.json": {
    /**
     * Fetches a list of emails ready to be sent by an external email service. Only emails sent with an External Email Client will appear here.
     * @description Fetches a list of emails ready to be sent by an external email service.
     */
    get: {
      parameters: {
        query?: {
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PendingEmail"][];
          };
        };
      };
    };
  };
  "/v2/pending_emails/{id}.json": {
    /**
     * Updates the status of an email sent by an External Email Client
     * @description Updates the status of an email sent by an External Email Client. Does not affect lofted emails.
     */
    put: {
      parameters: {
        path: {
          /** @description Email ID */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description The error message indicating why the email failed to send */
            error_message?: string;
            /** @description The message id of the email that was sent */
            message_id: string;
            /** @description The time that the email was actually sent in iso8601 format */
            sent_at?: string;
            /** @description Delivery status of the email.  Valid statuses are 'sent' and 'failed' */
            status: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PendingEmail"];
          };
        };
      };
    };
  };
  "/v2/people.json": {
    /**
     * List people
     * @description Fetches multiple person records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of people to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Filters people by email address. Multiple emails can be applied. An additional value of "_is_null" can be passed to filter people that do not have an email address. */
          email_addresses?: string[];
          /** @description Filters people by the owner's guid. Multiple owner guids can be applied */
          owned_by_guid?: string[];
          /** @description Includes people that have a given person_stage. Multiple person stage ids can be applied. An additional value of "_is_null" can be passed to filter people that do not have a stage set. */
          person_stage_id?: number[];
          /** @description Filters people by crm_id. Multiple crm ids can be applied */
          crm_id?: string[];
          /** @description Filters people by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of "_is_null" can be passed to filter people that are unowned. A "_not_in" modifier can be used to exclude specific owner_crm_ids. Example: v2/people?owner_crm_id[_not_in]=id */
          owner_crm_id?: string[];
          /** @description Includes people that have a given do_not_contact property */
          do_not_contact?: boolean;
          /** @description Includes people that can be emailed given do_not_contact and contact_restrictions property */
          can_email?: boolean;
          /** @description Includes people that can be called given do_not_contact and contact_restrictions property */
          can_call?: boolean;
          /** @description Includes people that can be sent a text message given do_not_contact and contact_restrictions property */
          can_text?: boolean;
          /** @description Filters people by the account they are linked to. Multiple account ids can be applied */
          account_id?: number[];
          /** @description Filters by people matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/people?custom_fields[custom_field_name]=custom_field_value */
          custom_fields?: Record<string, never>;
          /** @description Filters people that were imported by the given import ids. Multiple import ids can be applied. An additional value of "_is_null" can be passed to filter people that were not imported. */
          import_id?: number[];
          /** @description Filters people by job seniorty. Multiple job seniorities can be applied. An additional value of "_is_null" can be passed to filter people do not have a job_seniority. */
          job_seniority?: string[];
          /** @description Filters people by the tag ids applied to the person. Multiple tag ids can be applied. */
          tag_id?: number[];
          /** @description Filters people by whether the owner is active or not. */
          owner_is_active?: boolean;
          /** @description Filters people by the cadence that they are currently on. Multiple cadence_ids can be applied. An additional value of "_is_null" can be passed to filter people that are not on a cadence. */
          cadence_id?: number[];
          /** @description Filters people who have been starred by the user guids given. */
          starred_by_guid?: string[];
          /** @description Filters people by whether or not they have replied to an email or not. */
          replied?: boolean;
          /** @description Filters people by whether an email that was sent to them bounced or not. */
          bounced?: boolean;
          /** @description Filters people by whether or not they have been marked as a success or not. */
          success?: boolean;
          /** @description Filters people by whether or not they are marked as an European Union Resident or not. */
          eu_resident?: boolean;
          /** @description Filters people by their title by exact match. Supports partial matching */
          title?: string[];
          /** @description Filters people by their country by exact match. Supports partial matching */
          country?: string[];
          /** @description Filters people by their state by exact match. Supports partial matching */
          state?: string[];
          /** @description Filters people by their city by exact match. Supports partial matching */
          city?: string[];
          /**
           * @description Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
           * Additional values of "_is_null" or "_is_not_null" can be passed to filter records that either have no timestamp value or any timestamp value.
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          last_contacted?: Record<string, never>;
          /**
           * @description Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          created_at?: Record<string, never>;
          /** @description Filters people by whether or not that person is on a cadence or if they have been contacted in any way. */
          new?: boolean;
          /** @description Filter people by whether or not they have a phone number or not */
          phone_number?: boolean;
          /** @description Filters people by locales. Multiple locales can be applied. An additional value of "Null" can be passed to filter people that do not have a locale. */
          locales?: string[];
          /** @description Filters people by owner_id. Multiple owner_ids can be applied. */
          owner_id?: number[];
          /** @description For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filters people by the string provided. Can search and filter by name, title, industry, email_address and linked account name. */
          _query?: string;
          /** @description Key to sort on, must be one of: created_at, updated_at, last_contacted_at, name, title, job_seniority, call_count, sent_emails, clicked_emails, replied_emails, viewed_emails, account, cadence_stage_name. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Person"][];
          };
        };
      };
    };
    /**
     * Create a person
     * @description Creates a person. Either email_address or phone/last_name must be provided as a unique lookup
     * on the team.
     */
    post: {
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description ID of the Account to link this person to */
            account_id?: number;
            /** @description Whether the date should be added to this person as a tag. Default is false. The tag will be Y-m-d format. */
            autotag_date?: boolean;
            /** @description City */
            city?: string;
            /** @description Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message */
            contact_restrictions?: string[];
            /** @description Country */
            country?: string;
            /**
             * @description Requires Salesforce.
             *
             * ID of the person in your external CRM. You must provide a crm_id_type if this is included.
             *
             * Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.
             *
             * This field can only be used if your application or API key has the "person:set_crm_id" scope.
             */
            crm_id?: string;
            /** @description The CRM that the provided crm_id is for. Must be one of: salesforce */
            crm_id_type?: string;
            /** @description Custom fields are defined by the user's team. Only fields with values are presented in the API. */
            custom_fields?: Record<string, never>;
            /** @description Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. */
            do_not_contact?: boolean;
            /** @description Email address */
            email_address?: string;
            /** @description First name */
            first_name?: string;
            /** @description Home phone without formatting */
            home_phone?: string;
            /** @description ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import */
            import_id?: number;
            /** @description The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown */
            job_seniority?: string;
            /** @description Last name */
            last_name?: string;
            /** @description Linkedin URL */
            linkedin_url?: string;
            /** @description Time locale of the person */
            locale?: string;
            /** @description Mobile phone without formatting */
            mobile_phone?: string;
            /** @description ID of the User that owns this person */
            owner_id?: number;
            /** @description Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_industry?: string;
            /** @description Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_name?: string;
            /** @description Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_website?: string;
            /** @description ID of the PersonStage of this person */
            person_stage_id?: number;
            /** @description Personal email address */
            personal_email_address?: string;
            /** @description The website of this person */
            personal_website?: string;
            /** @description Phone without formatting */
            phone?: string;
            /** @description Phone extension without formatting */
            phone_extension?: string;
            /** @description Alternate email address */
            secondary_email_address?: string;
            /** @description State */
            state?: string;
            /** @description All tags applied to this person */
            tags?: string[];
            /** @description Job title */
            title?: string;
            /** @description The twitter handle of this person */
            twitter_handle?: string;
            /** @description Work location - city */
            work_city?: string;
            /** @description Work location - country */
            work_country?: string;
            /** @description Work location - state */
            work_state?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Person"];
          };
        };
      };
    };
  };
  "/v2/people/{id}.json": {
    /**
     * Fetch a person
     * @description Fetches a person, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Person ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Person"];
          };
        };
      };
    };
    /**
     * Update a person
     * @description Updates a person.
     */
    put: {
      parameters: {
        path: {
          /** @description Person id */
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description ID of the Account to link this person to */
            account_id?: number;
            /** @description City */
            city?: string;
            /** @description Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message */
            contact_restrictions?: string[];
            /** @description Country */
            country?: string;
            /**
             * @description Requires Salesforce.
             *
             * ID of the person in your external CRM. You must provide a crm_id_type if this is included.
             *
             * Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.
             *
             * This field can only be used if your application or API key has the "person:set_crm_id" scope.
             */
            crm_id?: string;
            /** @description The CRM that the provided crm_id is for. Must be one of: salesforce */
            crm_id_type?: string;
            /** @description Custom fields are defined by the user's team. Only fields with values are presented in the API. */
            custom_fields?: Record<string, never>;
            /** @description Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. */
            do_not_contact?: boolean;
            /** @description Email address */
            email_address?: string;
            /** @description First name */
            first_name?: string;
            /** @description Home phone without formatting */
            home_phone?: string;
            /** @description ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import */
            import_id?: number;
            /** @description The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown */
            job_seniority?: string;
            /** @description Last name */
            last_name?: string;
            /** @description Linkedin URL */
            linkedin_url?: string;
            /** @description Time locale of the person */
            locale?: string;
            /** @description Mobile phone without formatting */
            mobile_phone?: string;
            /** @description ID of the User that owns this person */
            owner_id?: number;
            /** @description Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_industry?: string;
            /** @description Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_name?: string;
            /** @description Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_website?: string;
            /** @description ID of the PersonStage of this person */
            person_stage_id?: number;
            /** @description Personal email address */
            personal_email_address?: string;
            /** @description The website of this person */
            personal_website?: string;
            /** @description Phone without formatting */
            phone?: string;
            /** @description Phone extension without formatting */
            phone_extension?: string;
            /** @description Alternate email address */
            secondary_email_address?: string;
            /** @description State */
            state?: string;
            /** @description All tags applied to this person */
            tags?: string[];
            /** @description Job title */
            title?: string;
            /** @description The twitter handle of this person */
            twitter_handle?: string;
            /** @description Work location - city */
            work_city?: string;
            /** @description Work location - country */
            work_country?: string;
            /** @description Work location - state */
            work_state?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Person"];
          };
        };
      };
    };
    /**
     * Delete a person
     * @description Deletes a person. This operation is not reversible without contacting support.
     * This operation can be called multiple times successfully.
     */
    delete: {
      parameters: {
        path: {
          /** @description Person id */
          id: string;
        };
      };
      responses: {
        /** @description The person has been deleted successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/person_stages.json": {
    /**
     * List person stages
     * @description Fetches multiple person stage records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of person stages to fetch. */
          ids?: number[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PersonStage"][];
          };
        };
      };
    };
    /**
     * Create a person stage
     * @description Creates a person stage.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description The name of the new stage */
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PersonStage"];
          };
        };
      };
    };
  };
  "/v2/person_stages/{id}.json": {
    /**
     * Fetch a person stage
     * @description Fetches a person stage, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Stage ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PersonStage"];
          };
        };
      };
    };
    /**
     * Update a person stage
     * @description Updates a person stage.
     */
    put: {
      parameters: {
        path: {
          /** @description Stage ID */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description The name of the stage. */
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PersonStage"];
          };
        };
      };
    };
    /**
     * Delete an person stage
     * @description Deletes a person stage. This operation is not reversible without contacting support.
     * This operation can be called multiple times successfully.
     */
    delete: {
      parameters: {
        path: {
          /** @description Stage ID */
          id: string;
        };
      };
      responses: {
        /** @description The Person Stage has been deleted successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/person_upserts.json": {
    /**
     * Upsert a person
     * @description Upserts a person record. The upsert_key dictates how the upsert will be performed. The create and update behavior
     * is exactly the same as the individual create and update endpoints.
     */
    post: {
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description ID of the Account to link this person to */
            account_id?: number;
            /** @description City */
            city?: string;
            /** @description Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message */
            contact_restrictions?: string[];
            /** @description Country */
            country?: string;
            /**
             * @description Requires Salesforce.
             *
             * ID of the person in your external CRM. You must provide a crm_id_type if this is included.
             *
             * Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.
             *
             * This field can only be used if your application or API key has the "person:set_crm_id" scope.
             */
            crm_id?: string;
            /** @description The CRM that the provided crm_id is for. Must be one of: salesforce */
            crm_id_type?: string;
            /** @description Custom fields are defined by the user's team. Only fields with values are presented in the API. */
            custom_fields?: Record<string, never>;
            /** @description Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. */
            do_not_contact?: boolean;
            /** @description Email address */
            email_address?: string;
            /** @description First name */
            first_name?: string;
            /** @description Home phone without formatting */
            home_phone?: string;
            /**
             * @description ID of the person to update. Used if the upsert_key=id. When id and another upsert_key are provided,
             * the request will fail if the upsert record id and id parameter don't match.
             */
            id?: number;
            /** @description ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import */
            import_id?: number;
            /** @description The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown */
            job_seniority?: string;
            /** @description Last name */
            last_name?: string;
            /** @description Linkedin URL */
            linkedin_url?: string;
            /** @description Time locale of the person */
            locale?: string;
            /** @description Mobile phone without formatting */
            mobile_phone?: string;
            /** @description ID of the User that owns this person */
            owner_id?: number;
            /** @description Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_industry?: string;
            /** @description Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_name?: string;
            /** @description Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended */
            person_company_website?: string;
            /** @description ID of the PersonStage of this person */
            person_stage_id?: number;
            /** @description Personal email address */
            personal_email_address?: string;
            /** @description The website of this person */
            personal_website?: string;
            /** @description Phone without formatting */
            phone?: string;
            /** @description Phone extension without formatting */
            phone_extension?: string;
            /** @description Alternate email address */
            secondary_email_address?: string;
            /** @description State */
            state?: string;
            /** @description All tags applied to this person */
            tags?: string[];
            /** @description Job title */
            title?: string;
            /** @description The twitter handle of this person */
            twitter_handle?: string;
            /**
             * @description Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail.
             * The request will also fail if there are multiple records matched by the upsert field. This can occur if intentional duplicates
             * by email address is enabled.
             *
             * If upsert_key is not provided, this endpoint will not update an existing record.
             *
             * Valid options are: id, crm_id, email_address. If crm_id is provided, then a valid crm_id_type must be provided, as documented
             * for the person create and update endpoints.
             */
            upsert_key?: string;
            /** @description Work location - city */
            work_city?: string;
            /** @description Work location - country */
            work_country?: string;
            /** @description Work location - state */
            work_state?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PersonUpsert"];
          };
        };
      };
    };
  };
  "/v2/phone_number_assignments.json": {
    /**
     * List phone number assignments
     * @description Fetches multiple phone number assignment records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of phone number assignments to fetch */
          ids?: number[];
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PhoneNumberAssignment"][];
          };
        };
      };
    };
  };
  "/v2/phone_number_assignments/{id}.json": {
    /**
     * Fetch a phone number assignment
     * @description Fetches a phone number assignment, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description PhoneNumberAssignment ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["PhoneNumberAssignment"];
          };
        };
      };
    };
  };
  "/v2/phone_numbers/caller_ids.json": {
    /**
     * List caller ids
     * @description Each entry is a possible caller ID match for the number. Multiple
     * entries may be returned if the phone number is present on more than one
     * person in the system.  Phone number should be in E.164 format.
     */
    get: {
      parameters: {
        query: {
          /** @description E.164 Phone Number */
          phone_number: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["CallerId"][];
          };
        };
      };
    };
  };
  "/v2/phone_numbers/recording_settings/{id}.json": {
    /**
     * Fetch recording setting
     * @description Fetches the recording status for a given phone number, based on Do Not Record and Recording Governance for your team.
     * Phone number should be in E.164 format.
     */
    get: {
      parameters: {
        path: {
          /** @description E.164 Phone Number */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["RecordingSetting"];
          };
        };
      };
    };
  };
  "/v2/saved_list_views.json": {
    /**
     * List saved list views
     * @description Fetches multiple saved list view records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of saved list views to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Type of saved list views to fetch. */
          view?: string;
          /** @description Key to sort on, must be one of: name. Defaults to name */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["SavedListView"][];
          };
        };
      };
    };
    /**
     * Create a saved list view
     * @description Creates a saved list view.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Whether the saved list view is the default */
            is_default?: boolean;
            /** @description The name of the saved list view */
            name: string;
            /** @description The type of objects in the saved list view.  Value must be one of: people, companies, or recordings */
            view: string;
            /** @description JSON object of list view parameters */
            view_params?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["SavedListView"];
          };
        };
      };
    };
  };
  "/v2/saved_list_views/{id}.json": {
    /**
     * Fetch a saved list view
     * @description Fetches a saved list view, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Saved List View ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["SavedListView"];
          };
        };
      };
    };
    /**
     * Update a saved list view
     * @description Updates a saved list view.
     */
    put: {
      parameters: {
        path: {
          /** @description Saved List View ID */
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Whether the saved list view is the default */
            is_default?: boolean;
            /** @description The name of the saved list view */
            name?: string;
            /** @description JSON object of list view parameters */
            view_params?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["SavedListView"];
          };
        };
      };
    };
    /**
     * Delete a saved list view
     * @description Deletes a saved list view. This operation is not reversible without contacting support.
     * This operation can be called multiple times successfully.
     */
    delete: {
      parameters: {
        path: {
          /** @description Saved List View ID */
          id: string;
        };
      };
      responses: {
        /** @description The saved list view has been deleted successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/steps.json": {
    /**
     * List steps
     * @description Fetches multiple step records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of steps to fetch. */
          ids?: number[];
          /** @description Filter by cadence ID */
          cadence_id?: number;
          /** @description Filter by step type */
          type?: string;
          /** @description Filter by whether a step has due actions */
          has_due_actions?: boolean;
          /** @description Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Step"][];
          };
        };
      };
    };
  };
  "/v2/steps/{id}.json": {
    /**
     * Fetch a step
     * @description Fetches a step, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Step ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Step"];
          };
        };
      };
    };
  };
  "/v2/successes.json": {
    /**
     * List successes
     * @description Fetches multiple success records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of successes to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Filters successes by person_id. Multiple person ids can be applied */
          person_id?: number[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Key to sort on, must be one of: created_at, updated_at, succeeded_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Success"][];
          };
        };
      };
    };
  };
  "/v2/tags.json": {
    /**
     * List team tags
     * @description Fetches a list of the tags used for a team. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     *
     * Tags can be applied to mulitple resource types.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters tags by name */
          search?: string;
          /** @description Filters tags by their IDs */
          ids?: number[];
          /** @description Key to sort on, must be one of: name. Defaults to name */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Tag"][];
          };
        };
      };
    };
  };
  "/v2/tasks.json": {
    /**
     * List tasks
     * @description Fetches multiple task records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of tasks to fetch. */
          ids?: number[];
          /** @description Filters tasks by the user to which they are assigned. */
          user_id?: number[];
          /** @description Filters tasks by the person to which they are associated. */
          person_id?: number[];
          /** @description Filters tasks by the account to which they are associated. */
          account_id?: number[];
          /** @description Filters tasks by their current state. Valid current_states include: ['scheduled', 'completed']. */
          current_state?: string[];
          /** @description Filters tasks by their task type. Valid task_types include: ['call', 'email', 'general']. */
          task_type?: string[];
          /** @description Filters tasks by time interval. Valid time_intervals include: ['overdue', 'today', 'tomorrow', 'this_week', 'next_week']. */
          time_interval_filter?: string;
          /** @description Filters tasks by idempotency key. */
          idempotency_key?: string;
          /** @description Filters tasks by locale of the person to which they are associated. */
          locale?: string[];
          /** @description Key to sort on, must be one of: due_date, due_at. Defaults to due_date */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to ASC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Task"][];
          };
        };
      };
    };
    /**
     * Create a Task
     * @description Creates a task.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Current state of the task, valid options are: scheduled */
            current_state: string;
            /** @description A description of the task recorded for person at completion time */
            description?: string;
            /** @description Date of when the Task is due, ISO-8601 date format required */
            due_date: string;
            /** @description Establishes a unique identifier to prevent duplicates from being created */
            idempotency_key?: string;
            /** @description ID of the person to be contacted */
            person_id: string;
            /** @description Datetime of when the user will be reminded of the task, ISO-8601 datetime format required */
            remind_at?: string;
            /** @description Subject line of the task. */
            subject: string;
            /** @description Task type, valid options are: call, email, general */
            task_type: string;
            /** @description ID of the user linked to the task */
            user_id: number;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Task"];
          };
        };
      };
    };
  };
  "/v2/tasks/{id}.json": {
    /**
     * Fetch a task
     * @description Fetches a task, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description Task ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Step"];
          };
        };
      };
    };
    /**
     * Update a Task
     * @description Updates a task.
     */
    put: {
      parameters: {
        path: {
          /** @description Task ID */
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Current state of the task, valid options are: completed */
            current_state?: string;
            /** @description A description of the task recorded for person at completion time */
            description?: string;
            /** @description Date of when the Task is due, ISO-8601 date format required */
            due_date?: string;
            /** @description A flag to indicate that the task should only be logged */
            is_logged?: boolean;
            /** @description Datetime of when the user will be reminded of the task, ISO-8601 datetime format required */
            remind_at?: string;
            /** @description Subject line of the task */
            subject?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Task"];
          };
        };
      };
    };
  };
  "/v2/team.json": {
    /**
     * Fetch current team
     * @description Fetches the team of the authenticated user.
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Team"];
          };
        };
      };
    };
  };
  "/v2/team_template_attachments.json": {
    /**
     * List team template attachments
     * @description Fetches multiple team template attachment records. The records can be filtered and paged according to
     * the respective parameters.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of team template attachments to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Filters template attachments by team template IDs */
          team_template_id?: number[];
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["TeamTemplateAttachment"][];
          };
        };
      };
    };
  };
  "/v2/team_templates.json": {
    /**
     * List team templates
     * @description Fetches multiple team template records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     *
     * Team templates are templates that are available team-wide. Admins may use
     * team templates to create original content for the entire team, monitor version control to ensure templates are always up to date,
     * and track template performance across the entire organization. All metrics on a team template reflect usage across the team; individual metrics can be found with the email_templates API endpoint.
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of team templates to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: string[];
          /**
           * @description Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
           *
           * ---CUSTOM---
           * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
           */
          updated_at?: string[];
          /** @description Filters email templates by title or subject */
          search?: string;
          /** @description Filters email templates by tags applied to the template by tag ID, not to exceed 100 IDs */
          tag_ids?: number[];
          /** @description Filters team templates by tags applied to the template, not to exceed 100 tags */
          tag?: string[];
          /** @description Filters email templates to include archived templates or not */
          include_archived_templates?: boolean;
          /** @description Key to sort on, must be one of: created_at, updated_at, last_used_at. Defaults to updated_at */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
          /** @description How many records to show per page in the range [1, 100]. Defaults to 25 */
          per_page?: number;
          /** @description The current page to fetch results from. Defaults to 1 */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data */
          limit_paging_counts?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["TeamTemplate"][];
          };
        };
      };
    };
  };
  "/v2/team_templates/{id}.json": {
    /**
     * Fetch a team template
     * @description Fetches a team template, by ID only.
     */
    get: {
      parameters: {
        query?: {
          /** @description Optionally will return the templates with the current user's email signature */
          include_signature?: boolean;
        };
        path: {
          /** @description Team Template ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["TeamTemplate"];
          };
        };
      };
    };
  };
  "/v2/third_party_live_feed_items": {
    /**
     * Create a live feed item
     * @description Creates a live feed item that can be sent to users. May only be used by whitelisted Frontend Integrations. Reference the Salesloft App Directory and Frontend Integrations sections for additional details.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /**
             * @description Equality filters that are applied to the event_occurred_at field. A single filter can be used by itself or combined with other filters to create a range.
             * ---CUSTOM---
             * {"keys":[{"description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gt","type":"iso8601 string"},{"description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gte","type":"iso8601 string"},{"description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lt","type":"iso8601 string"},{"description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lte","type":"iso8601 string"}],"type":"object"}
             */
            event_occurred_at: string;
            /** @description Uniquely provided string specific to this event. This should be a value which can't be duplicated between external systems, meaning that an id is not sufficient. */
            idempotency_key: string;
            /** @description The message that relates to the subject. This message should start with a lower-case past-tense verb and end with a period (e.g. "received a package."). When live feed items are displayed to users, the subject's name is concatenated with the message and a joining space. Only <a> HTML tags with an "href" attribute are allowed. Other attributes and tags will be stripped. */
            message: string;
            /** @description The ID of the subject of the live feed item (i.e. the "person" id). */
            subject_id: number;
            /** @description The type of the subject of the live feed item. Currently only "person" is supported. */
            subject_type: string;
            /** @description The guid for the user that this live feed item should be shown to. */
            user_guid: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["LiveFeedItem"][];
          };
        };
      };
    };
  };
  "/v2/users.json": {
    /**
     * List users
     * @description Non Admin: Lists only your user, or all on team depending on group visibility policy
     * Team Admin: Lists users associated with your team
     */
    get: {
      parameters: {
        query?: {
          /** @description IDs of users to fetch. If a record can't be found, that record won't be returned and your request will be successful */
          ids?: number[];
          /** @description Filters list to only include guids */
          guid?: string[];
          /** @description Filters users by group_id.  An additional value of "_is_null" can be passed to filter users that are not in a group */
          group_id?: string[];
          /** @description Filters users by role_id */
          role_id?: string[];
          /** @description Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email */
          search?: string;
          /** @description Filters users based on active attribute. Defaults to not applied */
          active?: boolean;
          /**
           * @description Defaults to true.
           *
           * When true, only shows users that are actionable based on the team's privacy settings.
           * When false, shows all users on the team, even if you can't take action on that user. Deactivated users are also included when false.
           */
          visible_only?: boolean;
          /** @description How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined */
          per_page?: number;
          /** @description The current page to fetch users from. Defaults to returning all users */
          page?: number;
          /** @description Whether to include total_pages and total_count in the metadata. Defaults to false */
          include_paging_counts?: boolean;
          /** @description Filters users based on if they have a crm user mapped or not. */
          has_crm_user?: boolean;
          /** @description Filters users based on assigned work_country. */
          work_country?: string[];
          /** @description Key to sort on, must be one of: id, email, name, group, role. Defaults to id */
          sort_by?: string;
          /** @description Direction to sort in, must be one of: ASC, DESC. Defaults to DESC */
          sort_direction?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["User"][];
          };
        };
      };
    };
  };
  "/v2/users/{id}.json": {
    /**
     * Fetch a user
     * @description Fetches a user, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description User ID */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/v2/webhook_subscriptions": {
    /**
     * List webhook subscriptions
     * @description Fetches all of the customer's webhook subscriptions for your application.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters webhook subscriptions by whether is enabled or not. */
          enabled?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Subscription"][];
          };
        };
      };
    };
    /**
     * Create a webhook subscription
     * @description Creates a webhook subscription. Visit the <a href="/webhooks.html" target="_blank" rel="noopener noreferrer">webhooks page</a> for additional details and a list of available webhooks.
     * Request must be made with a valid Oauth token or API key.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Any string to be used as a shared secret when subscription events are published. SalesLoft will send the value of this callback_token in the payload of each event so the receiver may verify it matches the original value. This ensures webhook events are being delivered by SalesLoft. */
            callback_token: string;
            /** @description URL for your callback handler */
            callback_url: string;
            /** @description Type of event the subscription is for. Visit the "Event Types" section of the webhooks page to find a list of supported event types. */
            event_type: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Subscription"];
          };
        };
      };
    };
  };
  "/v2/webhook_subscriptions/{id}": {
    /**
     * Fetch a webhook subscription
     * @description Fetches a webhook subscription, by ID only.
     */
    get: {
      parameters: {
        path: {
          /** @description The id for the Webhook Subscription */
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Subscription"];
          };
        };
      };
    };
    /**
     * Update a webhook subscription
     * @description Updates a webhook subscription.
     * Request must be made with a valid Oauth token or API key.
     */
    put: {
      parameters: {
        path: {
          /** @description The Webhook Suscription id to update */
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Enable or disable the webhook subscription */
            enabled?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "*/*": components["schemas"]["Subscription"];
          };
        };
      };
    };
    /**
     * Delete a webhook subscription
     * @description Deletes a webhook subscription. This operation is not reversible without contacting support. This operation can be called multiple times successfully.
     */
    delete: {
      parameters: {
        path: {
          /** @description The id of the Webhook Subscription to delete */
          id: number;
        };
      };
      responses: {
        /** @description This webhook subscription has been deleted successfully */
        204: {
          content: never;
        };
      };
    };
  };
  "/v2/cadence_imports": {
    post: operations["importCadence"];
  };
  "/v2/cadence_exports/{id}": {
    get: operations["exportCadence"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Account: {
      account_tier?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the Account was archived, if archived
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      archived_at?: string;
      /**
       * @description City
       * @example Dufftown
       */
      city?: string;
      company_stage?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Type of the Account's company
       * @example Private
       */
      company_type?: string;
      /**
       * @description Conversational name of the Account
       * @example Hogwarts
       */
      conversational_name?: string;
      /**
       * @description Country
       * @example Scotland
       */
      country?: string;
      counts?: components["schemas"]["EmbeddedAccountCounts"];
      /**
       * Format: date-time
       * @description Datetime of when the Account was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      creator?: components["schemas"]["EmbeddedResource"];
      /**
       * @description CRM ID
       * @example 003i000001mnhpD
       */
      crm_id?: string;
      /**
       * @description CRM object type
       * @example account
       */
      crm_object_type?: string;
      /**
       * @description CRM url
       * @example https://na15.salesforce.com/003i000001mnhpD
       */
      crm_url?: string;
      /**
       * @description Custom fields are defined by the user's team. Only fields with values are presented in the API.
       * @example {
       *   "MyField": "A Value",
       *   "Other": "Field"
       * }
       */
      custom_fields?: Record<string, never>;
      /**
       * @description Description
       * @example British school of magic for students
       */
      description?: string;
      /**
       * @description Whether this company has opted out of communications. Do not contact someone at this company when this is set to true
       * @example true
       */
      do_not_contact?: boolean;
      /**
       * @description Website domain, not a fully qualified URI
       * @example salesloft.com
       */
      domain?: string;
      /**
       * @description Date or year of founding
       * @example March 1st, 1820
       */
      founded?: string;
      /**
       * @description ID of Account
       * @example 1
       */
      id?: number;
      /**
       * @description Industry
       * @example Education
       */
      industry?: string;
      /**
       * Format: date-time
       * @description Datetime this Account was last contacted
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      last_contacted_at?: string;
      last_contacted_by?: components["schemas"]["EmbeddedResource"];
      last_contacted_person?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The type of the last touch to this Account. Can be call, email, other
       * @example call
       */
      last_contacted_type?: string;
      /**
       * @description Full LinkedIn url
       * @example https://www.linkedin.com/company/2296178/
       */
      linkedin_url?: string;
      /**
       * @description Time locale
       * @example Europe/London
       */
      locale?: string;
      /**
       * @description Account Full Name
       * @example Hogwarts School of Witchcraft and Wizardry
       */
      name?: string;
      owner?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Mapped owner field from the CRM
       * @example 003i000001mnhpD
       */
      owner_crm_id?: string;
      /**
       * @description Phone number without formatting
       * @example +1 444 555 6666
       */
      phone?: string;
      /**
       * @description Postal code
       * @example 55555
       */
      postal_code?: string;
      /**
       * @description Estimated revenue range
       * @example 1,000,000-2,000,000
       */
      revenue_range?: string;
      /**
       * @description Estimated number of people in employment
       * @example 1500
       */
      size?: string;
      /**
       * @description State
       * @example Mortlach
       */
      state?: string;
      /**
       * @description Street name and number
       * @example 4 Picket Drive
       */
      street?: string;
      /**
       * @description All tags applied to this Account
       * @example [
       *   "7-23-2017",
       *   "dreamforce"
       * ]
       */
      tags?: string[];
      /**
       * @description Twitter handle, with @
       * @example @kyleporter
       */
      twitter_handle?: string;
      /**
       * Format: date-time
       * @description Datetime of when the Account was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      /**
       * @description Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values
       * @example {
       *   "Other": "_is_null",
       *   "bff": "0037h00000d78aAAAQ"
       * }
       */
      user_relationships?: Record<string, never>;
      /**
       * @description Website
       * @example https://salesloft.com
       */
      website?: string;
    };
    AccountStage: {
      /**
       * Format: date-time
       * @description Datetime of when the Account Stage was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description ID of Account Stage
       * @example 1
       */
      id?: number;
      /**
       * @description Name of Account Stage
       * @example In Progress
       */
      name?: string;
      /**
       * @description Order of Account Stage
       * @example 3
       */
      order?: number;
      /**
       * Format: date-time
       * @description Datetime of when the Account Stage was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    AccountTier: {
      /**
       * Format: date-time
       * @description Datetime of when the Account Tier was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description ID of Account Tier
       * @example 1
       */
      id?: number;
      /**
       * @description Name of the Account Tier
       * @example High Priority
       */
      name?: string;
      /**
       * @description The order of the account tier
       * @example 2
       */
      order?: number;
      /**
       * Format: date-time
       * @description Datetime of when the Account Tier was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    AccountUpsert: {
      account?: components["schemas"]["Account"];
      /** @description The type of upsert. One of: create, update */
      upsert_type?: string;
    };
    Action: {
      action_details?: components["schemas"]["EmbeddedResource"];
      cadence?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the Action was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description Whether this step is due
       * @example true
       */
      due?: boolean;
      /**
       * Format: date-time
       * @description When action is due
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      due_on?: string;
      /**
       * @description ID of Action
       * @example 1
       */
      id?: number;
      /**
       * @description ID of the multitouch group
       * @example 1
       */
      multitouch_group_id?: number;
      person?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The current state of the person on the cadence. Possible values are:
       *
       * in_progress: this action has not been completed
       *
       * pending_activity: this action has been acted upon, but the action has not been completed.
       * (i.e. the email is scheduled to send, but has not been delivered yet)
       *
       * @example in_progress
       */
      status?: string;
      step?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The type of this action. Valid types are: email, phone, other. New types may be added in the future.
       *
       * @example phone
       */
      type?: string;
      /**
       * Format: date-time
       * @description Datetime of when the Action was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    Activity: {
      /**
       * Format: date-time
       * @description Datetime of when the Activity was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    ActivityHistory: {
      /**
       * Format: date-time
       * @description When this record was created
       * @example 2019-01-01T00:00:00.000000Z
       */
      created_at?: string;
      /**
       * @description Attributes from associated records. This is specific to the type of activity and may change over time. Not returned for create requests
       * @example {
       *   "counts": {
       *     "clicks": 2,
       *     "replies": 1,
       *     "views": 3
       *   },
       *   "status": "sent",
       *   "subject": "Welcome to SalesLoft"
       * }
       */
      dynamic_data?: Record<string, never>;
      /**
       * @description A list of remote resource names that failed to load. This is specific to the type of activity and may change over time. Not returned for create requests
       * @example [
       *   "email"
       * ]
       */
      failed_dynamic_resources?: Record<string, never>;
      /**
       * @description ID of this activity
       * @example 1
       */
      id?: number;
      /**
       * Format: date-time
       * @description When this activity occurred
       * @example 2019-01-01T00:00:00.000000Z
       */
      occurred_at?: string;
      /**
       * Format: date-time
       * @description When this record was pinned
       * @example 2019-01-01T00:00:00.000000Z
       */
      pinned_at?: string;
      /**
       * @description ID of the resource this activity is for. It will be a string for the following resource types: crm_opportunity
       * @example 1
       */
      resource_id?: number;
      /**
       * @description Type of the resource this activity is for. One of: account, person
       * @example person
       */
      resource_type?: number;
      /**
       * @description The static data for this activity
       * @example {
       *   "email_id": 2
       * }
       */
      static_data?: Record<string, never>;
      /**
       * @description The type of activity
       * @example email
       */
      type?: string;
      /**
       * Format: date-time
       * @description When this record was updated
       * @example 2019-01-01T00:00:00.000000Z
       */
      updated_at?: string;
      /**
       * @description UUID of the user this activity is for
       * @example 51398ccd-309e-467f-aae2-4b0f66b5c11d
       */
      user_guid?: string;
    };
    BulkJob: {
      /**
       * Format: date-time
       * @description When this bulk job was created
       * @example 2019-01-01T00:00:00-05:00
       */
      created_at?: string;
      /**
       * @description Number of errored records at the time of request for this Bulk Job
       * @example 23
       */
      errors?: number;
      /**
       * Format: date-time
       * @description When this bulk job finished processing
       * @example 2019-01-02T00:00:00-05:00
       */
      finished_at?: string;
      /**
       * @description ID of this Bulk Job
       * @example 1
       */
      id?: number;
      /**
       * Format: date-time
       * @description When this bulk job was marked as ready to execute
       * @example 2019-01-02T00:00:00-05:00
       */
      marked_ready_at?: string;
      /**
       * @description Name of this Bulk Job
       * @example Job Name
       */
      name?: string;
      /**
       * @description Number of processed records at the time of request for this Bulk Job
       * @example 50
       */
      processed?: number;
      /**
       * @description Whether the Bulk Job is ready to be executed
       * @example false
       */
      ready_to_execute?: boolean;
      /**
       * @description Scopes
       * @example [
       *   "person:set_crm_id"
       * ]
       */
      scopes?: unknown[];
      /**
       * Format: date-time
       * @description When this bulk job started processing. null until bulk job is done
       * @example 2019-01-02T00:00:00-05:00
       */
      started_at?: string;
      /**
       * @description State of the Bulk Job.  Must be one of: open, executing, done.
       * @example open
       */
      state?: string;
      /**
       * @description Number of total records for this Bulk Job
       * @example 1234
       */
      total?: number;
      /**
       * @description Type of the Bulk Job.
       * @example person/upsert
       */
      type?: string;
      /**
       * Format: date-time
       * @description When this bulk job was updated
       * @example 2019-01-02T00:00:00-05:00
       */
      updated_at?: string;
    };
    BulkJobResult: {
      /**
       * @description Error message for the record that was processed. Will be null if there was no error.
       * @example Missing required field: email address
       */
      error?: string;
      /**
       * @description ID of the record that was processed
       * @example 1
       */
      id?: number;
      /**
       * @description The data that was used to process the operation
       * @example {first_name: "John", last_name: "Smith"}
       */
      record?: Record<string, never>;
      /**
       * @description The object containing the resulting resource from performing the bulk action on this record
       * @example {person: {...}, upsert_type: "create"}
       */
      resource?: Record<string, never>;
      /**
       * @description Status of the record that was processed. Will be one of: success, error
       * @example error
       */
      status?: string;
    };
    Cadence: {
      added_stage?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the cadence was archived, if archived
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      archived_at?: string;
      bounced_stage?: components["schemas"]["EmbeddedResource"];
      /**
       * @description ID of the cadence framework used to create steps for the cadence
       * @example 1
       */
      cadence_framework_id?: number;
      /**
       * @description The use case of the cadence. Possible values are:
       *
       * outbound: Denotes an outbound cadence, typically for sales purposes
       *
       * inbound: Denotes an inbound sales cadence
       *
       * event: Denotes a cadence used for an upcoming event
       *
       * other: Denotes a cadence outside of the standard process
       *
       * @example outbound
       */
      cadence_function?: string;
      cadence_priority?: components["schemas"]["EmbeddedResource"];
      counts?: components["schemas"]["CadenceCounts"];
      /**
       * Format: date-time
       * @description Datetime of when the cadence was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      creator?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Whether this cadence is in draft mode
       * @example false
       */
      draft?: boolean;
      /**
       * @description Cadence External ID
       * @example This is my external id
       */
      external_identifier?: string;
      finished_stage?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Groups to which this cadence is assigned, if any
       * @example [
       *   {
       *     "_href": "https://api.salesloft.com/v2/groups/921",
       *     "id": 921
       *   }
       * ]
       */
      groups?: components["schemas"]["EmbeddedResource"][];
      /**
       * @description ID of cadence
       * @example 1
       */
      id?: number;
      /**
       * @description Cadence name
       * @example Prospecting - VP of Sales
       */
      name?: string;
      /**
       * @description Whether this cadence is configured to include an opt-out link by default
       * @example true
       */
      opt_out_link_included?: boolean;
      owner?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Whether this cadence is configured to automatically remove people who have bounced
       * @example true
       */
      remove_bounces_enabled?: boolean;
      /**
       * @description Whether this cadence is configured to automatically remove people who have replied
       * @example true
       */
      remove_replies_enabled?: boolean;
      replied_stage?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Whether this cadence is visible to team members (shared)
       * @example false
       */
      shared?: boolean;
      /**
       * @description All tags applied to this cadence
       * @example [
       *   "7-23-2017",
       *   "dreamforce"
       * ]
       */
      tags?: string[];
      /**
       * @description Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users
       * @example false
       */
      team_cadence?: boolean;
      /**
       * Format: date-time
       * @description Datetime of when the cadence was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    CadenceCounts: {
      /**
       * @description The number of people that have ever been added to the cadence
       * @example 59
       */
      cadence_people?: number;
      /**
       * @description The number of meetings booked and attributed to the cadence
       * @example 10
       */
      meetings_booked?: number;
      /**
       * @description The number of opportunities created and attributed to the cadence
       * @example 10
       */
      opportunities_created?: number;
      /**
       * @description The number of people that have been skipped, scheduled, or advanced in a cadence
       * @example 1
       */
      people_acted_on_count?: number;
      /**
       * @description The user defined target for number of people to add to the cadence each day
       * @example 10
       */
      target_daily_people?: number;
    };
    CadenceExport: {
      data: {
        cadence_content: {
          settings?: components["schemas"]["CadenceSettings"];
          sharing_settings?: components["schemas"]["CadenceSharingSettings"];
          step_groups: components["schemas"]["StepGroup"][];
        };
      };
    };
    CadenceImport: {
      settings?: components["schemas"]["CadenceSettings"];
      sharing_settings?: components["schemas"]["CadenceSharingSettings"];
      cadence_content: {
        cadence_id?: number;
        step_groups: components["schemas"]["StepGroup"][];
      };
    };
    CadenceMembership: {
      /**
       * Format: date-time
       * @description Datetime of when the person was last added to this cadence
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      added_at?: string;
      cadence?: components["schemas"]["EmbeddedResource"];
      counts?: components["schemas"]["CadenceMembershipCounts"];
      /**
       * Format: date-time
       * @description Datetime of when the person was first added to this cadence
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description The current state of the person on the cadence. Possible values are:
       *
       * processing: The person is being processed on a cadence. Cadence-related changes cannot be made at this time
       *
       * staged: The person is waiting for the first step in the cadence to occur
       *
       * active: The cadence has begun processing this person and is still in the process, but idle
       *
       * scheduled: The cadence has begun processing this person and is still in the process, with an activity scheduled to occur
       *
       * completed: The cadence has been completed for this person
       *
       * removed: The person was manually or automatically removed from the cadence
       *
       * removed_no_action: The person was removed from the cadence before any action occurred
       *
       * reassigned: The person's cadence execution was transferred to a different user, ending this user's interaction
       *
       * @example staged
       */
      current_state?: string;
      /**
       * @description Whether the person is currently on the cadence
       * @example false
       */
      currently_on_cadence?: boolean;
      /**
       * @description Cadence membership ID
       * @example 1
       */
      id?: number;
      latest_action?: components["schemas"]["EmbeddedResource"];
      person?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Whether the associated person has since been deleted
       * @example false
       */
      person_deleted?: boolean;
      /**
       * Format: date-time
       * @description Datetime of when the record was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    CadenceMembershipCounts: {
      /**
       * @description The number of times emails sent from the cadence to the person bounced
       * @example 0
       */
      bounces?: number;
      /**
       * @description The number of times a call was logged from the cadence to the person
       * @example 2
       */
      calls?: number;
      /**
       * @description The number of times emails sent from the cadence to the person were clicked
       * @example 5
       */
      clicks?: number;
      /**
       * @description The number of times emails sent from the cadence to the person were replied to
       * @example 2
       */
      replies?: number;
      /**
       * @description The number of times emails were sent from the cadence to the person
       * @example 4
       */
      sent_emails?: number;
      /**
       * @description The number of times emails sent from the cadence to the person were opened
       * @example 10
       */
      views?: number;
    };
    CalendarEvent: {
      /**
       * @description Whether the calendar event is an all-day event.
       * @example false
       */
      all_day?: string;
      /**
       * @description The attendees of the calendar event.
       * @example [
       *   {
       *     "deleted_at": null,
       *     "email": "alice@example.com",
       *     "name": "Alice",
       *     "organizer": true,
       *     "status": "accepted",
       *     "status_changed": false
       *   },
       *   {
       *     "deleted_at": null,
       *     "email": "bob@example.com",
       *     "name": "Bob",
       *     "organizer": false,
       *     "status": "accepted",
       *     "status_changed": false
       *   }
       * ]
       */
      attendees?: Record<string, never>;
      /**
       * @description Raw body content from Microsoft calendar events
       * @example some html text
       */
      body_html?: string;
      /**
       * @description Busy/free status of the calendar event
       * @example false
       */
      busy?: boolean;
      /**
       * @description Calendar ID of the user calendar.
       * @example test@example.com
       */
      calendar_id?: string;
      /**
       * @description The canceled date of the calendar event.
       * @example iso8601_now
       */
      canceled_at?: string;
      /**
       * @description The conference-related information, such as details of a Google Meet conference.
       * @example {}
       */
      conference_data?: Record<string, never>;
      /**
       * @description Creation time of the calendar event.
       * @example iso8601_now
       */
      created_at?: string;
      /**
       * @description The creator email of the calendar event.
       * @example creator@example.com
       */
      creator?: Record<string, never>;
      /**
       * @description Description of the calendar event
       * @example Calendar event description
       */
      description?: string;
      /**
       * Format: date-time
       * @description The (exclusive) end time of the calendar event.
       * @example 2022-08-23T08:18:47.853983Z
       */
      end_time?: string;
      /**
       * @description Extended properties of the calendar event.
       * @example {}
       */
      extended_properties?: Record<string, never>;
      /**
       * @description An absolute link to this calendar event in the Google Calendar Web UI.
       * @example https://www.google.com/calendar/event?eid=Y2N
       */
      html_link?: string;
      /**
       * @description Calendar event unique identifier (iCalUID)
       * @example 1p1oilmc4mt3m6ah6rmf6ik8mm@google.com
       */
      i_cal_uid?: string;
      /**
       * @description The calendar event original ID from calendar provider
       * @example AAMkADQ0NjE4YmY5LTc3ZDYtNDc5NC1-UlgAAAAAAENAAB3eGoN5TIDTp8dXXDpxUlgAACQlfLuAAA=
       */
      id?: string;
      /**
       * @description Location of the calendar event
       * @example Event location
       */
      location?: string;
      /**
       * @description The organizer email of the calendar event.
       * @example organizer@example.com
       */
      organizer?: string;
      /**
       * @description The provider of the calendar event.
       * @example google
       */
      provider?: string;
      /**
       * @description Whether the calendar event is a recurring event.
       * @example false
       */
      recurring?: string;
      /**
       * Format: date-time
       * @description The (inclusive) start time of the calendar event.
       * @example 2022-08-23T08:18:47.832113Z
       */
      start_time?: string;
      /**
       * @description The status of the calendar event. It can be empty for non-google events.
       * @example confirmed
       */
      status?: string;
      /**
       * @description Tenant ID of the user calendar
       * @example 1
       */
      tenant_id?: number;
      /**
       * @description Title of the calendar event
       * @example Calendar event title
       */
      title?: string;
      /**
       * @description Last modification time of the calendar event.
       * @example iso8601_now
       */
      updated_at?: string;
      /**
       * @description User GUID of the user calendar.
       * @example 9ccb7701-52e7-4d3e-91b0-b142a2fef2ec
       */
      user_guid?: string;
    };
    Call: {
      action?: components["schemas"]["EmbeddedResource"];
      cadence?: components["schemas"]["EmbeddedResource"];
      called_person?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the call was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      crm_activity?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Result of the call
       * @example Connected
       */
      disposition?: string;
      /**
       * @description Length of the call in seconds
       * @example 60
       */
      duration?: number;
      /**
       * @description ID of Call
       * @example 1
       */
      id?: number;
      note?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The recordings for this this call and their status
       * @example [
       *   {
       *     "recording_status": "completed",
       *     "status": "completed",
       *     "url": "https://example.com/recording1"
       *   }
       * ]
       */
      recordings?: components["schemas"]["EmbeddedRecordingResource"][];
      /**
       * @description Outcome of the conversation
       * @example Demo Scheduled
       */
      sentiment?: string;
      step?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Phone number that received the call
       * @example 7705551234
       */
      to?: string;
      /**
       * Format: date-time
       * @description Datetime of when the call was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    CallDataRecord: {
      call?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Type of the call. Can be one of: call, bridge, collaboration. Though exact values may change over time
       * @example call
       */
      call_type?: string;
      /**
       * @description UUID of the call. Legs of the same call will have the same call_uuid.
       * @example 5c5c1f32-bff1-4b7c-8f2a-bd650b829c67
       */
      call_uuid?: string;
      called_person?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the call was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description Direction of the call. Can be one of: inbound, outbound
       * @example outbound
       */
      direction?: string;
      /**
       * @description Length of the call in seconds
       * @example 60
       */
      duration?: number;
      /**
       * @description Phone number that placed the call
       * @example 7705551234
       */
      from?: string;
      /**
       * @description ID of CallDataRecord
       * @example 1
       */
      id?: number;
      recording?: components["schemas"]["EmbeddedRecordingResource"];
      /**
       * @description The outcome of the call. Can be one of: queued, initiated, ringing, in-progress, completed, busy, no-answer, canceled, failed
       * @example completed
       */
      status?: string;
      /**
       * @description Phone number that received the call
       * @example 7705551234
       */
      to?: string;
      /**
       * Format: date-time
       * @description Datetime of when the call was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    CallDisposition: {
      /**
       * Format: date-time
       * @description Datetime of when the call disposition was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description ID of CallDisposition
       * @example 1
       */
      id?: number;
      /**
       * @description An available call disposition text
       * @example Connected
       */
      name?: string;
      /**
       * Format: date-time
       * @description Datetime of when the call disposition was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    CallInstruction: {
      /**
       * Format: date-time
       * @description Datetime of when the call instructions were created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description ID of call instructions
       * @example 1
       */
      id?: number;
      /**
       * @description The instructions
       * @example Call once, leave voicemail if not answered. Conference conversation.
       */
      instructions?: string;
      /**
       * Format: date-time
       * @description Datetime of when the call instructions were last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    CallSentiment: {
      /**
       * Format: date-time
       * @description Datetime of when the call sentiment was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description ID of CallSentiment
       * @example 1
       */
      id?: number;
      /**
       * @description An available call sentiment text
       * @example Interested
       */
      name?: string;
      /**
       * Format: date-time
       * @description Datetime of when the call sentiment was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    CallerId: {
      /**
       * @description The account of the person calling
       * @example Bunty Soap Company
       */
      account_name?: string;
      /**
       * @description The name of the person calling
       * @example Frank Galikanokus
       */
      display_name?: string;
      person?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The title of the person calling
       * @example Transportation Coordinator
       */
      title?: string;
    };
    ConversationsCall: {
      /**
       * @description Timestamp for when the call started. If not provided, will default to the time the request was received
       * @example 2022-07-22 01:00:00
       */
      call_created_at?: string;
      /**
       * @description Call direction
       * @example Outbound
       */
      direction?: string;
      /**
       * @description Duration of call in seconds
       * @example 120
       */
      duration?: number;
      /**
       * @description Phone number that call was made from
       * @example 123-456-7890
       */
      from?: string;
      /**
       * @description Object containing recording info including the audio file (.mp3, .wav, .ogg, .m4a)
       * @example {
       *   "url": "www.example.com/audio.mp3"
       * }
       */
      recording?: Record<string, never>;
      /**
       * @description Phone number that was called
       * @example 123-456-7890
       */
      to?: string;
      /**
       * @description Guid of the Salesloft User to assign the call to. If not provided, will default to the user within the authentication token
       * @example aa111111-11aa-1111-a1a1-11aa11a1a1a1
       */
      user_guid?: string;
    };
    CrmActivity: {
      /**
       * @description The type of activity that is being recorded, if available. The values can change over time, but could be one of: email, phone, email reminder, inmail
       * @example phone
       */
      activity_type?: string;
      /**
       * Format: date-time
       * @description Datetime of when the crm activity was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description The ID of the activity in your CRM, if written to your CRM
       * @example 00T0H00003w2FBhUAM
       */
      crm_id?: string;
      /**
       * @description Additional fields that are logged to your CRM, if mapped by the team at the time of writing to your CRM
       * @example {
       *   "ecorp__Call_Type__c": "inbound follow up"
       * }
       */
      custom_crm_fields?: Record<string, never>;
      /**
       * @description The description field of the activity in your CRM
       * @example Timeline is 2 weeks for demo, set with Kate
       */
      description?: string;
      /**
       * @description Information about why this crm activity failed to sync, if it did fail to sync. Failed activities will be automatically retried and may become successful in the future
       * @example Could not find a CRM account link.
       */
      error?: string;
      /**
       * @description CrmActivity ID
       * @example 1
       */
      id?: number;
      person?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The subject field of the activity in your CRM
       * @example Call: Connected | Interested
       */
      subject?: string;
      /**
       * Format: date-time
       * @description Datetime of when the crm activity was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    CrmActivityField: {
      /**
       * Format: date-time
       * @description Datetime of when the CrmActivityField was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description The CRM object type that this field maps to. Valid object types are CRM dependent: Task, Phonecall, Email.
       *
       * @example Task
       */
      crm_object_type?: string;
      /**
       * @description The CRM field name
       * @example orgName__Field_Name__c
       */
      field?: string;
      /**
       * @description The type of this field in your CRM. Certain field types can only accept structured input.
       * @example boolean
       */
      field_type?: string;
      /**
       * @description ID of CrmActivityField
       * @example 1
       */
      id?: number;
      /**
       * @description Valid picklist values, if present for this field. The format is {label => value}. If present, only
       * values in the picklist structure can be used as a crm param.
       *
       * @example {
       *   "High": "High",
       *   "Low": "Low"
       * }
       */
      picklist_values?: Record<string, never>;
      /**
       * @description The Salesforce object type that this field maps to. Valid object types are: Task.
       * More object types may be added in the future.
       *
       * @example Task
       */
      salesforce_object_type?: string;
      /**
       * @description SalesLoft object that this field is mapped for. Valid sources are: email, phone
       * @example phone
       */
      source?: string;
      /**
       * @description A human friendly title for this field
       * @example Field Name
       */
      title?: string;
      /**
       * Format: date-time
       * @description Datetime of when the CrmActivityField was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      /**
       * @description A value to always be written. This value does not need to be sent to other endpoints' crm params,
       * but must be the exact value if sent. Email source fields will always have a value present.
       *
       * @example Email
       */
      value?: string;
    };
    CrmUser: {
      /**
       * Format: date-time
       * @description Datetime of when the crm user was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description CRM ID
       * @example 5003000000D8cuIQAA
       */
      crm_id?: string;
      /**
       * @description Crm User ID
       * @example 1
       */
      id?: number;
      /**
       * Format: date-time
       * @description Datetime of when the crm user was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    CustomField: {
      /**
       * Format: date-time
       * @description Datetime of when the Custom Field was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description Type of the Custom Field. Value must be one of: person, company, opportunity.
       * @example person
       */
      field_type?: string;
      /**
       * @description ID of Custom Field
       * @example 1
       */
      id?: number;
      /**
       * @description Name of the Custom Field
       * @example My Custom Field
       */
      name?: string;
      /**
       * Format: date-time
       * @description Datetime of when the Custom Field was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      /**
       * @description Value Type of the Custom Field. Value must be one of: text, date.
       * @example text
       */
      value_type?: string;
    };
    Email: {
      action?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Whether this email bounced
       * @example false
       */
      bounced?: boolean;
      cadence?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Whether this email had click tracking enabled
       * @example true
       */
      click_tracking?: boolean;
      counts?: components["schemas"]["EmailCounts"];
      /**
       * Format: date-time
       * @description Datetime of when the email was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      crm_activity?: components["schemas"]["EmbeddedResource"];
      email_template?: components["schemas"]["EmbeddedResource"];
      /** @description Error message of the email. This field has been determined sensitive and requires a specific scope to access it. */
      error_message?: string;
      /**
       * @description Selected headers that are included if this email used them. Available keys are: cc, bcc
       * @example {
       *   "bcc": "track@salesforce.com",
       *   "cc": "sb@salesloft.com"
       * }
       */
      headers?: Record<string, never>;
      /**
       * @description ID of Email
       * @example 1
       */
      id?: number;
      mailing?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Percentage of this email that has been personalized
       * @example 13.4
       */
      personalization?: string;
      recipient?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Email address of the recipient
       * @example bob.smith@example.com
       */
      recipient_email_address?: string;
      /**
       * Format: date-time
       * @description When this email will be sent, or null if already sent
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      send_after?: string;
      /**
       * Format: date-time
       * @description When this email was sent, or null if it was not sent
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      sent_at?: string;
      /**
       * @description Status of this email through the sending process. Possible values are: sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external
       * @example sent
       */
      status?: string;
      step?: components["schemas"]["EmbeddedResource"];
      /** @description Subject of the email. This field has been determined sensitive and requires a specific scope to access it. */
      subject?: string;
      task?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the email was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Whether this email had view tracking enabled
       * @example true
       */
      view_tracking?: boolean;
    };
    EmailCounts: {
      /**
       * @description The number of attachments on the email
       * @example 0
       */
      attachments?: number;
      /**
       * @description The number of times links in the email were clicked
       * @example 2
       */
      clicks?: number;
      /**
       * @description The number of replies the email received
       * @example 1
       */
      replies?: number;
      /**
       * @description The number of unique devices that opened the email
       * @example 4
       */
      unique_devices?: number;
      /**
       * @description The number of unique locations that opened the email
       * @example 3
       */
      unique_locations?: number;
      /**
       * @description The number of times the email was opened
       * @example 3
       */
      views?: number;
    };
    EmailTemplate: {
      /**
       * @description Links to attachments and tags resources for this email template.
       * @example {
       *   "attachments": "https://api.salesloft.com/v2/email_template_attachments?email_template_id[]=1"
       * }
       */
      _links?: Record<string, never>;
      /**
       * Format: date-time
       * @description Datetime of when the email template was archived, if archived
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      archived_at?: string;
      /**
       * @description Sanitized body of the email template without email signature
       * @example <div><div>Welcome to the SalesLoft family! My name is Sarah and I’m your implementation consultant. I’m here to get you up and running. It's my job to help you configure your team's SalesLoft access, provide customized training for your specific goals, and make sure that you and your team are ready to crush your goals.</div><div dir="ltr"><br></div>Thank you,<br></div>
       */
      body?: string;
      /**
       * @description A plain text version of the first 100 characters of the body of the email template
       * @example hello
       *
       * hey sounds good
       *
       * ok
       *
       * ok
       *
       * with an edit
       *
       * ok now i'm comic sans 14
       */
      body_preview?: string;
      /**
       * @description Whether this email template is only used on a cadence step. These templates are not visible in the SalesLoft application template list. If false, this email template is visible in the SalesLoft application, and may be used when composing an email or creating a cadence step.
       * @example true
       */
      cadence_template?: boolean;
      /**
       * @description Whether click tracking is enabled for this email template
       * @example true
       */
      click_tracking_enabled?: boolean;
      counts?: components["schemas"]["EmailTemplateCounts"];
      /**
       * Format: date-time
       * @description Datetime of when the email template was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description Groups to which this template is assigned, if any
       * @example [
       *   {
       *     "_href": "https://api.salesloft.com/v2/groups/921",
       *     "id": 921
       *   }
       * ]
       */
      groups?: components["schemas"]["EmbeddedResource"][];
      /**
       * @description ID of email template
       * @example 5
       */
      id?: number;
      /**
       * Format: date-time
       * @description Datetime of when the email template was last used
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      last_used_at?: string;
      /**
       * @description Whether open tracking is enabled for this email template
       * @example true
       */
      open_tracking_enabled?: boolean;
      /**
       * @description Whether this email template is visible to team members (shared)
       * @example false
       */
      shared?: boolean;
      /**
       * @description Subject of the email template
       * @example Welcome to SalesLoft!
       */
      subject?: string;
      /**
       * @description All tags applied to this email template
       * @example [
       *   "7-23-2017",
       *   "internal"
       * ]
       */
      tags?: string[];
      team_template?: components["schemas"]["EmbeddedResource"];
      template_owner?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Title of the email template
       * @example Welcome email
       */
      title?: string;
      /**
       * Format: date-time
       * @description Datetime of when the email template was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    EmailTemplateAttachment: {
      /**
       * @description Content type of the attachment
       * @example pdf, jpeg
       */
      attachment_content_type?: string;
      /**
       * @description The size of the attachment
       * @example 2
       */
      attachment_file_size?: number;
      /**
       * @description Unique attachment Identifier
       * @example 13231232
       */
      attachment_fingerprint?: number;
      /**
       * @description ID of the email template attachment
       * @example 10
       */
      attachment_id?: number;
      /**
       * @description Download url of the attachment
       * @example https://path/to/example_attachment.gif
       */
      download_url?: string;
      email_template?: components["schemas"]["EmbeddedResource"];
      /**
       * @description ID of email template attachment association
       * @example 5
       */
      id?: number;
      /**
       * @description Name of the attachment
       * @example example_attachment.gif
       */
      name?: string;
      /**
       * @description Checks if attachment has been scanned
       * @example true
       */
      scanned?: boolean;
    };
    EmailTemplateCounts: {
      /**
       * @description The number of bounces the email template received
       * @example 10
       */
      bounces?: number;
      /**
       * @description The number of times links in the email template were clicked
       * @example 20
       */
      clicks?: number;
      /**
       * @description The number of replies the email template received
       * @example 1
       */
      replies?: number;
      /**
       * @description The number of times the email template was sent out
       * @example 59
       */
      sent_emails?: number;
      /**
       * @description The number of times the email template was opened
       * @example 3
       */
      views?: number;
    };
    EmbeddedAccountCounts: {
      /**
       * @description Number of people in SalesLoft associated with this Account
       * @example 15
       */
      people?: number;
    };
    EmbeddedAttendeeResource: {
      /**
       * Format: date
       * @description Datetime of when the attendee was deleted
       * @example 2022-12-19T16:49:17.930926+02:00
       */
      deleted_at?: string;
      /**
       * @description Email of the attendee
       * @example calendar@example.com
       */
      email?: string;
      /**
       * @description Name of the attendee
       * @example John
       */
      name?: string;
      /**
       * @description Whether the attendee is the organizer of the event.
       * @example false
       */
      organizer?: boolean;
      /**
       * @description The attendee's response status. Possible values are: needsAction, accepted, tentative, declined
       * @example accepted
       */
      status?: string;
      /**
       * @description Whether the attendee changed response status
       * @example false
       */
      status_changed?: boolean;
    };
    EmbeddedRecordingResource: {
      /**
       * @description The processing status of the recording. Possible values are (but not limited to):
       *
       * not_recorded: there is no recording available, and there will not be one becoming available
       *
       * pending: the recording is currently being processed by the system
       *
       * processing: the recording is currently being processed by the system
       *
       * completed: the recording processing has been completed
       *
       * @example completed
       */
      recording_status?: string;
      /**
       * @description The status of the call that produced this recording. Possible values are (but not limited to):
       *
       * no-answer: The call was not answered
       *
       * failed: The call was not able to be placed
       *
       * busy: The call was busy
       *
       * ringing: The call is ringing
       *
       * in-progress: The call is ongoing
       *
       * completed: The call is finished
       *
       * @example completed
       */
      status?: string;
      /**
       * @description The url of the recording
       * @example http://example.com/recording/1
       */
      url?: string;
    };
    EmbeddedResource: {
      /**
       * @description Resource URL, pointed at your API version, present if this resource is available in the API
       * @example https://api.salesloft.com/v2/widgets/10
       */
      _href?: string;
      /**
       * @description ID of the resource
       * @example 10
       */
      id?: number;
    };
    EventMeetingSetting: {
      /**
       * @description Calendar owner's email address
       * @example calendar.owner@example.com
       */
      email_address?: string;
    };
    ExternalEmail: {
      /**
       * @description Message id present in the External Email header
       * @example CAKseEdbTMcU-U0CeTkUSo5X4jyW8QPReVTyPA6CrUCf0ggZwHQ@mail.salesloft.com
       */
      message_id?: string;
    };
    Group: {
      /**
       * @description Groups accessible if any
       * @example [
       *   {
       *     "_href": "https://api.salesloft.com/v2/groups/921",
       *     "id": 921
       *   }
       * ]
       */
      accessible_groups?: components["schemas"]["EmbeddedResource"][];
      /**
       * @description ID of the Group
       * @example 1
       */
      id?: number;
      /**
       * @description Name of the Group
       * @example Test name
       */
      name?: string;
      /**
       * @description ID of the parent Group
       * @example 2
       */
      parent_id?: number;
    };
    Import: {
      /**
       * Format: date-time
       * @description Datetime of when the import was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description Count of People that have not been deleted
       * @example 5
       */
      current_people_count?: number;
      /**
       * @description Import ID
       * @example 1
       */
      id?: number;
      /**
       * @description Count of People that have ever been on this Import
       * @example 7
       */
      imported_people_count?: number;
      /**
       * @description Name of Import
       * @example DataProvider -> SalesLoft 9/1/17
       */
      name?: string;
      /**
       * Format: date-time
       * @description Datetime of when the import was last updated, ignoring relationship changes
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    JobData: {
      /**
       * @description Associated bulk job
       * @example {"id": 123, "_href": "https://api.salesloft.com/v2/bulk_jobs/123"
       */
      bulk_job?: Record<string, never>;
      /**
       * Format: date-time
       * @description When this job data record was created
       * @example 2019-01-01T00:00:00-05:00
       */
      created_at?: string;
      /**
       * @description Error associated with this record
       * @example Not found
       */
      error?: string;
      /**
       * Format: date-time
       * @description When this job data record finished processing
       * @example 2019-01-01T00:00:00-05:00
       */
      finished_at?: string;
      /**
       * @description ID of this Job Data
       * @example 1
       */
      id?: number;
      /**
       * @description The data that was used to process the operation
       * @example {first_name: "John", last_name: "Smith"}
       */
      record?: Record<string, never>;
      /**
       * @description The object containing the resulting resource from performing the bulk action on this record
       * @example {person: {...}, upsert_type: "create"}
       */
      resource?: Record<string, never>;
      /**
       * Format: date-time
       * @description When this job data record started processing
       * @example 2019-01-01T00:00:00-05:00
       */
      started_at?: string;
      /**
       * @description Status of this job data. Must be one of: pending, success, error, retrying
       * @example success
       */
      status?: string;
    };
    JobDataCreationResult: {
      /**
       * @description Number of records created
       * @example 100
       */
      records?: number;
    };
    LiveFeedItem: {
      /**
       * @description Information about whether this event should trigger an alert
       * @example {
       *   "should_alert": true,
       *   "should_alert_until": "2019-01-01T00:00:00-05:00"
       * }
       */
      alert_metadata?: Record<string, never>;
      /**
       * Format: date-time
       * @description When this event occurred
       * @example 2019-01-01T00:00:00-05:00
       */
      event_occurred_at?: string;
      /**
       * @description The type of event
       * @example email_click
       */
      event_type?: string;
      /**
       * @description ID of this item
       * @example 1
       */
      id?: number;
      /**
       * @description A plaintext message for this event
       * @example Steve is visiting your website.
       */
      message?: string;
      /**
       * @description The metadata created for this event
       * @example {
       *   "email_id": 2,
       *   "email_subject": "Come join us at Rainmaker, Jon!",
       *   "mailing_id": 3,
       *   "person_id": 1
       * }
       */
      metadata?: Record<string, never>;
      /**
       * @description The path to the application that should be followed
       * @example /app/emails/detail/1
       */
      path?: string;
      /**
       * @description The key that should be used to rollup events client side. null or empty values should not be rolled up
       * @example email_click:10
       */
      rollup_key?: string;
      /**
       * @description A plaintext title for this event
       * @example Website Visit
       */
      title?: string;
      /**
       * @description UUID of the user this item is for
       * @example 51398ccd-309e-467f-aae2-4b0f66b5c11d
       */
      user_guid?: string;
    };
    LiveWebsiteTrackingParameter: {
      /**
       * @description A SalesLoft identifier
       * @example [
       *   {
       *     "name": "sbrc",
       *     "value": "tracking parameter"
       *   }
       * ]
       */
      parameters?: Record<string, never>[];
    };
    Meeting: {
      /**
       * @description ID of the account the recipient associated to
       * @example 1
       */
      account_id?: string;
      /**
       * @description Whether the meeting is an all-day meeting
       * @example false
       */
      all_day?: boolean;
      /**
       * @description The attendees of the meeting. Each attendee includes the following fields: status, email, name, organizer
       * @example [
       *   {
       *     "deleted_at": null,
       *     "email": "john@example.com",
       *     "name": "John",
       *     "organizer": true,
       *     "status": "accepted"
       *   }
       * ]
       */
      attendees?: components["schemas"]["EmbeddedAttendeeResource"][];
      booked_by_meetings_settings?: components["schemas"]["EventMeetingSetting"];
      booked_by_user?: components["schemas"]["EmbeddedResource"];
      cadence?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Calendar ID of the meeting owner
       * @example calendar-id-google.com
       */
      calendar_id?: string;
      /**
       * @description Calendar type of the meeting owner. Possible values are: gmail, azure, nylas, linkedin_azure, cerebro, external
       * @example gmail
       */
      calendar_type?: string;
      /**
       * Format: date
       * @description Datetime of when the meeting was canceled
       * @example 2022-12-19T16:49:17.931396+02:00
       */
      canceled_at?: string;
      /**
       * Format: date
       * @description Datetime of when the meeting was created
       * @example 2022-12-19T16:49:17.930298+02:00
       */
      created_at?: string;
      /**
       * @description List of crm custom fields which will be logged to SFDC
       * @example {
       *   "Event_Calendar_Type__c": "Google"
       * }
       */
      crm_custom_fields?: Record<string, never>;
      /**
       * @description List of crm references associated with the meeting
       * @example {
       *   "what": {
       *     "crm_id": "0063X000018fDmMQAU",
       *     "crm_object_label": "Opportunity",
       *     "crm_object_type": "Opportunity",
       *     "crm_url": "link_to_salesforce",
       *     "description1": "Title of the opportunity",
       *     "description2": "2032-01-10",
       *     "description3": "Prospecting"
       *   },
       *   "who": {
       *     "crm_id": "0033X00004GOywtQAD",
       *     "crm_object_label": "Contact",
       *     "crm_object_type": "Contact",
       *     "crm_url": "link_to_salesforce",
       *     "description1": "John Doe",
       *     "description2": "john.doe@example.com",
       *     "description3": null
       *   }
       * }
       */
      crm_references?: Record<string, never>;
      /**
       * @description Description of the meeting
       * @example Introducing interview
       */
      description?: string;
      /**
       * Format: date
       * @description End time of the meeting
       * @example 2022-12-19T16:49:17.917861+02:00
       */
      end_time?: string;
      /**
       * @description ID of the meeting created by target calendar
       * @example 123468796
       */
      event_id?: string;
      /**
       * @description Source of the meeting. Possible values are: 'external' - The event was synced to Salesloft platform via Calendar Sync, 'internal' - The event was created via Salesloft platform
       * @example external
       */
      event_source?: string;
      /**
       * @description The list of attendees emails of the meeting
       * @example [
       *   "email1@sloft.com",
       *   "email2@sloft.com"
       * ]
       */
      guests?: string[];
      /**
       * @description UID of the meeting provided by target calendar provider
       * @example 040P00B08200E00074C5B7101A82EF
       */
      i_cal_uid?: string;
      /**
       * @description ID of the meeting
       * @example 1
       */
      id?: number;
      /**
       * @description Location of the meeting
       * @example Atlanta, GA
       */
      location?: string;
      /**
       * @description Meeting type
       * @example Demo call
       */
      meeting_type?: string;
      /**
       * @description Whether the meeting is a No Show meeting
       * @example false
       */
      no_show?: boolean;
      owned_by_meetings_settings?: components["schemas"]["EventMeetingSetting"];
      person?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Email of the meeting invite recipient
       * @example email@sloft.com
       */
      recipient_email?: string;
      /**
       * @description Name of the meeting invite recipient
       * @example John Doe
       */
      recipient_name?: string;
      /**
       * Format: date
       * @description Start time of the meeting
       * @example 2022-12-19T16:49:17.917818+02:00
       */
      start_time?: string;
      /**
       * @description Status of the meeting. Possible values are: pending, booked, failed, retry
       * @example booked
       */
      status?: string;
      step?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Strict attribution means that we 100% sure which cadence generate the meeting
       * @example false
       */
      strict_attribution?: boolean;
      /**
       * @description ID of the created task
       * @example 123
       */
      task_id?: string;
      /**
       * @description Title of the meeting
       * @example Meeting with John
       */
      title?: string;
      /**
       * Format: date
       * @description Datetime of when the meeting was last updated
       * @example 2022-12-19T16:49:17.930340+02:00
       */
      updated_at?: string;
    };
    MeetingSetting: {
      active_meeting_url?: components["schemas"]["MeetingUrl"];
      /**
       * @description Allow other team members to schedule on you behalf.
       * @example true
       */
      allow_booking_on_behalf?: boolean;
      /**
       * @description Allow team members to insert available time outside your working hours.
       * @example true
       */
      allow_booking_overtime?: boolean;
      /**
       * @description Allow team members to double book events on your calendar.
       * @example false
       */
      allow_event_overlap?: boolean;
      /**
       * @description The number of days out the user allows a prospect to schedule a meeting
       * @example 14
       */
      availability_limit?: number;
      /**
       * @description If Availability Limits have been turned on
       * @example true
       */
      availability_limit_enabled?: boolean;
      /**
       * @description Default buffer duration in minutes set by a user
       * @example 15
       */
      buffer_time_duration?: number;
      /**
       * @description Calendar type
       * @example gmail
       */
      calendar_type?: string;
      /**
       * Format: date
       * @description Datetime of when the MeetingSetting was created
       * @example 2022-09-15T11:40:59.055583+03:00
       */
      created_at?: string;
      /**
       * @description Default meeting length in minutes set by the user
       * @example 30
       */
      default_meeting_length?: number;
      /**
       * @description Default description of the meeting
       * @example This meeting is held on a daily basis
       */
      description?: string;
      /**
       * @description Calendar owner's email address
       * @example calendar.owner@example.com
       */
      email_address?: string;
      /**
       * @description Determines if a user enabled Calendar Sync feature
       * @example false
       */
      enable_calendar_sync?: boolean;
      /**
       * @description Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)
       * @example false
       */
      enable_dynamic_location?: boolean;
      /**
       * @description ID of the MeetingSetting
       * @example 1
       */
      id?: number;
      /**
       * @description Default location of the meeting
       * @example Atlanta, GA
       */
      location?: string;
      /**
       * @description Gets true when any issue with fetching calendar occurs
       * @example false
       */
      primary_calendar_connection_failed?: boolean;
      /**
       * @description ID of the primary calendar
       * @example a98iu0@group.calendar.google.com
       */
      primary_calendar_id?: string;
      /**
       * @description Display name of the primary calendar
       * @example My Meetings Calendar
       */
      primary_calendar_name?: string;
      /**
       * @description Determines if meetings are scheduled with a 15 minute buffer between them
       * @example true
       */
      schedule_buffer_enabled?: boolean;
      /**
       * @description The number of hours in advance a user requires someone to a book a meeting with them
       * @example 2
       */
      schedule_delay?: number;
      /**
       * @description Allow team members to see the details of events on your calendar.
       * @example false
       */
      share_event_detail?: boolean;
      /**
       * @description Time zone for current calendar
       * @example US/Eastern
       */
      time_zone?: string;
      /**
       * @description Times available set by a user that can be used to book meetings
       * @example {
       *   "monday": {
       *     "enabled": true,
       *     "end_time": "17:00",
       *     "start_time": "09:00"
       *   }
       * }
       */
      times_available?: Record<string, never>;
      /**
       * @description Default title of the meeting
       * @example Daily stand-up
       */
      title?: string;
      /**
       * Format: date
       * @description Datetime of when the MeetingSetting was last updated
       * @example 2022-09-15T11:40:59.055628+03:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
      /**
       * @description User details
       * @example {
       *   "email": "john.doe@salesloft.com",
       *   "name": "John Doe"
       * }
       */
      user_details?: Record<string, never>;
      /**
       * @description User slug generated with a full name of the user
       * @example john-doe
       */
      user_slug?: string;
    };
    MeetingUrl: {
      /**
       * Format: date
       * @description Datetime of when MeetingUrl was created
       * @example 2022-09-15T11:40:59.056237+03:00
       */
      created_at?: string;
      /**
       * Format: date
       * @description Datetime of when MeetingUrl was last updated
       * @example 2022-09-15T11:40:59.056272+03:00
       */
      updated_at?: string;
      /**
       * @description Full url of the meeting
       * @example https://example.com/team/user
       */
      url?: string;
    };
    MimeEmailPayload: {
      /**
       * @description Email ID
       * @example 1
       */
      id?: number;
      /**
       * @description Email Address of Sender's mailbox
       * @example example@salesloft.com
       */
      mailbox?: string;
      /**
       * @description Unique Message ID
       * @example CAKseEdbTMcU-U0CeTkUSo5X4jyW8QPReVTyPA6CrUCf0ggZwHQ@mail.salesloft.com
       */
      message_id?: string;
      /**
       * @description Base64 encoded MIME email content
       * @example ZW1haWwgZXhhbXBsZQ==
       */
      raw?: string;
    };
    Note: {
      /**
       * @description Type of associated resource ('person' or 'account')
       * @example person
       */
      associated_type?: string;
      associated_with?: components["schemas"]["EmbeddedResource"];
      call?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The content of the note
       * @example Was very interested in a demo at a later time
       */
      content?: string;
      /**
       * Format: date-time
       * @description Datetime of when the note was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description Note ID
       * @example 1
       */
      id?: number;
      /**
       * Format: date-time
       * @description Datetime of when the note was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    PendingEmail: {
      /**
       * @description ID of the email
       * @example 1
       */
      id?: number;
      /**
       * @description Email Address of the pending email
       * @example example@salesloft.com
       */
      mailbox?: string;
      mime_email_payload?: components["schemas"]["EmbeddedResource"];
    };
    Person: {
      account?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Whether this person's current email address has bounced
       * @example false
       */
      bouncing?: boolean;
      /**
       * @description The list of active cadences person is added to
       * @example [
       *   {
       *     "_href": "https://api.salesloft.com/v2/cadences/1",
       *     "id": 1
       *   }
       * ]
       */
      cadences?: components["schemas"]["EmbeddedResource"][];
      /**
       * @description City
       * @example Atlanta
       */
      city?: string;
      /**
       * @description Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message
       * @example [
       *   "call",
       *   "email",
       *   "message"
       * ]
       */
      contact_restrictions?: string[];
      /**
       * @description Country
       * @example United States
       */
      country?: string;
      counts?: components["schemas"]["PersonCounts"];
      /**
       * Format: date-time
       * @description Datetime of when the person was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description CRM ID
       * @example 003i000001mnhpD
       */
      crm_id?: string;
      /**
       * @description CRM object type
       * @example Lead
       */
      crm_object_type?: string;
      /**
       * @description CRM url
       * @example https://na15.salesforce.com/003i000001mnhpD
       */
      crm_url?: string;
      /**
       * @description Custom fields are defined by the user's team. Only fields with values are presented in the API.
       * @example {
       *   "MyField": "A Value",
       *   "Other": "Field"
       * }
       */
      custom_fields?: Record<string, never>;
      /**
       * @description Either the full name or the email address. Use this when showing a person's name
       * @example Pat Johnson
       */
      display_name?: string;
      /**
       * @description Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.
       * @example true
       */
      do_not_contact?: boolean;
      /**
       * @description Email address
       * @example pat.johnson@example.com
       */
      email_address?: string;
      /**
       * @description Whether this person is marked as a European Union Resident or not
       * @example false
       */
      eu_resident?: boolean;
      /**
       * @description First name
       * @example Pat
       */
      first_name?: string;
      /**
       * @description Full email address with name
       * @example Pat Johnson <pat.johnson@example.com>
       */
      full_email_address?: string;
      /**
       * @description Home phone without formatting
       * @example +1 444 555 6666
       */
      home_phone?: string;
      /**
       * @description Person ID
       * @example 1
       */
      id?: number;
      import?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown
       * @example vice_president
       */
      job_seniority?: string;
      last_completed_step?: components["schemas"]["EmbeddedResource"];
      last_completed_step_cadence?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Last datetime this person was contacted
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      last_contacted_at?: string;
      last_contacted_by?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The type of the last touch to this person. Can be call, email, other
       * @example call
       */
      last_contacted_type?: string;
      /**
       * @description Last name
       * @example Johnson
       */
      last_name?: string;
      /**
       * Format: date-time
       * @description Last datetime this person replied to an email
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      last_replied_at?: string;
      /**
       * @description Linkedin URL
       * @example https://www.linkedin.com/in/username
       */
      linkedin_url?: string;
      /**
       * @description Time locale of the person
       * @example US/Eastern
       */
      locale?: string;
      /**
       * @description The locale's timezone offset from UTC in minutes
       * @example -480
       */
      locale_utc_offset?: number;
      /**
       * @description Mobile phone without formatting
       * @example +1 444 555 6666
       */
      mobile_phone?: string;
      most_recent_cadence?: components["schemas"]["EmbeddedResource"];
      owner?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Mapped owner field from your CRM
       * @example 003i000001mnhpD
       */
      owner_crm_id?: string;
      /**
       * @description Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
       * @example Information Technology
       */
      person_company_industry?: string;
      /**
       * @description Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
       * @example SalesLoft
       */
      person_company_name?: string;
      /**
       * @description Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
       * @example https://salesloft.com
       */
      person_company_website?: string;
      person_stage?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Personal email address
       * @example pat.johnson@example.com
       */
      personal_email_address?: string;
      /**
       * @description The website of this person
       * @example https://salesloft.com
       */
      personal_website?: string;
      /**
       * @description Phone without formatting
       * @example +1 444 555 6666
       */
      phone?: string;
      /**
       * @description Phone extension without formatting
       * @example x123
       */
      phone_extension?: string;
      /**
       * @description Alternate email address
       * @example pat.johnson@example.com
       */
      secondary_email_address?: string;
      /**
       * @description Whether this person is starred by the current user
       * @example true
       */
      starred?: boolean;
      /**
       * @description State
       * @example Georgia
       */
      state?: string;
      /**
       * @description The person's success count. 1 if person has any active successes, 0 otherwise.
       * @example 1
       */
      success_count?: number;
      /**
       * @description All tags applied to this person
       * @example [
       *   "7-23-2017",
       *   "dreamforce"
       * ]
       */
      tags?: string[];
      /**
       * @description Job title
       * @example Sales Development Representative
       */
      title?: string;
      /**
       * @description The twitter handle of this person
       * @example @kyleporter
       */
      twitter_handle?: string;
      /**
       * @description The person's untouched status
       * @example false
       */
      untouched?: boolean;
      /**
       * Format: date-time
       * @description Datetime of when the person was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      /**
       * @description Work location - city
       * @example Atlanta
       */
      work_city?: string;
      /**
       * @description Work location - country
       * @example United States
       */
      work_country?: string;
      /**
       * @description Work location - state
       * @example Georgia
       */
      work_state?: string;
    };
    PersonCounts: {
      /**
       * @description The number of calls logged to this person
       * @example 4
       */
      calls?: number;
      /**
       * @description The number of unique emails sent to this person that bounced
       * @example 0
       */
      emails_bounced?: number;
      /**
       * @description The number of unique emails clicked by this person
       * @example 1
       */
      emails_clicked?: number;
      /**
       * @description The number of unique emails replied to by this person
       * @example 0
       */
      emails_replied_to?: number;
      /**
       * @description The number of emails sent to this person
       * @example 3
       */
      emails_sent?: number;
      /**
       * @description The number of unique emails viewed by this person
       * @example 2
       */
      emails_viewed?: number;
    };
    PersonStage: {
      /**
       * Format: date-time
       * @description Datetime of when the Person Stage was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description ID of Person Stage
       * @example 1
       */
      id?: number;
      /**
       * @description Name of Person Stage
       * @example Entry Stage
       */
      name?: string;
      /**
       * @description Sortable value of Person Stage order
       * @example 16
       */
      order?: number;
      /**
       * Format: date-time
       * @description Datetime of when the Person Stage was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    PersonUpsert: {
      person?: components["schemas"]["Person"];
      /** @description The type of upsert. One of: create, update */
      upsert_type?: string;
    };
    PhoneNumberAssignment: {
      /**
       * @description PhoneNumberAssignment ID
       * @example 1
       */
      id?: number;
      /**
       * @description The phone number associated with this assignment
       * @example +12223334444
       */
      number?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    RecordingSetting: {
      /**
       * @description Whether this phone number should record by default
       * @example true
       */
      recording_default?: boolean;
    };
    SavedListView: {
      /**
       * @description ID of Ssaved list view
       * @example 1
       */
      id?: number;
      /**
       * @description Whether the saved list view is the default view
       * @example true
       */
      is_default?: boolean;
      /**
       * @description Name of saved list view
       * @example Tom's Prospects
       */
      name?: string;
      /**
       * @description Type of saved list view
       * @example companies
       */
      view?: string;
      /**
       * @description List of set filters in saved list view
       * @example {
       *   "owner": "unowned",
       *   "stage": "28865",
       *   "unowned": true
       * }
       */
      view_params?: Record<string, never>;
    };
    Step: {
      enabled: boolean;
      name: string;
    } & OneOf<[{
      /** @enum {string} */
      type: "Phone";
      type_settings: {
        instructions: string;
      };
    }, {
      /** @enum {string} */
      type: "Other";
      type_settings: {
        instructions: string;
      };
    }, {
      /** @enum {string} */
      type: "Integration";
      type_settings: {
        instructions: string;
        integration_id: number;
        integration_step_type_guid: string;
      };
    }, {
      /** @enum {string} */
      type: "Email";
      type_settings: {
        previous_email_step_group_reference_id?: number;
        email_template?: {
          title?: string;
          subject?: string;
          body?: string;
        };
      };
    }]>;
    Subscription: {
      /**
       * @description SalesLoft will include this token in the webhook event payload when calling your callback_url. It is strongly encouraged for your handler to verify this value in order to ensure the request came from SalesLoft.
       * @example xT7/Buu0Vz2ffiIPuMlBGu+cwku1dr7G5jeiM0iyfYIT0l4z3azNGjiXWTOX/8OT
       */
      callback_token?: string;
      /**
       * @description URL for your callback handler
       * @example https://mycompany.com/api/person_called_handler
       */
      callback_url?: string;
      /**
       * @description Is the Webhook Subscription enabled or not
       * @example true
       */
      enabled?: boolean;
      /**
       * @description Type of event the subscription is for
       * @example link_swap
       */
      event_type?: string;
      /**
       * @description ID for the Webhook Subscription
       * @example 1
       */
      id?: number;
      /**
       * @description ID for the tenant to which user is assigned
       * @example 16
       */
      tenant_id?: number;
      /**
       * @description UUID of the user the token is associated with
       * @example 51398ccd-309e-467f-aae2-4b0f66b5c11d
       */
      user_guid?: string;
    };
    Success: {
      counts?: components["schemas"]["SuccessCounts"];
      /**
       * Format: date-time
       * @description Datetime of when the success was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description ID of success
       * @example 1
       */
      id?: number;
      latest_action?: components["schemas"]["EmbeddedResource"];
      latest_cadence?: components["schemas"]["EmbeddedResource"];
      latest_call?: components["schemas"]["EmbeddedResource"];
      latest_email?: components["schemas"]["EmbeddedResource"];
      latest_step?: components["schemas"]["EmbeddedResource"];
      person?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the success was recorded
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      succeeded_at?: string;
      /**
       * Format: date-time
       * @description Datetime of when this person was first worked, leading up to the success
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      success_window_started_at?: string;
      /**
       * Format: date-time
       * @description Datetime of when the success was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    SuccessCounts: {
      /**
       * @description The total number of calls made in this success window
       * @example 5
       */
      total_calls?: number;
      /**
       * @description The total number of emails made in this success window
       * @example 2
       */
      total_emails?: number;
      /**
       * @description The total number of other touches made in this success window
       * @example 3
       */
      total_other_touches?: number;
    };
    Tag: {
      /**
       * @description ID of Tag
       * @example 1
       */
      id?: number;
      /**
       * @description Name of the tag
       * @example marketing
       */
      name?: string;
    };
    Task: {
      /**
       * Format: date-time
       * @description Datetime of when the task was completed, ISO-8601 datetime format required
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      completed_at?: string;
      completed_by?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the Task was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      created_by_user?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The state of the task. Valid states are: scheduled, completed
       * @example scheduled
       */
      current_state?: string;
      /**
       * @description A description of the task recorded for person at completion time
       * @example Ask John Wick about his dog.
       */
      description?: string;
      /**
       * Format: date-time
       * @description Datetime of when the Task is due, can be null.  ISO-8601 datetime format required
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      due_at?: string;
      /**
       * Format: date
       * @description Date of when the Task is due, ISO-8601 date format required
       * @example 2024-01-01
       */
      due_date?: string;
      /**
       * @description ID of Task
       * @example 1
       */
      id?: number;
      person?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the user will be reminded of the task, ISO-8601 datetime format required
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      remind_at?: string;
      /**
       * @description Subject line of the task
       * @example Call John Wick
       */
      subject?: string;
      /**
       * @description The type of the task.  Valid types are: call, email, general
       * @example call
       */
      task_type?: string;
      /**
       * Format: date-time
       * @description Datetime of when the Task was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      user?: components["schemas"]["EmbeddedResource"];
    };
    Team: {
      /**
       * @description For internal use only. This field does not comply with our backwards compatability policies.
       * @example {}
       */
      _private_fields?: Record<string, never>;
      /**
       * @description Whether team members are allowed to have automated email steps
       * @example true
       */
      allow_automated_email_steps?: boolean;
      /**
       * @description Whether all call recording is disabled
       * @example false
       */
      call_recording_disabled?: boolean;
      /**
       * @description The team default for click tracking when composing emails
       * @example true
       */
      click_tracking_default?: boolean;
      /**
       * Format: date-time
       * @description Datetime of when the team was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description The domain click and open tracking will be proxied through
       * @example examplecompany.com
       */
      custom_tracking_domain?: string;
      /**
       * @description Indicates if the team has been deactivated
       * @example true
       */
      deactivated?: boolean;
      /**
       * @description Whether team members are required to mark disposition at the end of calls
       * @example false
       */
      dispositions_required?: boolean;
      /**
       * @description Daily email limit for each member on the team
       * @example 1000
       */
      email_daily_limit?: number;
      /**
       * @description Visibility setting for resources across the team. Possible values are: group_public, all_public.
       * When the value is group_public, certain resources will only be visible to members of the same group.
       * When the value is all_public, all resources are visible to all users on this team.
       *
       * @example all_public
       */
      group_privacy_setting?: string;
      /**
       * @description Team ID
       * @example 1
       */
      id?: number;
      /**
       * @description Count of seats that this team has licensed
       * @example 100
       */
      license_limit?: number;
      /**
       * @description Whether this team has local dial enabled
       * @example true
       */
      local_dial_enabled?: boolean;
      /**
       * @description Team name
       * @example The A-Team
       */
      name?: string;
      /**
       * @description Plan type of the team, Possible values are: group, professional, enterprise
       * @example professional
       */
      plan?: string;
      /**
       * @description Add on features for this team
       * @example {
       *   "opportunity_management": "Opportunity Management"
       * }
       */
      plan_features?: Record<string, never>;
      /**
       * @description Whether calls will record by default
       * @example true
       */
      record_by_default?: boolean;
      /**
       * @description Whether team members are required to log sentiments
       * @example false
       */
      sentiments_required?: boolean;
      /**
       * @description The default visibility of resources on the team, in the UI only. The API does not utilize this default.
       * Possible values are: public, private.
       *
       * @example public
       */
      team_visibility_default?: string;
      /**
       * Format: date-time
       * @description Datetime of when the team was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    TeamTemplate: {
      /**
       * @description Links to attachments resource for this template
       * @example {
       *   "attachments": "https://api.salesloft.com/v2/team_template_attachments?team_template_id[]=1"
       * }
       */
      _links?: Record<string, never>;
      /**
       * Format: date-time
       * @description Datetime of when the team template was archived, if archived
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      archived_at?: string;
      /**
       * @description Body of the team template
       * @example <div>Do you know about birds?</div><div>You can find them here: <a href="https://www.allaboutbirds.org/guide/search/" target="_blank">https://www.allaboutbirds.org/guide/search/</a></div>
       */
      body?: string;
      /**
       * @description A plain text version of the first 100 characters of the body of the team template
       * @example hello
       *
       * hey sounds good
       *
       * ok
       *
       * ok
       *
       * with an edit
       *
       * ok now i'm comic sans 14
       */
      body_preview?: string;
      /**
       * @description Whether click tracking is enabled for this team template
       * @example true
       */
      click_tracking_enabled?: boolean;
      counts?: components["schemas"]["TeamTemplateCounts"];
      /**
       * Format: date-time
       * @description Datetime of when the team template was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description ID of team template
       * @example 51226150-3108-4dea-883b-0c0d7388f456
       */
      id?: string;
      /**
       * Format: date-time
       * @description Datetime of when the team template was last modified
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      last_modified_at?: string;
      last_modified_user?: components["schemas"]["EmbeddedResource"];
      /**
       * Format: date-time
       * @description Datetime of when the team template was last used
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      last_used_at?: string;
      /**
       * @description Whether open tracking is enabled for this team template
       * @example true
       */
      open_tracking_enabled?: boolean;
      /**
       * @description Subject of the team template
       * @example It’s time to say goodbye
       */
      subject?: string;
      /**
       * @description All tags applied to this team template
       * @example [
       *   "7-23-2017",
       *   "internal"
       * ]
       */
      tags?: string[];
      /**
       * @description Title of the team template
       * @example VP Breakup Email
       */
      title?: string;
      /**
       * Format: date-time
       * @description Datetime of when the team template was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
    };
    TeamTemplateAttachment: {
      /**
       * @description The size of the attachment
       * @example 2
       */
      attachment_file_size?: number;
      /** @description ID of the team template attachment */
      attachment_id?: number;
      /**
       * @description Download url of the attachment
       * @example https://path/to/example_attachment.gif
       */
      download_url?: string;
      /**
       * @description ID of team template attachment association
       * @example 5
       */
      id?: number;
      /**
       * @description Name of the attachment
       * @example example_attachment.gif
       */
      name?: string;
      team_template?: components["schemas"]["EmbeddedResource"];
    };
    TeamTemplateCounts: {
      /**
       * @description The number of bounces the team template received
       * @example 10
       */
      bounces?: number;
      /**
       * @description The number of times links in the team template were clicked
       * @example 20
       */
      clicks?: number;
      /**
       * @description The number of replies the team template received
       * @example 1
       */
      replies?: number;
      /**
       * @description The number of times the team template was sent out
       * @example 59
       */
      sent_emails?: number;
      /**
       * @description The number of times the team template was opened
       * @example 3
       */
      views?: number;
    };
    User: {
      /**
       * @description For internal use only. This field does not comply with our backwards compatability policies.
       * @example {}
       */
      _private_fields?: Record<string, never>;
      /**
       * @description Whether an user is currently active in SalesLoft
       * @example true
       */
      active?: boolean;
      /**
       * @description Address that will be BBC'd on all emails from this user
       * @example fake@salesloft.com
       */
      bcc_email_address?: string;
      /**
       * @description Whether this user has click to call enabled
       * @example true
       */
      click_to_call_enabled?: boolean;
      /**
       * Format: date-time
       * @description Datetime of when the user was created
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      created_at?: string;
      /**
       * @description Whether the user has a crm connected
       * @example true
       */
      crm_connected?: boolean;
      /**
       * @description Email address provided to accounts.salesloft.com
       * @example fake@salesloft.com
       */
      email?: string;
      /**
       * @description Whether this user has a email client configured
       * @example true
       */
      email_client_configured?: boolean;
      /**
       * @description Email address associated with the email client of the user
       * @example fake@salesloft.com
       */
      email_client_email_address?: string;
      /**
       * @description Email signature
       * @example Benjamin Franklin<div></div><div></div>
       */
      email_signature?: string;
      /**
       * @description Whether this user has click tracking disabled in email signature
       * @example false
       */
      email_signature_click_tracking_disabled?: boolean;
      /**
       * @description Email signature type
       * @example html
       */
      email_signature_type?: string;
      /**
       * @description Feature flags that are for this user. New flags may appear or disappear at any time
       * @example {}
       */
      external_feature_flags?: Record<string, never>;
      /**
       * @description First name of user
       * @example Benjamin
       */
      first_name?: string;
      /**
       * @description The from address of this user
       * @example fake@salesloft.com
       */
      from_address?: string;
      /**
       * @description RFC 5322 compliant email address
       * @example "Benjamin Franklin" <Benjamin@salesloft.com>
       */
      full_email_address?: string;
      group?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Globally unique user ID. New endpoints will explicitly accept this over id
       * @example 9cc6da15-d403-4f5b-aeed-c4b8463cf9ae
       */
      guid?: string;
      /**
       * @description User ID
       * @example 1
       */
      id?: number;
      /**
       * @description Job role of user
       * @example SDR / BDR
       */
      job_role?: string;
      /**
       * @description Last name of user
       * @example Franklin
       */
      last_name?: string;
      /**
       * @description Whether this user has Local Dial enabled
       * @example true
       */
      local_dial_enabled?: boolean;
      /**
       * @description Display name of user
       * @example Benjamin Franklin
       */
      name?: string;
      phone_client?: components["schemas"]["EmbeddedResource"];
      phone_number_assignment?: components["schemas"]["EmbeddedResource"];
      role?: components["schemas"]["EmbeddedResource"];
      /**
       * @description The email address that email of the user will be sent from, resolved in the following resolution order: from_user, email_client_email_address, email
       * @example fake@salesloft.com
       */
      sending_email_address?: string;
      /**
       * @description Slack username
       * @example benjamin-franklin
       */
      slack_username?: string;
      team?: components["schemas"]["EmbeddedResource"];
      /**
       * @description Team Admin
       * @example true
       */
      team_admin?: boolean;
      /**
       * @description User Time Zone
       * @example US/Eastern
       */
      time_zone?: string;
      /**
       * @description Twitter handle
       * @example @benjamin-franklin
       */
      twitter_handle?: string;
      /**
       * Format: date-time
       * @description Datetime of when the user was last updated
       * @example 2023-01-01T00:00:00.000000-05:00
       */
      updated_at?: string;
      /**
       * @description Work Country
       * @example PE
       */
      work_country?: string;
    };
    CadenceSettings: {
      name: string;
      target_daily_people: number;
      remove_replied: boolean;
      remove_bounced: boolean;
      remove_people_when_meeting_booked?: boolean;
      external_identifier: (string | number) | null;
      /** @enum {string} */
      cadence_function: "outbound" | "inbound" | "event" | "other";
    };
    CadenceSharingSettings: {
      team_cadence: boolean;
      shared: boolean;
    };
    StepGroup: {
      automated_settings?: components["schemas"]["StepGroupAutomatedSettings"];
      automated: boolean;
      day: number;
      due_immediately: boolean;
      reference_id?: number | null;
      steps: components["schemas"]["Step"][];
    };
    StepGroupAutomatedSettings: {
      /** @description Determines whether or not the step is able to be sent on weekends */
      allow_send_on_weekends?: boolean;
    } & (OneOf<[{
      /**
       * @description Describes if the step is due immediately or not.
       *         Must be either "at_time" or "after_time_delay".
       * @enum {string}
       */
      send_type: "at_time";
      /** @description The time that the automated action will happen. e.g. 09:00 */
      time_of_day: string;
      /**
       * @description Specifies whether the email is sent after the person's timezone
       *         or the user's timezone.
       *         Must be either "person" or "user".
       */
      timezone_mode: "person" | "user";
    }, {
      /**
       * @description Describes if the step is due immediately or not.
       *         Must be either "at_time" or "after_time_delay".
       * @enum {string}
       */
      send_type: "after_time_delay";
      /** @description must be a number between 0 and 720 (minutes */
      delay_time: number;
    }]>);
  };
  responses: never;
  parameters: never;
  requestBodies: {
    postV2ImportsJson?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name, recommended to be easily identifiable to a user */
          name?: string;
          /** @description ID of the User that owns this Import */
          user_id?: number;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  importCadence: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CadenceImport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data: {
              cadence: {
                id: number;
              };
            };
          };
        };
      };
    };
  };
  exportCadence: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CadenceExport"];
        };
      };
    };
  };
}
