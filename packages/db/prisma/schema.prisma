// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPAGLUE_DATABASE_URL")
}

model Application {
  id          String        @id @default(uuid())
  name        String
  config      Json
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  orgId       String        @map("org_id")
  Customer    Customer[]
  Integration Integration[]

  @@unique([orgId, name])
  @@map("applications")
}

model Customer {
  id                 String       @id // `applicationId:externalIdentifier`
  externalIdentifier String       @map("external_identifier")
  applicationId      String       @map("application_id")
  application        Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  connections        Connection[]
  name               String
  email              String
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  @@unique([applicationId, externalIdentifier])
  @@map("customers")
}

model Integration {
  id            String       @id @default(uuid())
  applicationId String       @map("application_id")
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  authType      String       @map("auth_type") // [oauth2]
  category      String
  providerName  String       @map("provider_name") // [salesforce, hubspot]
  config        Json? // {provider_app_id, oauth_client_id, oauth_client_secret, oauth_scopes}
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  connections   Connection[]

  @@unique([applicationId, providerName])
  @@map("integrations")
}

model IntegrationChange {
  id            String   @id @default(uuid())
  integrationId String   @map("integration_id")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("integration_changes")
}

model Connection {
  id            String      @id @default(uuid())
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId String      @map("integration_id")
  // CRM, HRIS, etc.
  category      String
  // Salesforce, Hubspot, etc.
  providerName  String      @map("provider_name")
  status        String // available | added | authorized | callable
  credentials   Bytes // encrypted, {type, access_token, refresh_token, expires_at, raw}
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String      @map("customer_id")
  /// Deprecated
  remoteId      String      @map("remote_id")
  instanceUrl   String      @default("") @map("instance_url")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  sync          Sync?

  @@unique([customerId, integrationId])
  @@map("connections")
}

model CrmAccount {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  name                      String?
  description               String?
  industry                  String?
  website                   String?
  numberOfEmployees         Int?      @map("number_of_employees")
  addresses                 Json?
  phoneNumbers              Json?     @map("phone_numbers")
  lifecycleStage            String?   @map("lifecycle_stage")
  lastActivityAt            DateTime? @map("last_activity_at")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")
  // Associations
  remoteOwnerId             String?   @map("_remote_owner_id")
  ownerId                   String?   @map("owner_id")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("crm_accounts")
}

model CrmContact {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  firstName                 String?   @map("first_name")
  lastName                  String?   @map("last_name")
  addresses                 Json
  emailAddresses            Json      @map("email_addresses")
  phoneNumbers              Json      @map("phone_numbers")
  lastActivityAt            DateTime? @map("last_activity_at")
  lifecycleStage            String?   @map("lifecycle_stage")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")
  // Associations
  remoteAccountId           String?   @map("_remote_account_id")
  accountId                 String?   @map("account_id")
  remoteOwnerId             String?   @map("_remote_owner_id")
  ownerId                   String?   @map("owner_id")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("crm_contacts")
}

model CrmLead {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  leadSource                String?   @map("lead_source")
  title                     String?
  company                   String?
  firstName                 String?   @map("first_name")
  lastName                  String?   @map("last_name")
  addresses                 Json?
  phoneNumbers              Json?     @map("phone_numbers")
  emailAddresses            Json?     @map("email_addresses")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")
  convertedDate             DateTime? @map("converted_date")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")
  // Associations
  convertedRemoteAccountId  String?   @map("_converted_remote_account_id")
  convertedAccountId        String?   @map("converted_account_id")
  convertedRemoteContactId  String?   @map("_converted_remote_contact_id")
  convertedContactId        String?   @map("converted_contact_id")
  remoteOwnerId             String?   @map("_remote_owner_id")
  ownerId                   String?   @map("owner_id")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("crm_leads")
}

model CrmOpportunity {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  name                      String?
  description               String?
  amount                    Int?
  stage                     String?
  status                    String?
  lastActivityAt            DateTime? @map("last_activity_at")
  pipeline                  String?
  closeDate                 DateTime? @map("close_date")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")
  // Associations
  remoteAccountId           String?   @map("_remote_account_id")
  accountId                 String?   @map("account_id")
  remoteOwnerId             String?   @map("_remote_owner_id")
  ownerId                   String?   @map("owner_id")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("crm_opportunities")
}

model CrmUser {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  name                      String?
  email                     String?
  isActive                  Boolean?  @map("is_active")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("crm_users")
}

model CrmEvent {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  type                      String?
  subject                   String?
  content                   String?
  startTime                 DateTime? @map("start_time")
  endTime                   DateTime? @map("end_time")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Associations
  remoteAccountId     String? @map("_remote_account_id")
  accountId           String? @map("account_id")
  remoteContactId     String? @map("_remote_contact_id")
  contactId           String? @map("contact_id")
  remoteLeadId        String? @map("_remote_lead_id")
  leadId              String? @map("lead_id")
  remoteOpportunityId String? @map("_remote_opportunity_id")
  opportunityId       String? @map("opportunity_id")
  remoteOwnerId       String? @map("_remote_owner_id")
  ownerId             String? @map("owner_id")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("crm_events")
}

model EngagementContact {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  firstName                 String?   @map("first_name")
  lastName                  String?   @map("last_name")
  jobTitle                  String?   @map("job_title")
  address                   Json?
  emailAddresses            Json      @map("email_addresses")
  phoneNumbers              Json      @map("phone_numbers")
  openCount                 Int       @map("open_count")
  clickCount                Int       @map("click_count")
  replyCount                Int       @map("reply_count")
  bouncedCount              Int       @map("bounced_count")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")
  remoteOwnerId             String?   @map("_remote_owner_id")
  ownerId                   String?   @map("owner_id")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("engagement_contacts")
}

model EngagementUser {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  firstName                 String?   @map("first_name")
  lastName                  String?   @map("last_name")
  email                     String?
  isActive                  Boolean?  @map("is_active")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("engagement_users")
}

model EngagementSequence {
  id                        String    @id @db.Uuid
  remoteId                  String    @map("remote_id")
  customerId                String    @map("customer_id")
  connectionId              String    @map("connection_id")
  isEnabled                 Boolean   @map("is_enabled")
  name                      String?
  tags                      String[]
  numSteps                  Int       @map("num_steps")
  scheduleCount             Int       @map("schedule_count")
  openCount                 Int       @map("open_count")
  optOutCount               Int       @map("opt_out_count")
  replyCount                Int       @map("reply_count")
  clickCount                Int       @map("click_count")
  rawData                   Json?     @map("raw_data")
  remoteCreatedAt           DateTime? @map("remote_created_at")
  remoteUpdatedAt           DateTime? @map("remote_updated_at")
  remoteWasDeleted          Boolean   @default(false) @map("remote_was_deleted")
  remoteDeletedAt           DateTime? @map("remote_deleted_at")
  detectedOrRemoteDeletedAt DateTime? @map("detected_or_remote_deleted_at")
  lastModifiedAt            DateTime  @map("last_modified_at")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")
  remoteOwnerId             String?   @map("_remote_owner_id")
  ownerId                   String?   @map("owner_id")

  @@unique([connectionId, remoteId])
  @@index([connectionId, lastModifiedAt(sort: Asc)]) // for incremental syncs hitting our API // TODO: consider adding index on `remoteWasDeleted`
  @@map("engagement_sequences")
}

model Sync {
  id              String        @id @default(uuid())
  state           Json
  forceSyncFlag   Boolean       @default(false) @map("force_sync_flag")
  strategy        Json
  connectionId    String        @unique @map("connection_id")
  connection      Connection    @relation(fields: [connectionId], references: [id])
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  syncHistoryList SyncHistory[]

  @@map("syncs")
}

model SyncChange {
  id        String   @id @default(uuid())
  syncId    String   @map("sync_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sync_changes")
}

model SyncHistory {
  id             String    @id @default(uuid())
  syncId         String    @map("sync_id")
  sync           Sync      @relation(fields: [syncId], references: [id], onDelete: Cascade)
  // contact, lead, account, opportunity, etc.
  model          String
  // SUCCESS | ERROR | IN_PROGRESS
  status         String
  errorMessage   String?   @map("error_message")
  startTimestamp DateTime  @map("start_timestamp")
  endTimestamp   DateTime? @map("end_timestamp")

  @@map("sync_history")
}
