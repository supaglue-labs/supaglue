// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("SUPAGLUE_DATABASE_URL")
}

model Application {
  id          String        @id @default(uuid())
  name        String
  config      Json
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  orgId       String        @map("org_id")
  environment String        @default("production")
  Customer    Customer[]
  Destination Destination[]
  Provider    Provider[]

  @@unique([orgId, name])
  @@map("applications")
}

model Destination {
  id            String       @id @default(uuid())
  name          String
  type          String
  applicationId String       @map("application_id")
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  config        Json
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  syncConfigs   SyncConfig[]

  @@unique([applicationId, name])
  @@map("destinations")
}

model Customer {
  id                 String       @id // `applicationId:externalIdentifier`
  externalIdentifier String       @map("external_identifier")
  applicationId      String       @map("application_id")
  application        Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  connections        Connection[]
  name               String
  email              String
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  @@unique([applicationId, externalIdentifier])
  @@map("customers")
}

model Provider {
  id            String       @id @default(uuid())
  applicationId String       @map("application_id")
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  authType      String       @map("auth_type") // [oauth2]
  category      String
  name          String
  config        Json? // {provider_app_id, oauth_client_id, oauth_client_secret, oauth_scopes}
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  connections   Connection[]
  syncConfig    SyncConfig?

  @@unique([applicationId, name])
  @@map("providers")
}

model SyncConfig {
  id            String      @id @default(uuid())
  applicationId String      @map("application_id")
  providerId    String      @map("provider_id")
  provider      Provider    @relation(fields: [providerId], references: [id])
  destinationId String      @map("destination_id")
  destination   Destination @relation(fields: [destinationId], references: [id])
  config        Json
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  syncs         Sync[]

  // TODO: Eventually allow multiple destinations
  @@unique([providerId])
  @@map("sync_configs")
}

model SyncConfigChange {
  id           String   @id @default(uuid())
  syncConfigId String   @map("sync_config_id")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sync_config_changes")
}

model Connection {
  id           String     @id @default(uuid())
  // CRM, HRIS, etc.
  category     String
  // Salesforce, Hubspot, etc.
  providerName String     @map("provider_name")
  status       String // available | added | authorized | callable
  credentials  Bytes // encrypted, {type, access_token, refresh_token, expires_at, raw}
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   String     @map("customer_id")
  instanceUrl  String     @default("") @map("instance_url")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  sync         Sync?
  replayIds    ReplayId[]
  provider     Provider   @relation(fields: [providerId], references: [id])
  providerId   String     @map("provider_id")

  @@unique([customerId, providerId])
  @@map("connections")
}

model Sync {
  id                   String        @id @default(uuid())
  state                Json
  forceSyncFlag        Boolean       @default(false) @map("force_sync_flag")
  strategy             Json
  connectionId         String        @unique @map("connection_id")
  connection           Connection    @relation(fields: [connectionId], references: [id])
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")
  version              String        @default("v1")
  paused               Boolean       @default(false)
  schemaMappingsConfig Json?         @map("schema_mappings_config")
  syncConfigId         String?       @map("sync_config_id")
  // TODO: Eventually make this required
  syncConfig           SyncConfig?   @relation(fields: [syncConfigId], references: [id])
  syncHistoryList      SyncHistory[]

  @@map("syncs")
}

model SyncChange {
  id        String   @id @default(uuid())
  syncId    String   @map("sync_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sync_changes")
}

model SyncHistory {
  id               String    @id @default(uuid())
  syncId           String    @map("sync_id")
  sync             Sync      @relation(fields: [syncId], references: [id], onDelete: Cascade)
  // exactly one of `model` or `rawObject` should be set
  // contact, lead, account, opportunity, etc.
  model            String?
  rawObject        String?   @map("raw_object")
  // SUCCESS | ERROR | IN_PROGRESS
  status           String
  errorMessage     String?   @map("error_message")
  startTimestamp   DateTime  @map("start_timestamp")
  endTimestamp     DateTime? @map("end_timestamp")
  numRecordsSynced Int?      @map("num_records_synced")

  @@map("sync_history")
}

model ReplayId {
  connectionId String     @map("connection_id")
  connection   Connection @relation(fields: [connectionId], references: [id])
  eventType    String     @map("event_type")
  replayId     String     @map("replay_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([connectionId, eventType])
  @@map("replay_ids")
}
