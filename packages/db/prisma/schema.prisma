// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPAGLUE_DATABASE_URL")
}

model Application {
  id          String        @id @default(uuid())
  name        String
  config      Json
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  orgId       String        @map("org_id")
  Customer    Customer[]
  Integration Integration[]
  Destination Destination[]

  @@unique([orgId, name])
  @@map("applications")
}

model Destination {
  id            String        @id @default(uuid())
  name          String
  type          String
  applicationId String        @map("application_id")
  application   Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  config        Json
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  integrations  Integration[]

  @@unique([applicationId, name])
  @@map("destinations")
}

model Customer {
  id                 String       @id // `applicationId:externalIdentifier`
  externalIdentifier String       @map("external_identifier")
  applicationId      String       @map("application_id")
  application        Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  connections        Connection[]
  name               String
  email              String
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  @@unique([applicationId, externalIdentifier])
  @@map("customers")
}

model Integration {
  id            String       @id @default(uuid())
  applicationId String       @map("application_id")
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  destinationId String?      @map("destination_id")
  destination   Destination? @relation(fields: [destinationId], references: [id])
  authType      String       @map("auth_type") // [oauth2]
  category      String
  providerName  String       @map("provider_name") // [salesforce, hubspot]
  config        Json? // {provider_app_id, oauth_client_id, oauth_client_secret, oauth_scopes}
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  connections   Connection[]

  @@unique([applicationId, providerName])
  @@map("integrations")
}

model IntegrationChange {
  id            String   @id @default(uuid())
  integrationId String   @map("integration_id")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("integration_changes")
}

model Connection {
  id            String      @id @default(uuid())
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId String      @map("integration_id")
  // CRM, HRIS, etc.
  category      String
  // Salesforce, Hubspot, etc.
  providerName  String      @map("provider_name")
  status        String // available | added | authorized | callable
  credentials   Bytes // encrypted, {type, access_token, refresh_token, expires_at, raw}
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String      @map("customer_id")
  instanceUrl   String      @map("instance_url")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  sync          Sync?

  @@unique([customerId, integrationId])
  @@map("connections")
}

model Sync {
  id              String        @id @default(uuid())
  state           Json
  strategy        Json
  connectionId    String        @unique @map("connection_id")
  connection      Connection    @relation(fields: [connectionId], references: [id])
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  syncHistoryList SyncHistory[]

  @@map("syncs")
}

model SyncChange {
  id        String   @id @default(uuid())
  syncId    String   @map("sync_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sync_changes")
}

model SyncHistory {
  id             String    @id @default(uuid())
  syncId         String    @map("sync_id")
  sync           Sync      @relation(fields: [syncId], references: [id], onDelete: Cascade)
  // contact, lead, account, opportunity, etc.
  model          String
  // SUCCESS | ERROR | IN_PROGRESS
  status         String
  errorMessage   String?   @map("error_message")
  startTimestamp DateTime  @map("start_timestamp")
  endTimestamp   DateTime? @map("end_timestamp")

  @@map("sync_history")
}
