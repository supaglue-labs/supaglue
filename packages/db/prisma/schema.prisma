// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPAGLUE_DATABASE_URL")
}

model SystemSettings {
  id                     String   @id @default("1")
  processSyncChangesFull Boolean? @map("process_sync_changes_full")

  @@map("system_settings")
}

model Application {
  id           String        @id @default(uuid())
  name         String
  config       Json
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  orgId        String        @map("org_id")
  environment  String        @default("production")
  customers    Customer[]
  destinations Destination[]
  providers    Provider[]
  schemas      Schema[]
  Entity       Entity[]

  @@unique([orgId, name])
  @@map("applications")
}

model Destination {
  id            String       @id @default(uuid())
  name          String
  type          String
  applicationId String       @map("application_id")
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  config        Json
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  syncConfigs   SyncConfig[]

  @@unique([applicationId, name])
  @@map("destinations")
}

model Customer {
  id                 String       @id // `applicationId:externalIdentifier`
  externalIdentifier String       @map("external_identifier")
  applicationId      String       @map("application_id")
  application        Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  connections        Connection[]
  name               String
  email              String
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  @@unique([applicationId, externalIdentifier])
  @@map("customers")
}

model Provider {
  id            String       @id @default(uuid())
  applicationId String       @map("application_id")
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  authType      String       @map("auth_type") // [oauth2]
  category      String
  name          String
  config        Json // {provider_app_id, oauth_client_id, oauth_client_secret, oauth_scopes}
  objects       Json?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  connections   Connection[]
  syncConfig    SyncConfig?

  @@unique([applicationId, name])
  @@map("providers")
}

model SyncConfig {
  id            String       @id @default(uuid())
  applicationId String       @map("application_id")
  providerId    String       @map("provider_id")
  provider      Provider     @relation(fields: [providerId], references: [id])
  destinationId String       @map("destination_id")
  destination   Destination  @relation(fields: [destinationId], references: [id])
  config        Json
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  objectSyncs   ObjectSync[]
  EntitySync    EntitySync[]

  // TODO: Eventually allow multiple destinations
  @@unique([providerId])
  @@map("sync_configs")
}

model SyncConfigChange {
  id           String   @id @default(uuid())
  syncConfigId String   @map("sync_config_id")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sync_config_changes")
}

model Connection {
  id                   String       @id @default(uuid())
  // CRM, HRIS, etc.
  category             String
  // Salesforce, Hubspot, etc.
  providerName         String       @map("provider_name")
  status               String // available | added | authorized | callable
  credentials          Bytes // encrypted, {type, access_token, refresh_token, expires_at, raw}
  customer             Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId           String       @map("customer_id")
  instanceUrl          String       @default("") @map("instance_url")
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")
  replayIds            ReplayId[]
  provider             Provider     @relation(fields: [providerId], references: [id])
  providerId           String       @map("provider_id")
  schemaMappingsConfig Json?        @map("schema_mappings_config")
  objectSyncs          ObjectSync[]
  entitySyncs          EntitySync[]

  @@unique([customerId, providerId])
  @@map("connections")
}

model ObjectSync {
  id             String          @id @default(uuid())
  // common, standard, custom
  objectType     String          @map("object_type")
  object         String
  state          Json
  strategy       Json
  connectionId   String          @map("connection_id")
  connection     Connection      @relation(fields: [connectionId], references: [id])
  paused         Boolean         @default(false)
  syncConfigId   String          @map("sync_config_id")
  syncConfig     SyncConfig      @relation(fields: [syncConfigId], references: [id])
  argsForNextRun Json?           @map("args_for_next_run")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  runs           ObjectSyncRun[]

  @@unique([connectionId, objectType, object])
  @@map("object_syncs")
}

model ObjectSyncChange {
  id           String   @id @default(uuid())
  objectSyncId String   @map("object_sync_id")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("object_sync_changes")
}

model ObjectSyncRun {
  id               String     @id @default(uuid())
  objectSyncId     String     @map("object_sync_id")
  objectSync       ObjectSync @relation(fields: [objectSyncId], references: [id], onDelete: Cascade)
  // SUCCESS | ERROR | IN_PROGRESS
  status           String
  errorMessage     String?    @map("error_message")
  startTimestamp   DateTime   @map("start_timestamp")
  endTimestamp     DateTime?  @map("end_timestamp")
  numRecordsSynced Int?       @map("num_records_synced")

  @@map("object_sync_runs")
}

model EntitySync {
  id             String          @id @default(uuid())
  entityId       String          @map("entity_id")
  entity         Entity          @relation(fields: [entityId], references: [id])
  state          Json
  strategy       Json
  connectionId   String          @map("connection_id")
  connection     Connection      @relation(fields: [connectionId], references: [id])
  paused         Boolean         @default(false)
  syncConfigId   String          @map("sync_config_id")
  syncConfig     SyncConfig      @relation(fields: [syncConfigId], references: [id])
  argsForNextRun Json?           @map("args_for_next_run")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  runs           EntitySyncRun[]

  @@unique([connectionId, entityId])
  @@map("entity_syncs")
}

model EntitySyncChange {
  id           String   @id @default(uuid())
  entitySyncId String   @map("entity_sync_id")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("entity_sync_changes")
}

model EntitySyncRun {
  id               String     @id @default(uuid())
  entitySyncId     String     @map("entity_sync_id")
  entitySync       EntitySync @relation(fields: [entitySyncId], references: [id], onDelete: Cascade)
  // SUCCESS | ERROR | IN_PROGRESS
  status           String
  errorMessage     String?    @map("error_message")
  startTimestamp   DateTime   @map("start_timestamp")
  endTimestamp     DateTime?  @map("end_timestamp")
  numRecordsSynced Int?       @map("num_records_synced")

  @@map("entity_sync_runs")
}

model ReplayId {
  connectionId String     @map("connection_id")
  connection   Connection @relation(fields: [connectionId], references: [id])
  eventType    String     @map("event_type")
  replayId     String     @map("replay_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([connectionId, eventType])
  @@map("replay_ids")
}

model Schema {
  id            String      @id @default(uuid())
  name          String
  applicationId String      @map("application_id")
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  config        Json
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([applicationId, name])
  @@map("schemas")
}

model Entity {
  id            String       @id @default(uuid())
  name          String
  applicationId String       @map("application_id")
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  config        Json
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  entitySyncs   EntitySync[]

  @@unique([applicationId, name])
  @@map("entities")
}
