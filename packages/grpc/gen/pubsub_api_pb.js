// source: pubsub_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.eventbus.v1.ConsumerEvent', null, global);
goog.exportSymbol('proto.eventbus.v1.Error', null, global);
goog.exportSymbol('proto.eventbus.v1.ErrorCode', null, global);
goog.exportSymbol('proto.eventbus.v1.EventHeader', null, global);
goog.exportSymbol('proto.eventbus.v1.FetchRequest', null, global);
goog.exportSymbol('proto.eventbus.v1.FetchResponse', null, global);
goog.exportSymbol('proto.eventbus.v1.ProducerEvent', null, global);
goog.exportSymbol('proto.eventbus.v1.PublishRequest', null, global);
goog.exportSymbol('proto.eventbus.v1.PublishResponse', null, global);
goog.exportSymbol('proto.eventbus.v1.PublishResult', null, global);
goog.exportSymbol('proto.eventbus.v1.ReplayPreset', null, global);
goog.exportSymbol('proto.eventbus.v1.SchemaInfo', null, global);
goog.exportSymbol('proto.eventbus.v1.SchemaRequest', null, global);
goog.exportSymbol('proto.eventbus.v1.TopicInfo', null, global);
goog.exportSymbol('proto.eventbus.v1.TopicRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.TopicInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.TopicInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.TopicInfo.displayName = 'proto.eventbus.v1.TopicInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.TopicRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.TopicRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.TopicRequest.displayName = 'proto.eventbus.v1.TopicRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.EventHeader = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.EventHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.EventHeader.displayName = 'proto.eventbus.v1.EventHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.ProducerEvent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eventbus.v1.ProducerEvent.repeatedFields_, null);
};
goog.inherits(proto.eventbus.v1.ProducerEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.ProducerEvent.displayName = 'proto.eventbus.v1.ProducerEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.ConsumerEvent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.ConsumerEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.ConsumerEvent.displayName = 'proto.eventbus.v1.ConsumerEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.PublishResult = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.PublishResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.PublishResult.displayName = 'proto.eventbus.v1.PublishResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.Error = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.Error.displayName = 'proto.eventbus.v1.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.FetchRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.FetchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.FetchRequest.displayName = 'proto.eventbus.v1.FetchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.FetchResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eventbus.v1.FetchResponse.repeatedFields_, null);
};
goog.inherits(proto.eventbus.v1.FetchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.FetchResponse.displayName = 'proto.eventbus.v1.FetchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.SchemaRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.SchemaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.SchemaRequest.displayName = 'proto.eventbus.v1.SchemaRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.SchemaInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eventbus.v1.SchemaInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.SchemaInfo.displayName = 'proto.eventbus.v1.SchemaInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.PublishRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eventbus.v1.PublishRequest.repeatedFields_, null);
};
goog.inherits(proto.eventbus.v1.PublishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.PublishRequest.displayName = 'proto.eventbus.v1.PublishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eventbus.v1.PublishResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eventbus.v1.PublishResponse.repeatedFields_, null);
};
goog.inherits(proto.eventbus.v1.PublishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eventbus.v1.PublishResponse.displayName = 'proto.eventbus.v1.PublishResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.TopicInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.TopicInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.TopicInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.TopicInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        topicName: jspb.Message.getFieldWithDefault(msg, 1, ''),
        tenantGuid: jspb.Message.getFieldWithDefault(msg, 2, ''),
        canPublish: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        canSubscribe: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
        schemaId: jspb.Message.getFieldWithDefault(msg, 5, ''),
        rpcId: jspb.Message.getFieldWithDefault(msg, 6, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.TopicInfo}
 */
proto.eventbus.v1.TopicInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.TopicInfo();
  return proto.eventbus.v1.TopicInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.TopicInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.TopicInfo}
 */
proto.eventbus.v1.TopicInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTopicName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTenantGuid(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setCanPublish(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setCanSubscribe(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setSchemaId(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setRpcId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.TopicInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.TopicInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.TopicInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.TopicInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTopicName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTenantGuid();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getCanPublish();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getCanSubscribe();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getRpcId();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
};

/**
 * optional string topic_name = 1;
 * @return {string}
 */
proto.eventbus.v1.TopicInfo.prototype.getTopicName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.TopicInfo} returns this
 */
proto.eventbus.v1.TopicInfo.prototype.setTopicName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string tenant_guid = 2;
 * @return {string}
 */
proto.eventbus.v1.TopicInfo.prototype.getTenantGuid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.TopicInfo} returns this
 */
proto.eventbus.v1.TopicInfo.prototype.setTenantGuid = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool can_publish = 3;
 * @return {boolean}
 */
proto.eventbus.v1.TopicInfo.prototype.getCanPublish = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.eventbus.v1.TopicInfo} returns this
 */
proto.eventbus.v1.TopicInfo.prototype.setCanPublish = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional bool can_subscribe = 4;
 * @return {boolean}
 */
proto.eventbus.v1.TopicInfo.prototype.getCanSubscribe = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};

/**
 * @param {boolean} value
 * @return {!proto.eventbus.v1.TopicInfo} returns this
 */
proto.eventbus.v1.TopicInfo.prototype.setCanSubscribe = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * optional string schema_id = 5;
 * @return {string}
 */
proto.eventbus.v1.TopicInfo.prototype.getSchemaId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.TopicInfo} returns this
 */
proto.eventbus.v1.TopicInfo.prototype.setSchemaId = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string rpc_id = 6;
 * @return {string}
 */
proto.eventbus.v1.TopicInfo.prototype.getRpcId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.TopicInfo} returns this
 */
proto.eventbus.v1.TopicInfo.prototype.setRpcId = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.TopicRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.TopicRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.TopicRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.TopicRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        topicName: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.TopicRequest}
 */
proto.eventbus.v1.TopicRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.TopicRequest();
  return proto.eventbus.v1.TopicRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.TopicRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.TopicRequest}
 */
proto.eventbus.v1.TopicRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTopicName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.TopicRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.TopicRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.TopicRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.TopicRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTopicName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string topic_name = 1;
 * @return {string}
 */
proto.eventbus.v1.TopicRequest.prototype.getTopicName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.TopicRequest} returns this
 */
proto.eventbus.v1.TopicRequest.prototype.setTopicName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.EventHeader.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.EventHeader.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.EventHeader} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.EventHeader.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        key: jspb.Message.getFieldWithDefault(msg, 1, ''),
        value: msg.getValue_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.EventHeader}
 */
proto.eventbus.v1.EventHeader.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.EventHeader();
  return proto.eventbus.v1.EventHeader.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.EventHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.EventHeader}
 */
proto.eventbus.v1.EventHeader.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.EventHeader.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.EventHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.EventHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.EventHeader.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.eventbus.v1.EventHeader.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.EventHeader} returns this
 */
proto.eventbus.v1.EventHeader.prototype.setKey = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bytes value = 2;
 * @return {string}
 */
proto.eventbus.v1.EventHeader.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.eventbus.v1.EventHeader.prototype.getValue_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValue()));
};

/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.eventbus.v1.EventHeader.prototype.getValue_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValue()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eventbus.v1.EventHeader} returns this
 */
proto.eventbus.v1.EventHeader.prototype.setValue = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eventbus.v1.ProducerEvent.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.ProducerEvent.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.ProducerEvent.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.ProducerEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.ProducerEvent.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        schemaId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        payload: msg.getPayload_asB64(),
        headersList: jspb.Message.toObjectList(
          msg.getHeadersList(),
          proto.eventbus.v1.EventHeader.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.ProducerEvent}
 */
proto.eventbus.v1.ProducerEvent.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.ProducerEvent();
  return proto.eventbus.v1.ProducerEvent.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.ProducerEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.ProducerEvent}
 */
proto.eventbus.v1.ProducerEvent.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSchemaId(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPayload(value);
        break;
      case 4:
        var value = new proto.eventbus.v1.EventHeader();
        reader.readMessage(value, proto.eventbus.v1.EventHeader.deserializeBinaryFromReader);
        msg.addHeaders(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.ProducerEvent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.ProducerEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.ProducerEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.ProducerEvent.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.eventbus.v1.EventHeader.serializeBinaryToWriter);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.eventbus.v1.ProducerEvent.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.ProducerEvent} returns this
 */
proto.eventbus.v1.ProducerEvent.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string schema_id = 2;
 * @return {string}
 */
proto.eventbus.v1.ProducerEvent.prototype.getSchemaId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.ProducerEvent} returns this
 */
proto.eventbus.v1.ProducerEvent.prototype.setSchemaId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bytes payload = 3;
 * @return {string}
 */
proto.eventbus.v1.ProducerEvent.prototype.getPayload = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.eventbus.v1.ProducerEvent.prototype.getPayload_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};

/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.eventbus.v1.ProducerEvent.prototype.getPayload_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eventbus.v1.ProducerEvent} returns this
 */
proto.eventbus.v1.ProducerEvent.prototype.setPayload = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * repeated EventHeader headers = 4;
 * @return {!Array<!proto.eventbus.v1.EventHeader>}
 */
proto.eventbus.v1.ProducerEvent.prototype.getHeadersList = function () {
  return /** @type{!Array<!proto.eventbus.v1.EventHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eventbus.v1.EventHeader, 4)
  );
};

/**
 * @param {!Array<!proto.eventbus.v1.EventHeader>} value
 * @return {!proto.eventbus.v1.ProducerEvent} returns this
 */
proto.eventbus.v1.ProducerEvent.prototype.setHeadersList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.eventbus.v1.EventHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eventbus.v1.EventHeader}
 */
proto.eventbus.v1.ProducerEvent.prototype.addHeaders = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.eventbus.v1.EventHeader, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eventbus.v1.ProducerEvent} returns this
 */
proto.eventbus.v1.ProducerEvent.prototype.clearHeadersList = function () {
  return this.setHeadersList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.ConsumerEvent.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.ConsumerEvent.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.ConsumerEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.ConsumerEvent.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        event: (f = msg.getEvent()) && proto.eventbus.v1.ProducerEvent.toObject(includeInstance, f),
        replayId: msg.getReplayId_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.ConsumerEvent}
 */
proto.eventbus.v1.ConsumerEvent.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.ConsumerEvent();
  return proto.eventbus.v1.ConsumerEvent.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.ConsumerEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.ConsumerEvent}
 */
proto.eventbus.v1.ConsumerEvent.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.eventbus.v1.ProducerEvent();
        reader.readMessage(value, proto.eventbus.v1.ProducerEvent.deserializeBinaryFromReader);
        msg.setEvent(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setReplayId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.ConsumerEvent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.ConsumerEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.ConsumerEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.ConsumerEvent.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(1, f, proto.eventbus.v1.ProducerEvent.serializeBinaryToWriter);
  }
  f = message.getReplayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional ProducerEvent event = 1;
 * @return {?proto.eventbus.v1.ProducerEvent}
 */
proto.eventbus.v1.ConsumerEvent.prototype.getEvent = function () {
  return /** @type{?proto.eventbus.v1.ProducerEvent} */ (
    jspb.Message.getWrapperField(this, proto.eventbus.v1.ProducerEvent, 1)
  );
};

/**
 * @param {?proto.eventbus.v1.ProducerEvent|undefined} value
 * @return {!proto.eventbus.v1.ConsumerEvent} returns this
 */
proto.eventbus.v1.ConsumerEvent.prototype.setEvent = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.eventbus.v1.ConsumerEvent} returns this
 */
proto.eventbus.v1.ConsumerEvent.prototype.clearEvent = function () {
  return this.setEvent(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventbus.v1.ConsumerEvent.prototype.hasEvent = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes replay_id = 2;
 * @return {string}
 */
proto.eventbus.v1.ConsumerEvent.prototype.getReplayId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes replay_id = 2;
 * This is a type-conversion wrapper around `getReplayId()`
 * @return {string}
 */
proto.eventbus.v1.ConsumerEvent.prototype.getReplayId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getReplayId()));
};

/**
 * optional bytes replay_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReplayId()`
 * @return {!Uint8Array}
 */
proto.eventbus.v1.ConsumerEvent.prototype.getReplayId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getReplayId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eventbus.v1.ConsumerEvent} returns this
 */
proto.eventbus.v1.ConsumerEvent.prototype.setReplayId = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.PublishResult.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.PublishResult.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.PublishResult} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.PublishResult.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        replayId: msg.getReplayId_asB64(),
        error: (f = msg.getError()) && proto.eventbus.v1.Error.toObject(includeInstance, f),
        correlationkey: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.PublishResult}
 */
proto.eventbus.v1.PublishResult.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.PublishResult();
  return proto.eventbus.v1.PublishResult.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.PublishResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.PublishResult}
 */
proto.eventbus.v1.PublishResult.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setReplayId(value);
        break;
      case 2:
        var value = new proto.eventbus.v1.Error();
        reader.readMessage(value, proto.eventbus.v1.Error.deserializeBinaryFromReader);
        msg.setError(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setCorrelationkey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.PublishResult.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.PublishResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.PublishResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.PublishResult.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getReplayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(2, f, proto.eventbus.v1.Error.serializeBinaryToWriter);
  }
  f = message.getCorrelationkey();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bytes replay_id = 1;
 * @return {string}
 */
proto.eventbus.v1.PublishResult.prototype.getReplayId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes replay_id = 1;
 * This is a type-conversion wrapper around `getReplayId()`
 * @return {string}
 */
proto.eventbus.v1.PublishResult.prototype.getReplayId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getReplayId()));
};

/**
 * optional bytes replay_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReplayId()`
 * @return {!Uint8Array}
 */
proto.eventbus.v1.PublishResult.prototype.getReplayId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getReplayId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eventbus.v1.PublishResult} returns this
 */
proto.eventbus.v1.PublishResult.prototype.setReplayId = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional Error error = 2;
 * @return {?proto.eventbus.v1.Error}
 */
proto.eventbus.v1.PublishResult.prototype.getError = function () {
  return /** @type{?proto.eventbus.v1.Error} */ (jspb.Message.getWrapperField(this, proto.eventbus.v1.Error, 2));
};

/**
 * @param {?proto.eventbus.v1.Error|undefined} value
 * @return {!proto.eventbus.v1.PublishResult} returns this
 */
proto.eventbus.v1.PublishResult.prototype.setError = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.eventbus.v1.PublishResult} returns this
 */
proto.eventbus.v1.PublishResult.prototype.clearError = function () {
  return this.setError(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eventbus.v1.PublishResult.prototype.hasError = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string correlationKey = 3;
 * @return {string}
 */
proto.eventbus.v1.PublishResult.prototype.getCorrelationkey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.PublishResult} returns this
 */
proto.eventbus.v1.PublishResult.prototype.setCorrelationkey = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.Error.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.Error.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.Error} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.Error.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        msg: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.Error}
 */
proto.eventbus.v1.Error.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.Error();
  return proto.eventbus.v1.Error.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.Error}
 */
proto.eventbus.v1.Error.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.eventbus.v1.ErrorCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMsg(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.Error.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.Error.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional ErrorCode code = 1;
 * @return {!proto.eventbus.v1.ErrorCode}
 */
proto.eventbus.v1.Error.prototype.getCode = function () {
  return /** @type {!proto.eventbus.v1.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.eventbus.v1.ErrorCode} value
 * @return {!proto.eventbus.v1.Error} returns this
 */
proto.eventbus.v1.Error.prototype.setCode = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional string msg = 2;
 * @return {string}
 */
proto.eventbus.v1.Error.prototype.getMsg = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.Error} returns this
 */
proto.eventbus.v1.Error.prototype.setMsg = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.FetchRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.FetchRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.FetchRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.FetchRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        topicName: jspb.Message.getFieldWithDefault(msg, 1, ''),
        replayPreset: jspb.Message.getFieldWithDefault(msg, 2, 0),
        replayId: msg.getReplayId_asB64(),
        numRequested: jspb.Message.getFieldWithDefault(msg, 4, 0),
        authRefresh: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.FetchRequest}
 */
proto.eventbus.v1.FetchRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.FetchRequest();
  return proto.eventbus.v1.FetchRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.FetchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.FetchRequest}
 */
proto.eventbus.v1.FetchRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTopicName(value);
        break;
      case 2:
        var value = /** @type {!proto.eventbus.v1.ReplayPreset} */ (reader.readEnum());
        msg.setReplayPreset(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setReplayId(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setNumRequested(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setAuthRefresh(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.FetchRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.FetchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.FetchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.FetchRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTopicName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getReplayPreset();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
  f = message.getReplayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getNumRequested();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getAuthRefresh();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string topic_name = 1;
 * @return {string}
 */
proto.eventbus.v1.FetchRequest.prototype.getTopicName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.FetchRequest} returns this
 */
proto.eventbus.v1.FetchRequest.prototype.setTopicName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional ReplayPreset replay_preset = 2;
 * @return {!proto.eventbus.v1.ReplayPreset}
 */
proto.eventbus.v1.FetchRequest.prototype.getReplayPreset = function () {
  return /** @type {!proto.eventbus.v1.ReplayPreset} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {!proto.eventbus.v1.ReplayPreset} value
 * @return {!proto.eventbus.v1.FetchRequest} returns this
 */
proto.eventbus.v1.FetchRequest.prototype.setReplayPreset = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional bytes replay_id = 3;
 * @return {string}
 */
proto.eventbus.v1.FetchRequest.prototype.getReplayId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes replay_id = 3;
 * This is a type-conversion wrapper around `getReplayId()`
 * @return {string}
 */
proto.eventbus.v1.FetchRequest.prototype.getReplayId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getReplayId()));
};

/**
 * optional bytes replay_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReplayId()`
 * @return {!Uint8Array}
 */
proto.eventbus.v1.FetchRequest.prototype.getReplayId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getReplayId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eventbus.v1.FetchRequest} returns this
 */
proto.eventbus.v1.FetchRequest.prototype.setReplayId = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional int32 num_requested = 4;
 * @return {number}
 */
proto.eventbus.v1.FetchRequest.prototype.getNumRequested = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.eventbus.v1.FetchRequest} returns this
 */
proto.eventbus.v1.FetchRequest.prototype.setNumRequested = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional string auth_refresh = 5;
 * @return {string}
 */
proto.eventbus.v1.FetchRequest.prototype.getAuthRefresh = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.FetchRequest} returns this
 */
proto.eventbus.v1.FetchRequest.prototype.setAuthRefresh = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eventbus.v1.FetchResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.FetchResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.FetchResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.FetchResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.FetchResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        eventsList: jspb.Message.toObjectList(
          msg.getEventsList(),
          proto.eventbus.v1.ConsumerEvent.toObject,
          includeInstance
        ),
        latestReplayId: msg.getLatestReplayId_asB64(),
        rpcId: jspb.Message.getFieldWithDefault(msg, 3, ''),
        pendingNumRequested: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.FetchResponse}
 */
proto.eventbus.v1.FetchResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.FetchResponse();
  return proto.eventbus.v1.FetchResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.FetchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.FetchResponse}
 */
proto.eventbus.v1.FetchResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.eventbus.v1.ConsumerEvent();
        reader.readMessage(value, proto.eventbus.v1.ConsumerEvent.deserializeBinaryFromReader);
        msg.addEvents(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLatestReplayId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setRpcId(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPendingNumRequested(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.FetchResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.FetchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.FetchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.FetchResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.eventbus.v1.ConsumerEvent.serializeBinaryToWriter);
  }
  f = message.getLatestReplayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getRpcId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPendingNumRequested();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
};

/**
 * repeated ConsumerEvent events = 1;
 * @return {!Array<!proto.eventbus.v1.ConsumerEvent>}
 */
proto.eventbus.v1.FetchResponse.prototype.getEventsList = function () {
  return /** @type{!Array<!proto.eventbus.v1.ConsumerEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eventbus.v1.ConsumerEvent, 1)
  );
};

/**
 * @param {!Array<!proto.eventbus.v1.ConsumerEvent>} value
 * @return {!proto.eventbus.v1.FetchResponse} returns this
 */
proto.eventbus.v1.FetchResponse.prototype.setEventsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.eventbus.v1.ConsumerEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eventbus.v1.ConsumerEvent}
 */
proto.eventbus.v1.FetchResponse.prototype.addEvents = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.eventbus.v1.ConsumerEvent, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eventbus.v1.FetchResponse} returns this
 */
proto.eventbus.v1.FetchResponse.prototype.clearEventsList = function () {
  return this.setEventsList([]);
};

/**
 * optional bytes latest_replay_id = 2;
 * @return {string}
 */
proto.eventbus.v1.FetchResponse.prototype.getLatestReplayId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes latest_replay_id = 2;
 * This is a type-conversion wrapper around `getLatestReplayId()`
 * @return {string}
 */
proto.eventbus.v1.FetchResponse.prototype.getLatestReplayId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLatestReplayId()));
};

/**
 * optional bytes latest_replay_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLatestReplayId()`
 * @return {!Uint8Array}
 */
proto.eventbus.v1.FetchResponse.prototype.getLatestReplayId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getLatestReplayId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eventbus.v1.FetchResponse} returns this
 */
proto.eventbus.v1.FetchResponse.prototype.setLatestReplayId = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional string rpc_id = 3;
 * @return {string}
 */
proto.eventbus.v1.FetchResponse.prototype.getRpcId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.FetchResponse} returns this
 */
proto.eventbus.v1.FetchResponse.prototype.setRpcId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int32 pending_num_requested = 4;
 * @return {number}
 */
proto.eventbus.v1.FetchResponse.prototype.getPendingNumRequested = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.eventbus.v1.FetchResponse} returns this
 */
proto.eventbus.v1.FetchResponse.prototype.setPendingNumRequested = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.SchemaRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.SchemaRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.SchemaRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.SchemaRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        schemaId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.SchemaRequest}
 */
proto.eventbus.v1.SchemaRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.SchemaRequest();
  return proto.eventbus.v1.SchemaRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.SchemaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.SchemaRequest}
 */
proto.eventbus.v1.SchemaRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSchemaId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.SchemaRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.SchemaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.SchemaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.SchemaRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string schema_id = 1;
 * @return {string}
 */
proto.eventbus.v1.SchemaRequest.prototype.getSchemaId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.SchemaRequest} returns this
 */
proto.eventbus.v1.SchemaRequest.prototype.setSchemaId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.SchemaInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.SchemaInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.SchemaInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.SchemaInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        schemaJson: jspb.Message.getFieldWithDefault(msg, 1, ''),
        schemaId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        rpcId: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.SchemaInfo}
 */
proto.eventbus.v1.SchemaInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.SchemaInfo();
  return proto.eventbus.v1.SchemaInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.SchemaInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.SchemaInfo}
 */
proto.eventbus.v1.SchemaInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSchemaJson(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSchemaId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setRpcId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.SchemaInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.SchemaInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.SchemaInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.SchemaInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSchemaJson();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getRpcId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string schema_json = 1;
 * @return {string}
 */
proto.eventbus.v1.SchemaInfo.prototype.getSchemaJson = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.SchemaInfo} returns this
 */
proto.eventbus.v1.SchemaInfo.prototype.setSchemaJson = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string schema_id = 2;
 * @return {string}
 */
proto.eventbus.v1.SchemaInfo.prototype.getSchemaId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.SchemaInfo} returns this
 */
proto.eventbus.v1.SchemaInfo.prototype.setSchemaId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string rpc_id = 3;
 * @return {string}
 */
proto.eventbus.v1.SchemaInfo.prototype.getRpcId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.SchemaInfo} returns this
 */
proto.eventbus.v1.SchemaInfo.prototype.setRpcId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eventbus.v1.PublishRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.PublishRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.PublishRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.PublishRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.PublishRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        topicName: jspb.Message.getFieldWithDefault(msg, 1, ''),
        eventsList: jspb.Message.toObjectList(
          msg.getEventsList(),
          proto.eventbus.v1.ProducerEvent.toObject,
          includeInstance
        ),
        authRefresh: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.PublishRequest}
 */
proto.eventbus.v1.PublishRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.PublishRequest();
  return proto.eventbus.v1.PublishRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.PublishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.PublishRequest}
 */
proto.eventbus.v1.PublishRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTopicName(value);
        break;
      case 2:
        var value = new proto.eventbus.v1.ProducerEvent();
        reader.readMessage(value, proto.eventbus.v1.ProducerEvent.deserializeBinaryFromReader);
        msg.addEvents(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAuthRefresh(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.PublishRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.PublishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.PublishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.PublishRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTopicName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.eventbus.v1.ProducerEvent.serializeBinaryToWriter);
  }
  f = message.getAuthRefresh();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string topic_name = 1;
 * @return {string}
 */
proto.eventbus.v1.PublishRequest.prototype.getTopicName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.PublishRequest} returns this
 */
proto.eventbus.v1.PublishRequest.prototype.setTopicName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated ProducerEvent events = 2;
 * @return {!Array<!proto.eventbus.v1.ProducerEvent>}
 */
proto.eventbus.v1.PublishRequest.prototype.getEventsList = function () {
  return /** @type{!Array<!proto.eventbus.v1.ProducerEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eventbus.v1.ProducerEvent, 2)
  );
};

/**
 * @param {!Array<!proto.eventbus.v1.ProducerEvent>} value
 * @return {!proto.eventbus.v1.PublishRequest} returns this
 */
proto.eventbus.v1.PublishRequest.prototype.setEventsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.eventbus.v1.ProducerEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eventbus.v1.ProducerEvent}
 */
proto.eventbus.v1.PublishRequest.prototype.addEvents = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.eventbus.v1.ProducerEvent, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eventbus.v1.PublishRequest} returns this
 */
proto.eventbus.v1.PublishRequest.prototype.clearEventsList = function () {
  return this.setEventsList([]);
};

/**
 * optional string auth_refresh = 3;
 * @return {string}
 */
proto.eventbus.v1.PublishRequest.prototype.getAuthRefresh = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.PublishRequest} returns this
 */
proto.eventbus.v1.PublishRequest.prototype.setAuthRefresh = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eventbus.v1.PublishResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.eventbus.v1.PublishResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.eventbus.v1.PublishResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.eventbus.v1.PublishResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.eventbus.v1.PublishResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        resultsList: jspb.Message.toObjectList(
          msg.getResultsList(),
          proto.eventbus.v1.PublishResult.toObject,
          includeInstance
        ),
        schemaId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        rpcId: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eventbus.v1.PublishResponse}
 */
proto.eventbus.v1.PublishResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eventbus.v1.PublishResponse();
  return proto.eventbus.v1.PublishResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eventbus.v1.PublishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eventbus.v1.PublishResponse}
 */
proto.eventbus.v1.PublishResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.eventbus.v1.PublishResult();
        reader.readMessage(value, proto.eventbus.v1.PublishResult.deserializeBinaryFromReader);
        msg.addResults(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSchemaId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setRpcId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eventbus.v1.PublishResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.eventbus.v1.PublishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eventbus.v1.PublishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eventbus.v1.PublishResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.eventbus.v1.PublishResult.serializeBinaryToWriter);
  }
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getRpcId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * repeated PublishResult results = 1;
 * @return {!Array<!proto.eventbus.v1.PublishResult>}
 */
proto.eventbus.v1.PublishResponse.prototype.getResultsList = function () {
  return /** @type{!Array<!proto.eventbus.v1.PublishResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eventbus.v1.PublishResult, 1)
  );
};

/**
 * @param {!Array<!proto.eventbus.v1.PublishResult>} value
 * @return {!proto.eventbus.v1.PublishResponse} returns this
 */
proto.eventbus.v1.PublishResponse.prototype.setResultsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.eventbus.v1.PublishResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eventbus.v1.PublishResult}
 */
proto.eventbus.v1.PublishResponse.prototype.addResults = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.eventbus.v1.PublishResult, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eventbus.v1.PublishResponse} returns this
 */
proto.eventbus.v1.PublishResponse.prototype.clearResultsList = function () {
  return this.setResultsList([]);
};

/**
 * optional string schema_id = 2;
 * @return {string}
 */
proto.eventbus.v1.PublishResponse.prototype.getSchemaId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.PublishResponse} returns this
 */
proto.eventbus.v1.PublishResponse.prototype.setSchemaId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string rpc_id = 3;
 * @return {string}
 */
proto.eventbus.v1.PublishResponse.prototype.getRpcId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.eventbus.v1.PublishResponse} returns this
 */
proto.eventbus.v1.PublishResponse.prototype.setRpcId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * @enum {number}
 */
proto.eventbus.v1.ErrorCode = {
  UNKNOWN: 0,
  PUBLISH: 1,
};

/**
 * @enum {number}
 */
proto.eventbus.v1.ReplayPreset = {
  LATEST: 0,
  EARLIEST: 1,
  CUSTOM: 2,
};

goog.object.extend(exports, proto.eventbus.v1);
