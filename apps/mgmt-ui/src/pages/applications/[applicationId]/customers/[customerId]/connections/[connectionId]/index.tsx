import Spinner from '@/components/Spinner';
import { TabPanel } from '@/components/TabPanel';
import { useActiveApplicationId } from '@/hooks/useActiveApplicationId';
import { useActiveCustomerId } from '@/hooks/useActiveCustomerId';
import Header from '@/layout/Header';
import { getServerSideProps } from '@/pages/applications/[applicationId]';
import { getStandardObjectOptions } from '@/utils/provider';
import providerToIcon from '@/utils/providerToIcon';
import SyncAltIcon from '@mui/icons-material/SyncAlt';
import {
  Autocomplete,
  Box,
  Breadcrumbs,
  Card,
  Chip,
  Grid,
  Stack,
  Tab,
  Tabs,
  TextField,
  Typography,
} from '@mui/material';
import Head from 'next/head';
import Link from 'next/link';
import { useState } from 'react';

// TODO: Data drive this.
const ENTITIES = ['contact', 'account', 'deal'];

const FIELDS = {
  contact: ['first_name', 'last_name', 'email'],
  account: ['name', 'address', 'domain'],
  deal: ['name', 'stage', 'custom_field'],
};

export { getServerSideProps };

export default function Home() {
  const applicationId = useActiveApplicationId();
  const customerId = useActiveCustomerId();
  const [mobileOpen, setMobileOpen] = useState(false);
  const isLoading = false;
  const [tab, setTab] = useState(0);

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  return (
    <>
      <Head>
        <title>Supaglue Management Portal</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
        <Header title="Connection" onDrawerToggle={handleDrawerToggle} />
        <Box component="main" sx={{ flex: 1, py: 6, px: 4, bgcolor: '#eaeff1' }}>
          {isLoading ? (
            <Spinner />
          ) : (
            <Stack className="gap-2">
              <Breadcrumbs>
                <Link color="inherit" href={`/applications/${applicationId}`}>
                  Home
                </Link>
                <Link color="inherit" href={`/applications/${applicationId}/customers`}>
                  Customers
                </Link>
                <Link color="inherit" href={`/applications/${applicationId}/customers/${customerId}/connections`}>
                  Connections
                </Link>
                <Typography color="text.primary">Connection</Typography>
              </Breadcrumbs>
              <Card>
                <Typography variant="h6" component="h2" sx={{ p: 2 }}>
                  Field Mappings
                </Typography>
                <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
                  <Tabs value={tab} textColor="inherit">
                    {ENTITIES.map((entity, idx) => (
                      <Tab key={idx} label={entity} onClick={() => setTab(idx)} />
                    ))}
                  </Tabs>
                </Box>
                <Box component="main" sx={{ flex: 1, py: 6, px: 4 }}>
                  {ENTITIES.map((entity, idx) => (
                    <TabPanel value={tab} index={idx} key={idx} className="w-full">
                      <EntityFieldMapping entity={entity} providerName="salesforce" />
                    </TabPanel>
                  ))}
                </Box>
              </Card>
            </Stack>
          )}
        </Box>
      </Box>
    </>
  );
}

type EntityMappingsProps = {
  entity: string;
  providerName: string;
  object?: string;
};

function EntityMapping({ entity, providerName, object }: EntityMappingsProps) {
  const [selectedObject, setSelectedObject] = useState<string | undefined>(object);
  const objectOptions = getStandardObjectOptions(providerName);
  return (
    <>
      <Box
        sx={{
          'max-width': 600,
        }}
      >
        <Grid container spacing={2}>
          <EntityObjectMapping
            entity={entity}
            providerName={providerName}
            object={object}
            setObject={setSelectedObject}
          />
        </Grid>
      </Box>
    </>
  );
}

type EntityObjectMappingProps = {
  entity: string;
  providerName: string;
  object?: string;
  setObject: (selected: string | undefined) => void;
};
function EntityObjectMapping({ entity, providerName, object, setObject }: EntityObjectMappingProps) {
  const objectOptions = getStandardObjectOptions(providerName);
  return (
    <>
      <Grid item xs={4}>
        <Stack direction="row" className="gap-2 items-center justify-between">
          <Stack direction="row" className="gap-2 items-center">
            {providerToIcon('supaglue', 40)}
            <Typography>{entity}</Typography>
          </Stack>
          <SyncAltIcon />
        </Stack>
      </Grid>
      <Grid item xs={8}>
        <Stack direction="row" className="gap-4 items-start">
          {providerToIcon(providerName, 40)}
          <Autocomplete
            size="small"
            id="entity-object"
            options={objectOptions}
            defaultValue={object}
            autoSelect
            renderTags={(value: readonly string[], getTagProps) =>
              value.map((option: string, index: number) => (
                <Chip variant="outlined" label={option} {...getTagProps({ index })} />
              ))
            }
            renderInput={(params) => (
              <TextField {...params} label="Standard objects" helperText={`Available objects in ${providerName}.`} />
            )}
            onChange={(event: any, value: string | null) => {
              setObject(value ?? undefined);
            }}
          />
        </Stack>
      </Grid>
    </>
  );
}

type EntityFieldMappingsProps = {
  entity: string;
  object?: string;
  providerName: string;
  fields: string[];
};

function EntityFieldMappings({ entity, providerName, object, fields }: EntityFieldMappingsProps) {
  const fieldOptions: string[] = [];
  return (
    <>
      {fields.map((field, idx) => (
        <>
          <Grid item xs={4}>
            <Typography>{field}</Typography>
          </Grid>
          <Grid item xs={12}>
            <Autocomplete
              disabled={!object}
              size="small"
              id="entity-object-field"
              options={fieldOptions}
              // defaultValue={object}
              autoSelect
              renderTags={(value: readonly string[], getTagProps) =>
                value.map((option: string, index: number) => (
                  <Chip variant="outlined" label={option} {...getTagProps({ index })} />
                ))
              }
              renderInput={(params) => (
                <TextField
                  {...params}
                  label="Standard objects"
                  helperText={`Available fields for ${object} in ${providerName}.`}
                />
              )}
              onChange={(event: any, value: string | null) => {
                console.log('hi');
              }}
            />
          </Grid>
        </>
      ))}
    </>
  );
}
