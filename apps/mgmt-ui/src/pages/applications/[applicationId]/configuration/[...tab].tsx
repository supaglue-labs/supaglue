import ApiKeyTabPanel from '@/components/configuration/ApiKeyTabPanel';
import CDCWebhookTabPanel from '@/components/configuration/CDCWebhookTabPanel';
import DestinationTabPanelContainer from '@/components/configuration/destination/DestinationTabPanelContainer';
import IntegrationTabPanelContainer from '@/components/configuration/integration/IntegrationTabPanelContainer';
import WebhookTabPanel from '@/components/configuration/WebhookTabPanel';
import { useActiveApplicationId } from '@/hooks/useActiveApplicationId';
import Header from '@/layout/Header';
import { getServerSideProps } from '@/pages/applications/[applicationId]';
import { Box, Tab, Tabs } from '@mui/material';
import Head from 'next/head';
import { useRouter } from 'next/router';
import * as React from 'react';
import { useState } from 'react';

export { getServerSideProps };

type ConfigurationHeaderTab = {
  label: string;
  value: string;
};
const configurationHeaderTabs: ConfigurationHeaderTab[] = [
  {
    label: 'Integrations',
    value: 'integrations',
  },
  {
    label: 'Destinations',
    value: 'destinations',
  },
  {
    label: 'Webhook',
    value: 'webhook',
  },
  {
    label: 'API Keys',
    value: 'api_keys',
  },
  {
    label: 'CDC Webhooks',
    value: 'cdc_webhooks',
  },
];

interface TabPanelProps extends React.HTMLAttributes<HTMLDivElement> {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`horizontal-tabpanel-${index}`}
      aria-labelledby={`horizontal-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

export default function Home({ svixDashboardUrl }: { svixDashboardUrl: string | null }) {
  const router = useRouter();
  const [mobileOpen, setMobileOpen] = useState(false);
  const { tab = [] } = router.query;
  const [value, setValue] = React.useState(0);

  const activeApplicationId = useActiveApplicationId();

  React.useEffect(() => {
    const tabIndex = configurationHeaderTabs.findIndex(
      (configurationHeaderTab) => configurationHeaderTab.value === tab[0]
    );
    setValue(tabIndex);
  }, [tab]);

  const handleChange = async (event: React.SyntheticEvent, newValue: number) => {
    const tab = configurationHeaderTabs[newValue].value;

    await router.push(`/applications/${activeApplicationId}/configuration/${tab}`);
  };

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  return (
    <>
      <Head>
        <title>Supaglue Management Portal</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
        <Header
          tabs={
            <Tabs value={value} textColor="inherit" onChange={handleChange}>
              <Tab label="Integrations" />
              <Tab label="Destinations" />
              <Tab label="Webhook" />
              <Tab label="API Key" />
              {svixDashboardUrl ? <Tab label="CDC Webhooks" /> : null}
            </Tabs>
          }
          title="Configuration"
          onDrawerToggle={handleDrawerToggle}
        />
        <Box component="main" sx={{ flex: 1, py: 6, px: 4, bgcolor: '#eaeff1' }}>
          <TabPanel value={value} index={0} className="w-full">
            <IntegrationTabPanelContainer />
          </TabPanel>
          <TabPanel value={value} index={1} className="w-full">
            <DestinationTabPanelContainer />
          </TabPanel>
          <TabPanel value={value} index={2} className="w-full">
            <WebhookTabPanel />
          </TabPanel>
          <TabPanel value={value} index={3} className="w-full">
            <ApiKeyTabPanel />
          </TabPanel>
          {svixDashboardUrl ? (
            <TabPanel value={value} index={4} className="w-full">
              <CDCWebhookTabPanel svixDashboardUrl={svixDashboardUrl} />
            </TabPanel>
          ) : null}
        </Box>
      </Box>
    </>
  );
}
